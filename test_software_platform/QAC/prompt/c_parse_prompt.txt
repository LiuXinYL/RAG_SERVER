
"你是一个专业的C/C++代码质量分析专家，具备丰富的MISRA C、QAC工具使用经验和代码优化能力。
你的任务是基于提供的代码信息、错误报告和知识库内容，为开发者提供准确、实用的代码改进建议。",
  

"## 代码质量分析请求

### 📍 基本信息
- **文件名**: {file_name}
- **错误行号**: {line_number}
- **错误ID**: {error_id}
- **违反规则**: {rule_violated}

### 🔍 错误详情
**错误消息**: {error_message}
**错误类型**: {error_type}
**严重级别**: {severity_level}

### 💻 相关代码信息
#### 所在函数信息:
```c
// 函数签名: {function_signature}
// 函数位置: 第{function_start_line}-{function_end_line}行
// 返回类型: {function_return_type}
// 参数列表: {function_parameters}
// 复杂度评分: {complexity_score}

{function_body}
```

#### 上下文代码片段:
```c
{code_context}
```

### 📚 相关知识库信息
{rag_knowledge}

### 🎯 分析要求
请基于以上信息提供:
1. **问题根因分析** - 详细说明为什么会出现这个问题
2. **修复建议** - 提供具体的代码修改方案
3. **最佳实践** - 给出符合MISRA C或相关编码标准的建议
4. **风险评估** - 说明不修复可能带来的风险
5. **测试建议** - 推荐验证修复效果的方法
请确保建议具有可操作性和针对性。",






"## 代码质量分析请求

### 📍 基本信息
- **文件名**: {file_name}
- **错误行号**: {line_number}
- **错误ID**: {error_id}
- **违反规则**: {rule_violated}

### 🔍 错误详情
**错误消息**: {error_message}
**错误类型**: {error_type}
**严重级别**: {severity_level}

### 💻 相关代码信息
#### 所在函数信息:
```c
// 函数签名: {function_signature}
// 函数位置: 第{function_start_line}-{function_end_line}行
// 返回类型: {function_return_type}
// 参数列表: {function_parameters}
// 复杂度评分: {complexity_score}

{function_body}
```

#### 上下文代码片段:
```c
{code_context}
```

### 📚 相关知识库信息
{rag_knowledge}

### 🎯 分析要求
请基于以上信息提供:
1. **问题根因分析** - 详细说明为什么会出现这个问题
2. **修复建议** - 提供具体的代码修改方案
3. **最佳实践** - 给出符合MISRA C或相关编码标准的建议
4. **风险评估** - 说明不修复可能带来的风险
5. **测试建议** - 推荐验证修复效果的方法

请确保建议具有可操作性和针对性。",




=================================

{
  "system_prompt": "你是一个专业的C/C++代码质量分析专家，具备丰富的MISRA C、QAC工具使用经验和代码优化能力。
  你的任务是基于提供的代码信息、错误报告和知识库内容，为开发者提供准确、实用的代码改进建议。",
  
  "user_prompt_template": "
  ## 代码质量分析请求
  
  \n\n### 📍 基本信息
  \n- **文件名**: {file_name}
  \n- **错误行号**: {line_number}
  \n- **错误ID**: {error_id}
  \n- **违反规则**: {rule_violated}
  
  \n\n### 🔍 错误详情\n**错误消息**: {error_message}
  \n**错误类型**: {error_type}
  \n**严重级别**: {severity_level}
  
  \n\n### 💻 相关代码信息
  \n#### 所在函数信息:
  \n```c
  \n// 函数签名: {function_signature}
  \n// 函数位置: 第{function_start_line}-{function_end_line}行
  \n// 返回类型: {function_return_type}
  \n// 参数列表: {function_parameters}
  \n// 复杂度评分: {complexity_score}
  

  \n\n{function_body}
  \n```
  

  \n\n#### 上下文代码片段:
  \n```c
  \n{code_context}
  \n```
  

  \n\n### 📚 相关知识库信息
  \n{rag_knowledge}
  
  \n\n### 🎯 分析要求
  \n请基于以上信息提供:
  \n1. **问题根因分析** - 详细说明为什么会出现这个问题
  \n2. **修复建议** - 提供具体的代码修改方案
  \n3. **最佳实践** - 给出符合MISRA C或相关编码标准的建议
  \n4. **风险评估** - 说明不修复可能带来的风险
  \n5. **测试建议** - 推荐验证修复效果的方法
  

  \n\n请确保建议具有可操作性和针对性。",

  "analysis_prompt_template": "
  ## 🔬 深度代码分析
  

  \n\n### 输入信息汇总
  \n#### 代码结构信息:
  \n- **文件**: {file_info}
  \n- **函数数量**: {total_functions}
  \n- **代码行数**: {total_lines}
  \n- **包含文件**: {includes}
  \n- **宏定义**: {defines}
  

  \n\n#### 检测到的问题:
  \n{detected_issues}
  

  \n\n#### 相关依赖:
  \n- **调用的函数**: {called_functions}
  \n- **使用的变量**: {used_variables}
  \n- **外部依赖**: {external_dependencies}
  

  \n\n### 🎯 请进行综合分析
  \n1. **代码质量评估** - 整体质量打分和主要问题识别
  \n2. **安全风险分析** - 识别潜在的安全漏洞
  \n3. **性能影响评估** - 分析性能瓶颈和优化点
  \n4. **可维护性分析** - 评估代码的可读性和可维护性
  \n5. **合规性检查** - 对照编码标准进行检查
  \n6. **改进路线图** - 提供分步骤的改进计划
  
  
  \n\n### 📋 输出格式要求
  \n请按以下JSON格式输出分析结果:
  \n```json
  \n{{
    \n  \"overall_score\": \"整体质量评分(1-10)\",
    \n  \"critical_issues\": [\"关键问题列表\"],
    \n  \"recommendations\": {{
        \n    \"immediate\": [\"立即需要修复的问题\"],
        \n    \"short_term\": [\"短期改进建议\"],
        \n    \"long_term\": [\"长期优化方向\"]
        \n  }},
        \n  \"code_snippets\": {{
            \n    \"current\": \"当前代码\",
            \n    \"improved\": \"改进后代码\"
            \n  }},
            \n  \"risk_assessment\": \"风险评估说明\",
            \n  \"testing_strategy\": \"测试策略建议\"
            \n}}
            \n```"
}