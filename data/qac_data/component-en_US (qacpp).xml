<?xml version="1.0" encoding="UTF-8"?>
<!--

  NB:  Do NOT modify this file.


  This file is autogenerated from scripts in qa_libs, it generated from:
    Option_Description.xml
    Option_Description_Language-cc_CC.xml
    Component_Description_qacpp.xml

-->
<component name="qacpp" displayname="QAC++" version="7.1.0" type="primary_analyzer" parser_licence="qacpp-psr" xmlversion="2.0.0">
 <target_languages>
  <language target="C++"/>
 </target_languages>
 <description/>
 <component_help>
  <path pdf="doc-en_US/doc/component_manual/pdf/qacpp-manual.pdf"/>
  <path html="doc-en_US/doc/component_manual/html/qacpp-manual.html"/>
 </component_help>
 <icon path="doc-en_US/Resources/Images/qac-logo.png"/>
 <executable path="bin/qacpp" output_type="db" output_version="1.0.0">
  <returncodes>
   <success description="Parse Success" number="0"/>
   <hard_error description="Parse Failure" number="1"/>
   <license_error description="License Failure" number="11"/>
   <general_codes>
    <code name="deployment_error" description="Deployment Error" number="10"/>
    <code name="system_error" description="System Error" number="18"/>
    <code name="fatal_error" description="Fatal Error" number="19"/>
    <code name="filesystem_error" description="Filesystem Error" number="22"/>
   </general_codes>
   <default description="Unknown Error: Please Contact Programming Research Ltd."/>
  </returncodes>
  <interface bom="yes" call_type="file" exclusive_scheduling="no">
   <settingsfile option="-via">
    <item content="cct_content"/>
    <item content="system_includes" specified_by="-si "/>
    <item content="project_includes" specified_by="-i "/>
    <item content="project_defines" specified_by="-d "/>
    <item content="active_messages" specified_by="-o "/>
    <item content="compiler_map" option_key="coderegex" specified_by="-cre "/>
    <item content="source_file"/>
   </settingsfile>
   <connection_string option="-url"/>
   <output_directory option="-op"/>
  </interface>
  <component_options>
   <cli_option name="-align " shortcut="-a " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-align <i>type</i>=<i>bytes</i>]]></argument_syntax>
    <default_setting>-align "char=1" -align "short=2" -align "int=4" <br/>
    -align "long=4" -align "longlong=8" -align "float=4" <br/>
    -align "double=8" -align "ldouble=8" -align "codeptr=4" <br/>
     <b>QAC++</b>: <br/>
    -align "bool=1" -align "wchar_t=2" -align "default_new=16"<br/>
     <b>QAC</b>: <br/>
    -align "_Bool=1"
    </default_setting>
    <description><![CDATA[
        <a id="Align">
        Determines the alignment requirement of each primitive type.
        </a>

            <p>
              The alignment of data types may be constrained by your
              hardware and compiler. For example, your environment may
              allocate a char at any memory address, but require an
              int to start on a four-byte boundary. Such constraints
              impose restrictions on the validity of pointer
              conversions. For example, it might be valid to cast a
              pointer to int to a pointer to char but, invalid to do
              the reverse. The analyzer generates warnings that
              identify dangerous pointer casts.
            </p>
            <p>
              See the component manual for details on the product specific alignment options.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowconstconvdeduction" shortcut="-accd" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowconstconvdeduction[{+|-}]]]></argument_syntax>
    <default_setting>-allowconstconvdeduction-</default_setting>
    <description><![CDATA[
        <a id="AllowConstConvDeduction">When enabled, template argument deduction is allowed to succeed where deduced types differ by const or volatile qualification.
        </a>

            <p>According to the ISO Standard, template argument
            deduction for types should fail where the same template
            argument is deduced to be different for two function
            arguments. This also applies where the types differ only
            by const or volatile.</p>
            <p>For Example:</p>
            <pre><code>
const int ci = 0;
int nci = 0;

template &lt;typename T&gt;
void foo (T &amp;, T &amp;);

void bar ()
{
  // Succeeds with -allowconstconvdeduction+
  foo (ci, nci);
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowdpdtusingdecltype" shortcut="-adudt" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowdpdtusingdecltype[{+|-}]]]></argument_syntax>
    <default_setting>-allowdpdtusingdecltype-</default_setting>
    <description><![CDATA[
        <a id="AllowDpdtUsingDeclType">When enabled, a dependent using declaration can introduce a type name, even if the typename keyword is not used.
        </a>

            <p>
              According to the ISO Standard, a name that is dependent on a template parameter is assumed not to name a
              type unless the name is qualified by the 'typename' keyword. This also applies to member using declarations.
              When enabled, if the name introduced in the class scope is used in an elaborated type specifier, it is
              assumed to refer to the base class entity instead of declaring a new type.
            </p>
            <p>For Example:</p>
            <pre><code>
template&lt;typename T&gt;
struct A
{
  struct C
  { };
};

template&lt;typename T&gt;
struct B : A&lt;T&gt;
{
  using A&lt;T&gt;::C;

  // return type refers to typename A&lt;T&gt;::C with -allowdpdtusingdecltype
  struct C foo();
};
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowfnptrconvdeduction" shortcut="-afpcd" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowfnptrconvdeduction[{+|-}]]]></argument_syntax>
    <default_setting>-allowfnptrconvdeduction-</default_setting>
    <description><![CDATA[
        <a id="AllowFnPtrConvDeduction">When enabled, function-to-pointer conversions are allowed during template argument deduction.
        </a>

            <p>This allows the analyzer to match template function
            partial ordering rules where a reference-to-function
            parameter is considered more specialized than a
            pointer-to-function parameter.</p>
            <p>For Example:</p>
            <pre><code>
void f(int);

template &lt;typename T1, typename&gt;
void foo(T1 (&amp; f) (T2));
template &lt;typename T1, typename T2&gt;
void foo(T1 (* f) (T2));

void bar()
{
  // Not ambiguous with -allowfnptrconvdeduction+
  foo(f);
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowimplicitconvptrmbr" shortcut="-aicpm" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowimplicitconvptrmbr[{+|-}]]]></argument_syntax>
    <default_setting>-allowimplicitconvptrmbr-</default_setting>
    <description><![CDATA[
        <a id="AllowImplicitConvPtrMbr">When enabled, member functions are allowed to implicitly convert to pointer to member functions.
        </a>

            <p>For Example:</p>
            <pre><code>
struct A
{
  int foo();

  void bar()
  {
    // Succeeds with -allowimplicitconvptrmbr+
    int (A::*pf)() = foo;
  }
};
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowimplicitlangconv" shortcut="-ailc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowimplicitlangconv[{+|-}]]]></argument_syntax>
    <default_setting>-allowimplicitlangconv+</default_setting>
    <description><![CDATA[
        <a id="AllowImplicitLangConv">When enabled, language linkage is not considered part of a function.
        </a>

            <p>
              Strict compliance to the standard would require that two function types with different linkage be modelled as distinct.  However, in practice, compilers do not distinguish between such types.
            </p>
            <p>For Example:</p>
            <pre><code>
extern "C" void bar(int);

template &lt;typename T&gt;
void f(const T &amp;)
{ T::do_not_instantiate; }

template &lt;typename R, typename T&gt;
void f(R (&amp;t)(T))
{ }

void foo()
{
  // Calls f(R (&amp;t)(T)) with -allowimplicitlangconv+
  f(bar);
}
</code></pre>
            <p>
              This option also changes the meaning of two function declarations, where parameters of the function have different language linkage.
            </p>
            <p>For Example:</p>
            <pre><code>
extern "C" typedef void C_type ( void * );
typedef void CPP_type ( void * );
void f ( int ( * ) ( C_type ) ) {}
void f ( int ( * ) ( CPP_type ) ) {} // -ailc-: Overloads
                                     // -alic+: Duplicate Definition
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowtempnonconstrefbind" shortcut="-atncrb" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowtempnonconstrefbind[{+|-}]]]></argument_syntax>
    <default_setting>-allowtempnonconstrefbind-</default_setting>
    <description><![CDATA[
        <a id="AllowTempNonConstRefBind">When enabled, temporaries are allowed to be bound to non-const references.
        </a>

            <p>
              According to the ISO Standard, a temporary can only be
              bound to a const reference, however some compilers do
              not enforce this constraint.
            </p>
            <p>For Example:</p>
            <pre><code>
struct A
{
};

void foo ()
{
  // Succeeds with -allowtempnonconstrefbind+
  A &amp; a = A();
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowrefcomparisonforuserdefconvseq" shortcut="-arcfudcs" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowrefcomparisonforuserdefconvseq[{+|-}]]]></argument_syntax>
    <default_setting>-allowrefcomparisonforuserdefconvseq-</default_setting>
    <description><![CDATA[
        <a id="AllowRefComparisonForUserDefConvSeq">When enabled user-defined conversion sequences are allowed to differ based on the reference type of the parameters and the corresponding types of the argument expressions.
        </a>

            <p>According to the ISO Standard, for two user-defined conversion sequences to be compared they must have the same user-defined conversion function or initialize the same class in an aggregate initialization. However, some compilers ignore the requirement for the same conversion function when the parameter is a reference type if a match can be determined based on the second standard conversion sequence.</p>
            <p>For Example:</p>
            <pre><code>
struct A { int i; double j; };
struct B { int k; double l; };

void foo (A&amp;&amp;);
void foo (const B&amp;);
void bar ()
{
  // Succeeds with -allowrefcomparisonforuserdefconvseq+
  foo({1,2});
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-allowtmplargnullptrconv" shortcut="-atanpc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-allowtmplargnullptrconv[{+|-}]]]></argument_syntax>
    <default_setting>-allowtmplargnullptrconv-</default_setting>
    <description><![CDATA[
        <a id="AllowTmplArgNullPtrConv">When enabled, null pointer conversions are allowed for non-type template arguments.
        </a>

            <p>For Example:</p>
            <pre><code>
template &lt;int *&gt;
struct A
{
};

void foo ()
{
  // Succeeds with -allowtmplargnullptrconv+
  A&lt;0&gt; a;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-alwaysusedirectinitializer" shortcut="-audi" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-alwaysusedirectinitializer[{+|-}]]]></argument_syntax>
    <default_setting>-alwaysusedirectinitializer-</default_setting>
    <description><![CDATA[
        <a id="AlwaysUseDirectInitializer">When enabled, <i>direct</i> rather than <i>copy</i> initialization is used for declarations of the form 'T x = e'.
        </a>

            <p>For Example:</p>
            <pre><code>
struct B;

struct A
{
  A(B&amp;);
};

struct B
{
  operator A();
};

void foo (B &amp; b)
{
  // Not ambiguous with -alwaysusedirectinitializer+
  A a = b;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-arithrsh" shortcut="-ar" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-arithrsh[{+|-}]]]></argument_syntax>
    <default_setting>-arithrsh-</default_setting>
    <description><![CDATA[
        <a id="ArithRsh">The -arithrsh option defines whether the right shift operator &gt;&gt; performs an arithmetic shift (-arithrsh+) or a logical shift (-arithrsh-).
        </a>

            <p>
              The ISO Standard states that the result of an arithmetic
              right shift on a negative signed number is
              implementation-defined. That is, each individual
              compiler has to specify the effect of shifting negative
              values right.
            </p>
            <p>
              This option is included in the analyzer to support the
              general bit-field treatment of data types in the common
              dataflow module.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-bitsigned" shortcut="-bits" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-bitsigned[{+|-}]]]></argument_syntax>
    <default_setting>-bitsigned+</default_setting>
    <description><![CDATA[
        <a id="BitSigned">Defines whether plain integer bit-fields are treated as signed int (-bitsigned+) or unsigned int (-bitsigned-).
        </a>

            <p>
              The ISO Standard states that the sign of a bit-field
              that is not explicitly <i>signed</i> or <i>unsigned</i>
              is implementation-defined.
            </p>
            <p>For Example:</p>
            <pre><code>
struct
{
  signed int sbit : 3;   /* holds values between -4 and +3       */
  unsigned int ubit : 5; /* holds values between 0 and 31        */
  int bit : 4;           /* may hold values between -8 and +7 or
                            between 0 and 15                     */
} x;
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03alignment" shortcut="-c++03align" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03alignment[{+|-}]]]></argument_syntax>
    <default_setting>-c++03alignment-</default_setting>
    <description><![CDATA[
        <a id="Cpp03Alignment">When enabled, <code>alignas</code> or <code>alignof</code> are not treated as keywords.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03alignment+
  int alignas;
  int alignof;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03auto" shortcut="-c++03a" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03auto[{+|-}]]]></argument_syntax>
    <default_setting>-c++03auto-</default_setting>
    <description><![CDATA[
        <a id="Cpp03Auto">When enabled, the 2003 ISO Standard rules will be used for the <code>auto</code> keyword.
        </a>

            <p>
              The 2011 ISO Standard changed <i>auto</i> from being a
              storage-class-specifier to a type-specifier, this option
              controls which behavior is used.
            </p>
            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03auto+
  auto int i;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03constexpr" shortcut="-c++03ce" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03constexpr[{+|-}]]]></argument_syntax>
    <default_setting>-c++03constexpr-</default_setting>
    <description><![CDATA[
        <a id="Cpp03Constexpr">When enabled, support for the constexpr language feature is removed, and the number of expressions considered to be valid 'constant integral expressions' is reduced accordingly. Finally, <code>constexpr</code> is no longer treated as a keyword.</a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03constexpr+
  int constexpr;
}

template&lt;int I&gt;
struct A
{ };

A&lt;(1, 2)&gt; a; // fails with -c++03constexpr+
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03decltype" shortcut="-c++03dt" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03decltype[{+|-}]]]></argument_syntax>
    <default_setting>-c++03decltype-</default_setting>
    <description><![CDATA[
        <a id="Cpp03Decltype">When enabled, <code>decltype</code> is not treated as a keyword.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03decltype+
  int decltype;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03exceptionspecification" shortcut="-c++03es" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03exceptionspecification[{+|-}]]]></argument_syntax>
    <default_setting>-c++03exceptionspecification-</default_setting>
    <description><![CDATA[
        <a id="Cpp03ExceptionSpecification">When enabled, the 2003 ISO Standard rules will be used for exception specifications on implicit member functions and operator new.
        </a>

            <p>For Example:</p>
            <pre><code>
struct A { ~A(); };
struct B : public A {
  // ~B() noexcept; with -c++03exceptionspecification-
  // ~B();          with -c++03exceptionspecification+
};

void f (B * b) throw (int)
{
  //
  // With -c++03exceptionspecification+
  //   4632 Function without an exception specification called
  //        from a function with an exception specification.
  //
  // With -c++03exceptionspecification-
  //   4039 The following type is not thrown by the function: 'int'.
  //
  b-&gt;~B();
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03initializer" shortcut="-c++03init" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03initializer[{+|-}]]]></argument_syntax>
    <default_setting>-c++03initializer-</default_setting>
    <description><![CDATA[
        <a id="Cpp03Initializer">When enabled, the 2003 ISO Standard rules will be used for aggregate initialization.
        </a>

            <p>For Example:</p>
            <pre><code>
struct A
{
  int i;
  operator int () const; // only called with c++03init
};

struct B
{
  A a;
};

void foo(A a)
{
  B b = { { a } };
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03linkage" shortcut="-c++03l" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03linkage[{+|-}]]]></argument_syntax>
    <default_setting>-c++03linkage-</default_setting>
    <description><![CDATA[
        <a id="Cpp03Linkage">When enabled, members of unnamed namespaces will not have implicit internal linkage.
        </a>

            <p>For Example:</p>
            <pre><code>
namespace {
  // With -c++03linkage+ 'foo' given external linkage
  // With -c++03linkage- 'foo' given internal linkage
  void foo ();
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03nomove" shortcut="-c++03nm" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03nomove[{+|-}]]]></argument_syntax>
    <default_setting>-c++03nomove-</default_setting>
    <description><![CDATA[
        <a id="Cpp03NoMove">When enabled, implicit move constructors or assignment operators will not be declared.
        </a>

            <p>For Example:</p>
            <pre><code>
struct A {
  //
  // Implicit declarations for:
  //   A();
  //   ~A() noexcept;
  //   A(A const &amp;);
  //   A&amp; operator=(A const &amp;);

  //
  // With -c++03nomove- also declares:
  //   A(A&amp;&amp;);
  //   A&amp; operator=(A&amp;&amp;);
  //
};
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03nostaticassert" shortcut="-c++03nsa" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03nostaticassert[{+|-}]]]></argument_syntax>
    <default_setting>-c++03nostaticassert-</default_setting>
    <description><![CDATA[
        <a id="Cpp03NoStaticAssert">When enabled, <code>static_assert</code> is not treated as a keyword.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03nostaticassert+
  int static_assert;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03nounicodechartypes" shortcut="-c++03nuct" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03nounicodechartypes[{+|-}]]]></argument_syntax>
    <default_setting>-c++03nounicodechartypes-</default_setting>
    <description><![CDATA[
        <a id="Cpp03NoUnicodeCharTypes">When enabled, <code>char16_t</code> and <code>char32_t</code> are not treated as keywords.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03nounicodechartypes+
  int char16_t;
  int char32_t;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03nouserdefinedliterals" shortcut="-c++03nudl" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03nouserdefinedliterals[{+|-}]]]></argument_syntax>
    <default_setting>-c++03nouserdefinedliterals-</default_setting>
    <description><![CDATA[
        <a id="Cpp03NoUserDefinedLiterals">When enabled, a string literal and adjacent suffix will not be parsed as a user defined literal.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03nouserdefinedliterals+
  "Hello"__FILE__;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03nullptr" shortcut="-c++03np" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03nullptr[{+|-}]]]></argument_syntax>
    <default_setting>-c++03nullptr-</default_setting>
    <description><![CDATA[
        <a id="Cpp03Nullptr">When enabled, <code>nullptr</code> is not treated as a keyword.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03nullptr+
  int nullptr;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03nullptrconst" shortcut="-c++03npc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03nullptrconst[{+|-}]]]></argument_syntax>
    <default_setting>-c++03nullptrconst-</default_setting>
    <description><![CDATA[
        <a id="Cpp03NullptrConst">When enabled, any integral constant expression evaluating to '<code>0</code>' is treated as a null pointer constant.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03nullptrconst+
  int *ptr = (1 - 1);
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03plainolddata" shortcut="-c++03pod" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03plainolddata[{+|-}]]]></argument_syntax>
    <default_setting>-c++03plainolddata-</default_setting>
    <description><![CDATA[
        <a id="Cpp03PlainOldData">When enabled, the 2003 ISO Standard rules for POD (plain old data) types are used.
        </a>

            <p>For Example:</p>
            <pre><code>
struct A // POD in C++11, but not in C++03
{
  int getValue () const;

 private:
  int m_value;
};
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++03threadlocal" shortcut="-c++03tl" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++03threadlocal[{+|-}]]]></argument_syntax>
    <default_setting>-c++03threadlocal-</default_setting>
    <description><![CDATA[
        <a id="Cpp03ThreadLocal">When enabled, <code>thread_local</code> is not treated as a keyword.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++03threadlocal+
  int thread_local;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++11autodeduction" shortcut="-c++11auto" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++11autodeduction[{+|-}]]]></argument_syntax>
    <default_setting>-c++11autodeduction-</default_setting>
    <description><![CDATA[
        <a id="Cpp11AutoDeduction">When enabled, the 2011 ISO Standard rules for auto type deductions are used.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // deduced as std::initializer_list&lt;int&gt; with -c++11autodeduction+
  auto l = { 1 };
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++11nodigitseparators" shortcut="-c++11nds" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++11nodigitseparators[{+|-}]]]></argument_syntax>
    <default_setting>-c++11nodigitseparators-</default_setting>
    <description><![CDATA[
        <a id="Cpp11NoDigitSeparators">When enabled, use of a single quote character as a digit separator is not allowed.
        </a>

            <p>For Example:</p>
            <pre><code>
#define M(x, ...) __VA_ARGS__

void foo()
{
  int x[] = { 0, M(1'2,3'4) }; // single element array with
                               // -c++11nodigitseparators
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++11nosizeddeallocation" shortcut="-c++11nsd" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++11nosizeddeallocation[{+|-}]]]></argument_syntax>
    <default_setting>-c++11nosizeddeallocation-</default_setting>
    <description><![CDATA[
        <a id="Cpp11NoSizedDeallocation">When enabled, sized deallocation functions will not be implicitly defined in the global scope.
        </a>

            <p>For Example:</p>
            <pre><code>
struct A
{ }

void operator delete (void *ptr)
{ }

void foo(A *a)
{
  delete a; // will call unsized deallocation function with
            // -c++11nosizeddeallocation+
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14aggregate" shortcut="-c++14agg" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14aggregate[{+|-}]]]></argument_syntax>
    <default_setting>-c++14aggregate-</default_setting>
    <description><![CDATA[
        <a id="Cpp14Aggregate">When enabled, a class with a base class will never be an aggregate.</a>

            <p>
              The 2017 ISO Standard allows aggregates to have public, non-virtual base classes.
            </p>
            <p>For Example:</p>
            <pre><code>
struct B
{
  int b;
};

struct D : B
{
  int i;
};

struct A
{
  A(B, int);
};

void foo(D);
void foo(A);

void bar()
{
  foo({ { 1 }, 2 }); // calls 'foo(A)' with -c++14aggregate, ambiguous otherwise
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14constexpr" shortcut="-c++14ce" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14constexpr[{+|-}]]]></argument_syntax>
    <default_setting>-c++14constexpr-</default_setting>
    <description><![CDATA[
        <a id="Cpp14Constexpr">When enabled, lambda expressions are never implicitly declared 'constexpr' and not all constant expressions can be used as non-type template arguments of non-integral type.</a>

            <p>
              The 2017 ISO Standard implicitly declares any lambda
              expression 'constexpr' if it doesn't violate any of the
              rules for 'constexpr' functions.
            </p>
            <p>
              The 2017 ISO Standard also allows any converted constant
              expression to be used as a non-type template argument.
            </p>
            <p>For Example:</p>
            <pre><code>
template&lt;int I&gt;
struct A
{ };

void foo()
{
  const int i = [] () { return 1; } ();
  A&lt;i&gt; a; // fails with -c++14constexpr+
}

template&lt;int &amp;I&gt;
struct C
{ };

int i;
int j;

constexpr int &amp;getNta(bool b)
{
  return b ? i : j;
}

void bar()
{
  C&lt;getNta(true)&gt; c; // fails with c++14constexpr+
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14exceptionspecification" shortcut="-c++14es" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14exceptionspecification[{+|-}]]]></argument_syntax>
    <default_setting>-c++14exceptionspecification-</default_setting>
    <description><![CDATA[
        <a id="Cpp14ExceptionSpecification">When enabled, exception specifications are not part of the function type.
        </a>

            <p>
              The 2017 ISO Standard made the exception specification
              part of the function type.
            </p>
            <p>For Example:</p>
            <pre><code>
#include &lt;type_traits&gt;

void f();
void g() noexcept;

static_assert(! std::is_same&lt;decltype(f), decltype(g)&gt;(),
              "types are different in C++'17");
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14noguaranteedcopyelision" shortcut="-c++14ngce" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14noguaranteedcopyelision[{+|-}]]]></argument_syntax>
    <default_setting>-c++14noguaranteedcopyelision-</default_setting>
    <description><![CDATA[
        <a id="Cpp14NoGuaranteedCopyElision">When enabled, a temporary object will be created for prvalues, which may require a call to the copy or move constructors.
        </a>

            <p>For Example:</p>
<MadCap:codeSnippet xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: CPP;">struct A
{
  A();
  explicit A (A const &amp;) = delete;
  explicit A (A &amp;&amp;) = delete;
};
void f1(A);

void f2()
{
  f1 ( A{} );  // Fails with -c++14noguaranteedcopyelision+
}
A f3()
{
  return A{};  // Fails with -c++14noguaranteedcopyelision+
}</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14notypefromntadeduction" shortcut="-c++14ntfnd" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14notypefromntadeduction[{+|-}]]]></argument_syntax>
    <default_setting>-c++14notypefromntadeduction-</default_setting>
    <description><![CDATA[
        <a id="Cpp14NoTypeFromNtaDeduction">When enabled, a template type parameter cannot be deduced from the type of non-type template argument.
        </a>

            <p>For Example:</p>
            <pre><code>
template&lt;int I&gt;
struct C
{ };

template&lt;typename T, T n&gt;
void foo(C&lt;n&gt; const &amp; c, int i) = delete;

template&lt;int n&gt;
void foo(C&lt;n&gt; const &amp; c, short s);

void bar(C&lt;1&gt; const &amp; c)
{
  // Succeeds with -c++14notypefromntadeduction
  foo(c, 1);
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14noextendedoperatornew" shortcut="-c++14neon" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14noextendedoperatornew[{+|-}]]]></argument_syntax>
    <default_setting>-c++14noextendedoperatornew-</default_setting>
    <description><![CDATA[
        <a id="Cpp14NoExtendedOperatorNew">
          When enabled, C++17 support for non-standard alignment of objects is not available.
        </a>

            <p>
              The 2017 ISO Standard added support for non-standard alignment of objects with
              new-extended overloads of the 'new' operator.
            </p>
            <p>For Example:</p>
            <pre><code>
class alignas(32) Pos3d {
  double x, y, z;
};

Pos3d* p = new Pos3d(); // doesn't call new-extended overload if -c++14neon+
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14noutf8charliteral" shortcut="-c++14nucl" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14noutf8charliteral[{+|-}]]]></argument_syntax>
    <default_setting>-c++14noutf8charliteral-</default_setting>
    <description><![CDATA[
        <a id="Cpp14NoUtf8CharLiteral">When enabled, <code>u8</code> is not recognizes as a character literal prefix.
        </a>

            <p>For Example:</p>
            <pre><code>
#define u8 + (int)

void foo()
{
  // Succeeds with -c++14noutf8charliteral+
  int c = 1 u8' ';
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14sequenceorder" shortcut="-c++14so" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14sequenceorder[{+|-}]]]></argument_syntax>
    <default_setting>-c++14sequenceorder-</default_setting>
    <description><![CDATA[
        <a id="Cpp14SequenceOrder">
          When enabled, the order of evaluation of any part of any expression follows the C++ '14 rules.
        </a>

            <p>
              The 2017 ISO Standard introduced new evaluation order guarantees to make execution safer and more intuitive to programmers.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14trigraphs" shortcut="-c++14tg" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14trigraphs[{+|-}]]]></argument_syntax>
    <default_setting>-c++14trigraphs-</default_setting>
    <description><![CDATA[
        <a id="Cpp14Trigraphs">When enabled, trigraph sequences will be replaced.
        </a>

            <p>
              The 2017 ISO Standard removed support for trigraph
              sequences. With this option, sequences beginning with
              "??" (trigraphs) will be replaced with a single
              character. This affects comments and string literals.
            </p>
            <p>For Example:</p>
            <pre><code>
static_assert(sizeof("??(??)") == 7
  , "this will fail if trigraphs are replaced");
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++14notmpltmplargmatching" shortcut="-c++14nttam" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++14notmpltmplargmatching[{+|-}]]]></argument_syntax>
    <default_setting>-c++14notmpltmplargmatching-</default_setting>
    <description><![CDATA[
        <a id="Cpp14NoTmplTmplArgMatching">When enabled, matching of template template parameters will not consider parameters with defaults or packs.</a>

            C++17 allows matching of surplus template template arguments to the template template parameter list
            if the surplus argument has a default or is a pack.
            <p>For Example:</p>
            <pre><code>
template &lt;template &lt;typename&gt; class&gt; void foo ();

template &lt;typename, typename = int&gt; struct SA;
template &lt;typename, typename...&gt; struct SB;

void bar ()
{
  // cpp14notmpltmplargmatching must be disabled for these to match
  foo&lt;SA&gt; (); 
  foo&lt;SB&gt; ();
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++17nochar8type" shortcut="-c++17nc8t" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++17nochar8type[{+|-}]]]></argument_syntax>
    <default_setting>-c++17nochar8type-</default_setting>
    <description><![CDATA[
        <a id="Cpp17NoChar8Type">When enabled, <code>char8_t</code> is not treated as a keyword and the type of a 'u8' literal is a narrow char.
        </a>

            <p>For Example:</p>
            <pre><code>
void foo()
{
  // Succeeds with -c++17nochar8type+
  int char8_t;
  // Type of 'c' will be 'char'
  auto c = u8'c';
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++17noconcepts" shortcut="-c++17nc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++17noconcepts[{+|-}]]]></argument_syntax>
    <default_setting>-c++17noconcepts-</default_setting>
    <description><![CDATA[
        <a id="Cpp17NoConcepts">
          When enabled, neither 'concept' nor 'requires' will be parsed as keywords.
        </a>

            <p>
              The 2020 ISO Standard added concepts.  This feature improves error handling and provides a more intuitive approach to template meta-programming.
            </p>
            <p>
              The identifiers 'concept' and 'requires' are keywords in C++ '20, and so code written for versions of C++ before C++ '20 may fail to compile.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++17noexplicitbool" shortcut="-c++17neb" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++17noexplicitbool[{+|-}]]]></argument_syntax>
    <default_setting>-c++17noexplicitbool-</default_setting>
    <description><![CDATA[
        <a id="Cpp17NoExplicitBool">
          When enabled, '(' following 'explicit' will not be parsed as part of the explicit specifier.
        </a>

            <p>
              The 2020 ISO Standard enhances <code>explicit</code> function specifier to accept an optional <code>(constant expression)</code>.
            </p>
            <p>
              C++ '20 specifies that a <code>(</code> token, which follows <code>explicit</code> is parsed as part of the explicit specifier.
              This may cause code valid in C++ '17 to not parse successfully in C++ '20.  This option removes parsing support for <code>explict(bool)</code> meaning the tool will parse such tokens in strict C++ '17 mode.
            </p>
            <p>For Example:</p>
            <pre><code>
              
struct A
{
  explicit (A) ();  // Requires -c++17neb in order to parse as equivalent to:
                    // explicit A ();
};

            </code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c++17nothreewaycomparison" shortcut="-c++17ntwc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c++17nothreewaycomparison[{+|-}]]]></argument_syntax>
    <default_setting>-c++17nothreewaycomparison-</default_setting>
    <description><![CDATA[
        <a id="Cpp17NoThreeWayComparison">When enabled, '&lt;=&gt;' will be treated as a '&lt;=' token followed by a '&gt;' token.
        </a>

            <p>
              The 2020 ISO Standard added the three-way comparison operator.  Based on the value of the operands to this operator, it will return a value less than zero, equal to zero, or greater than zero.
            </p>
            <p>
              There are some edge case situations where code legal in C++ '17 does not parse in C++ '20 due to the addition of the &lt;=&gt; token.  This option removes parsing support &lt;=&gt; meaning the tool will parse such tokens in strict C++ '17 mode.</p>
            <p>For Example:</p>
            <pre><code>
struct A
{
  bool operator&lt;= (A const &amp;);
};

template &lt;bool (A::*pf)(A const &amp;)&gt;
struct B
{
};

void foo ()
{
  B&lt;&amp;A::operator&lt;=&gt; a;  // Requires -c++17ntwc in order to parse as:
                        // B&lt; &amp;A::operator&lt;= &gt;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-coderegex " shortcut="-cre " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-coderegex s/<i>regex</i>/<i>replacement</i>/<i>modifiers</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="CodeRegEx">When specified, this option can be used to replace sections of code that match a regular expression.
        </a>

            <p class="Note">
              <br />Characters such as single or double quotes,
              brackets and '.' have special meaning in regular
              expressions.  Depending on the intended meaning of such
              characters, standard switching of these characters may
              be required.
            </p>
            <p>
              When specified, this option can be used to replace
              sections of code that match the regular expression.
              This may be particularly useful for:
            </p>
            <ul>
              <li>Working around unsupported compiler extensions,</li>
              <li>Automatically controlling message visibility for auto generated code,</li>
              <li>Applying custom <i>non-intrusive</i> suppressions.</li>
            </ul>
            <p><b>Optional Modifiers:</b>
              <br />The following modifiers are supported:
            </p>
            <ul>
              <li>[l] Do not pad replacement expression with newlines</li>
              <li>[c] Do not pad replacement expression with spaces</li>
            </ul>
            <p>
              Code replacement is particularly useful for handling
              non-standard language extensions.  For example, the
              <i>__property</i> extension can be supported using the
              following:
            </p>
            <pre>
-coderegex="s/__property([^=]*)=[^;]*;/\1;/"
</pre>
            <p>
              The following source will match the regular expression:
            </p>
            <pre><code>
__property long var
  = {read = get_Creator};
</code></pre>
            <p>
              The following tokens will be parsed by the tools:
            </p>
            <pre><code>
long var;
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-d " shortcut="-d " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-d <i>ident</i>[=[<i>value</i>]]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Defines">Defines macros for use in parsing.</a>

            <p>
              The compilation of source code is often controlled by
              macros supplied to the compiler through command line
              options. Macros can be supplied on command line using
              -d.  Command line macros can also be undefined using the
              -undef option.
            </p>
            <p>
              Macros may also be specified using the -systemdefine option.
            </p>
            <p>
              There are three ways to define a macro:
            </p>
            <pre><code>
#define ident 1        /* Command line equivalent: -d ident       */
#define ident value    /* Command line equivalent: -d ident=value */
#define ident          /* Command line equivalent: -d ident=      */
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-delayparsefntemplates" shortcut="-dpft" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-delayparsefntemplates[{+|-}]]]></argument_syntax>
    <default_setting>-delayparsefntemplates-</default_setting>
    <description><![CDATA[
        <a id="DelayParseFnTemplates">When enabled, parsing of function templates are delayed until they are being instantiated.
        </a>

            <p>
              This behavior is required when analyzing MFC or ATL source.
            </p>
            <p>For example:</p>
            <pre><code>
template &lt;typename T&gt;
void foo ()
{
  // Succeeds with -delayparsefntemplates+
  ++NS::i;
}
namespace NS
{
  int i;
}
void bar ()
{
  foo&lt;int&gt; ();
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-dontusec99decintlittypes" shortcut="-duc99dilt" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-dontusec99decintlittypes[{+|-}]]]></argument_syntax>
    <default_setting>-dontusec99decintlittypes+</default_setting>
    <description><![CDATA[
        <a id="DontUseC99DecIntLitTypes">When -dontusec99decintlittype is disabled, the first type large enough from 'int', 'long' and 'long long' when determining the size of an unsuffixed literal.
        </a>

            <p>
              Literals with values greater than LONG_MAX have 'long
              long' type according to the 2011 ISO Standard.  However,
              some older compilers may treat such literals as
              'unsigned long'.
            </p>
            <p class="Note">
              <br />The option is so named as C99 was the first ISO
              standard to adopt the 'long long' type and define the
              rules for it.
            </p>
            <p>For Example:</p>
            <pre><code>
void foo(int i);
void foo(unsigned long ul);
void test_duc99dilt_OFF()
{
  //
  // qac++ uses long long as the type of literal in accordance
  // with the C99 standard
  //
  // ambiguous: no overload with an argument long long
  // and the conversions to unsigned long and int are equal
  foo(4294967295); // ambiguous
}
void test_duc99dilt_ON()
{
  //
  // qacpp uses unsigned long as the type for the literal
  //
  // therefore foo(unsigned long) is chosen from the overload set
  foo(4294967295); // calls foo(unsigned long)
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-echo " shortcut="-e " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-echo <i>text</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Echo">Specifies that <i>text</i> is echoed to the console.
        </a>

            <p>This option can be used to show the configuration files that are being referenced.</p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-eewidth " shortcut="-eewidth " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-eewidth <i>value</i>]]></argument_syntax>
    <default_setting>-eewidth 8</default_setting>
    <description><![CDATA[
        <a id="EmbedElementWidth">Specifies the width in bits of each individual element in a binary resource.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-embedlimit " shortcut="-embedlimit " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-embedlimit <i>value</i>]]></argument_syntax>
    <default_setting>-embedlimit 1000000</default_setting>
    <description><![CDATA[
        <a id="EmbedLimit">Specifies the maximum number of elements that can be read from a binary resource.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-embed " shortcut="-embed " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-embed <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="EmbedPath">Specifies a search path for binary resource files.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-enabledataflow" shortcut="-ed" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-enabledataflow[{+|-}]]]></argument_syntax>
    <default_setting>-enabledataflow-</default_setting>
    <description><![CDATA[
        <a id="EnableDataflow">Turns on the added dataflow (DF^2) analysis functionality.
        </a>

            <p>
              The term "<i>dataflow analysis</i>" refers to a range of
              techniques in which static analysis of source code is
              used to analyze run-time behavior of a program. Dataflow
              analysis can identify a class of problems which may
              range from serious issues such as undefined behavior to
              conditions which are of interest simply because they are
              frequently associated with coding errors.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-encoding " shortcut="-en " cumulative="no" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-encoding <i>encoding</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Encoding">Specifies the character set of the source file being analyzed.
        </a>

            <p>
              The analyzer has the ability to read files encoded with
              many different character sets.  The name of the
              character set to use for a given file can be specified
              using the <code>-encoding</code> option.
            </p>
            <p class="Note">
              <br />The encoding option is ignored for source
              files that use a Byte Order Mark (BOM).  These files
              will always be read using using the UTF variant
              specified by the BOM.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-errnosettingfunction " shortcut="-esf " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-errnosettingfunction <i>function</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ErrnoSettingFunction">Specifies name of the errno-setting function.
        </a>

            <p>
              The function specified by <i>function</i> will be
              considered to set <code>errno</code> and so may result
              in messages warning that errno has not been appropriately zeroed or checked.
            </p>
            <p>For example:</p>
            <pre><code>
void foo(void)
{
  extern void bar (void);
  bar(); // Generates diagnostics with -errnosettingfunction bar
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-errorstatusreturningfunction " shortcut="-erf " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-errorstatusreturningfunction <i>function</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ErrorStatusReturningFunction">Specifies the name of a function that returns an error status flag.
        </a>

            <p>
              The function specified by <i>function</i> will be
              considered to return a value representing a success flag
              or error status. If it is not checked immediately,
              a warning will be emitted.
            </p>
            <p>For example:</p>
            <pre><code>
void foo(void)
{
  extern int bar (void);
  bar(); // Generates a warning with -errorstatusreturningfunction bar

  if (bar () == 0) { } // No warning, error status checked
}
</code></pre>
            <p>
              If a number is specified in parentheses immediately
              after the name, it is interpreted as the index (starting
              from 1) of an out-parameter which stores error status,
              rather than the return value itself:
            </p>
            <pre><code>
void foo2(void)
{
  extern void baz (int * status, int value);

  int status1;
  baz (&amp;status1, 42); // Generates a warning with
                      // -errorstatusreturningfunction "baz(1)"

  int status2;
  baz (&amp;status2, 42); // No warning, status2 checked
  if (status2 == 0) { }
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-forceinclude " shortcut="-fi " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-forceinclude <i>filename</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ForceInclude">Causes <i>filename</i> to be implicitly included at the beginning of each translation unit.
        </a>

            <p>
              This method of "force-including" a file can be sometimes a useful way of defining macros and other project settings.
            </p>
            <p>
              If the specified filename is not found, then the -i and -si options will be used to search for the file.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-forgetall " shortcut="-f " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-forgetall <i>option</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ForgetAll">Resets previous configuration settings for <i>option</i>.
        </a>

            <p>
              Some options are cumulative in their action in that successive usage of the option adds extra settings rather than replacing the previous ones.
            </p>
            <p>For example:</p>
            <pre>
... -q path1 -q path2 -forgetall q -q path3 filename
</pre>
            <p>
              For this argument list, the <i>path1</i> and <i>path2</i> options will be discarded and only <i>path3</i> will be quieted.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-help" shortcut="-h" cumulative="no" argtype="flag" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-help[{+|-}]]]></argument_syntax>
    <default_setting>-help-</default_setting>
    <description><![CDATA[
        <a id="Help">When enabled, a basic help description for the component and its available configuration options is displayed.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-hidemacrowarnings" shortcut="-hmw" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-hidemacrowarnings[{+|-}]]]></argument_syntax>
    <default_setting>-hidemacrowarnings-</default_setting>
    <description><![CDATA[
        <a id="HideMacroWarnings">When enabled, warnings generated for code expanded from macros will be hidden.
        </a>

            <p>Messages suppressed as a result of this option will appear as suppressed in display tools.</p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-i " shortcut="-i " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-i <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Includes">Specifies a search path for header files.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-intrinsictype " shortcut="-it " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-intrinsictype {size_t | ptrdiff_t | wchar_t | enum | ... }=datatype]]></argument_syntax>
    <default_setting>-intrinsictype 
    size_t="unsigned int" <br/>
     <b>QAC++</b> : <br/>
    ptrdiff_t="int" <br/>
    enum="int, unsigned int, long, unsigned long, long long, unsigned long long"<br/>
     <b>QAC</b>: <br/>
    ptrdiff_t="long" <br/>
    wchar_t="unsigned char" <br/>
    enum="int"<br/>
    </default_setting>
    <description><![CDATA[
        <a id="IntrinsicType">Determines the underlying type and semantics of types during parsing and analysis.</a>

            <p>
              Determines the type associated with the sizeof operator (size_t), the result of pointer subtraction (ptrdiff_t), the behaviour of wchar_t, and the underlying type to use for enumerations.
              For more information on the use of the intrinsictype option, see the component manual.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-introducefriendnames" shortcut="-ifn" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-introducefriendnames[{+|-}]]]></argument_syntax>
    <default_setting>-introducefriendnames-</default_setting>
    <description><![CDATA[
        <a id="IntroduceFriendNames">When enabled, friend names are introduced into the nearest enclosing namespace.
        </a>

            <p>
              According to the ISO Standard, a name introduced by a
              friend declaration will only be found through argument
              dependent (Koenig) lookup.  When -introducefriendnames
              is enabled, friend names will be visible to all name
              lookups.
            </p>
            <p>For example:</p>
            <pre><code>
class A
{
public:
  friend void foo ();
};

void bar ()
{
  // Succeeds with -introducefriendnames+
  foo ();
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-iso646keywords" shortcut="-iso646kw" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-iso646keywords[{+|-}]]]></argument_syntax>
    <default_setting>-iso646keywords+</default_setting>
    <description><![CDATA[
        <a id="Iso646Keywords">When disabled, the C++ alternative tokens are not treated as keywords in C++.
        </a>

            <p>
              In C++, the alternative tokens are also keywords and
              <i>shall not be used otherwise</i>.  In C, these tokens
              are identifiers that, through including files, can be
              given appropriate replacement values.
            </p>
            <p>
              The alternative tokens are:
            </p>
            <ul>
              <li>and &amp;&amp;</li>
              <li>and_eq &amp;=</li>
              <li>bitand &amp;</li>
              <li>or ||</li>
              <li>or_eq |=</li>
              <li>bitor |</li>
              <li>xor ^</li>
              <li>xor_eq ^=</li>
              <li>compl ~</li>
              <li>not_eq !=</li>
              <li>not !</li>
            </ul>
            <p>
              In addition to the above, C++ also requires special handling of <code>true</code> and <code>false</code> when evaluating the result of <code>#if</code> directives.
            </p>
            <pre><code>
const int J = 6 bitand 5;  // J gets the result 4 (6 &amp; 5)
const int K = 1 bitor 8;   // K gets the result 9 (1 | 8)
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-layoutfile " shortcut="-lf " cumulative="no" argtype="path" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-layoutfile <i>file</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="LayoutFile">Specifies the location of the file to be used to configure the code layout engine.
        </a>

            <p>
              It is good practice, and often part of programming
              standards or guidelines to keep indentation consistent,
              to make it easier to read the code and follow the
              logic. The analyzer allows you to enforce the layout of
              your code by checking for consistent brace style,
              indentation, and spacing of your code. Warnings are
              generated if the layout is not consistent.
            </p>
            <p>
              This option allows you to specify the layout
              configuration file that best matches your layout
              style. Three layout configuration files are shipped by
              default, exdented.layout, indented.layout, and
              knr.layout, which enforce the following bracing styles:
            </p>
            <pre><code>
// Indented
if ( )
  {
  ...
  }
// Exdented
if ( )
{
  ...
}
// K&amp;R (Kernighan &amp; Ritchie)
if ( ) {
  ...
}
</code></pre>
            <p>
              There are also three other files,
              exdented-spacing.layout, indented-spacing.layout, and
              knr-spacing.layout, which, in addition to above bracing
              rules, also contain spacing rules that are considered to
              be "tolerant". Thus, any reasonable amount of spacing
              within your source code is allowed.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-layoutignoreheaders" shortcut="-lih" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-layoutignoreheaders[{+|-}]]]></argument_syntax>
    <default_setting>-layoutignoreheaders-</default_setting>
    <description><![CDATA[
        <a id="LayoutIgnoreHeaders">When enabled, code layout within header files will not be checked when performing layout analysis.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-layoutindentwidth " shortcut="-liw " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-layoutindentwidth <i>value</i>]]></argument_syntax>
    <default_setting>-layoutindentwidth 0</default_setting>
    <description><![CDATA[
        <a id="LayoutIndentWidth">This sets the number of spaces to be used when indenting code.
        </a>

            <p>
              When performing layout analysis, QAC++ will issue a warning
              message if the code indentation differs from this
              value. If this option is not set, or if it set to 0,
              message 1982 will be generated.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-layoutusehangingindent" shortcut="-luhi" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-layoutusehangingindent[{+|-}]]]></argument_syntax>
    <default_setting>-layoutusehangingindent-</default_setting>
    <description><![CDATA[
        <a id="LayoutUseHangingIndent">When enabled, statements that follow labels are required to be indented during layout checking.
        </a>

            <p>
              A common layout style for labels is to indent all statements after a label using the label as the indent base.
            </p>
            <p>
              When -layoutusehangingindent is enabled, the analyzer
              will warn if any statements that follow a label are not
              indented from the label. Otherwise, the analyzer will
              only enforce indentation on the statement immediately
              following the label, relative to the switch statement.
            </p>
            <pre><code>
switch (value)
{
case 1: // the switch label
  statement; // OK with -layoutusehangingindent+
  break;
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-list " shortcut="-list " cumulative="yes" argtype="path" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-list <i>filename</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="List">Used to specify a file list containing the source files and their output paths that are to be included in the analysis.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-maxerrors " shortcut="-maxerr " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-maxerrors <i>value</i>]]></argument_syntax>
    <default_setting>-maxerrors 0</default_setting>
    <description><![CDATA[
        <a id="MaxErrors">Determines the number of hard errors that will cause the analysis to stop.
        </a>

            <p>
              The default of zero indicates that the parser will
              attempt to continue to completion regardless of hard
              errors encountered.
            </p>
            <p>
              The parser will issue return code 1 when any hard errors
              are encountered. This setting merely decides whether
              parsing will continue to source completion.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-maxmacrohistory " shortcut="-maxmh " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-maxmacrohistory <i>value</i>]]></argument_syntax>
    <default_setting>-maxmacrohistory 8192</default_setting>
    <description><![CDATA[
        <a id="MaxMacroHistory">Limit on the number of entries to store in the macro expansion history of a source location.
        </a>

            <p>
              By default, history information is stored for tokens expanded from macros in order to
              provide better location reporting and to perform some analyses of library objects defined
              as macros. However, this can use up a lot of storage if macros are heavily used to create
              nested expansions.
            </p>
            <p>
              Only the specified number of history entries will be stored. If macro expansion is more
              deeply nested, preprocessing itself will not be affected, but the "expanded from here"
              history will not be available for error reporting. Some analyses that check whether an
              expression originates from a macro may fail to work if the expression is produced at an
              unrecorded level of nesting.
            </p>
            <p>
              If zero is the value specified, no macro history will be recorded at all. This may be
              useful for some machine-generated files. The value is always zero for expansions originating
              in quieted headers.
            </p>
            <p>
              This limit can also be adjusted within a file by means of the
              <code>PRQA_MAX_MACRO_HISTORY</code> pragma.
              This may be useful when a certain section within a TU uses deep nesting.
            </p>
            <pre><code>
#define D NULL
#define C D
#define B C
#define A B

void * p1 = A;    // if -maxmacrohistory is less than 5, this will be seen as '= 0'
void * p2 = NULL; // if -maxmacrohistory is zero, this will be seen as '= 0'

// set the macro history length limit to 3, regardless of previous options
#pragma PRQA_MAX_MACRO_HISTORY 3
// change the macro history length limit to 8
#pragma PRQA_MAX_MACRO_HISTORY 8
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-maxrecursivetemplatenestingdepth " shortcut="-mrtnd " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-maxrecursivetemplatenestingdepth <i>value</i>]]></argument_syntax>
    <default_setting>-maxrecursivetemplatenestingdepth 200</default_setting>
    <description><![CDATA[
        <a id="MaxRecursiveTemplateNestingDepth">Specifies the maximum depth that is allowed for recursive instantiations of templates.
        </a>

            <p>For example:</p>
            <pre><code>
template &lt;unsigned int I&gt;
struct B
{
  static const unsigned int value = B&lt;I+1&gt;::value;
};

template &lt;&gt;
struct B&lt;201&gt;
{
  static const unsigned int value = 0;
};

void foo ()
{
  B&lt;0&gt; b;
}
</code></pre>
            <p>
              If reached, an explicit specialization of B with 201
              would stop the recursive template instantiation.
              However, this could use a large amount of resources and
              time.
            </p>
            <p>
              The -maxrecursivetemplatenestingdepth option can be used
              to increase or decrease the depth that a recursive
              instantiation will reach before being stopped.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-namerulefile " shortcut="-nrf " cumulative="no" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-namerulefile <i>filename</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="NameRuleFile">Specifies the file containing the naming convention rules to be applied by namecheck.
        </a>

            <p>
              The name rules file contains the rules to be used by the
              Name Checker. As a minimum, each rule should specify the
              pattern (Regular Expression) that is to be applied to
              each type of identifier (macros, functions, typedefs,
              variables, etc).  You can have different rules for
              different types of identifier.
            </p>
            <p>
              See the Configuration File section of the Namecheck user manual.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-nestedcomments" shortcut="-nc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-nestedcomments[{+|-}]]]></argument_syntax>
    <default_setting>-nestedcomments-</default_setting>
    <description><![CDATA[
        <a id="NestedComments">When enabled, nesting of C-style comments are tracked.
        </a>

            <p>
              C-style comments do not nest, the first comment end
              sequence to appears in a source file is therefore the
              end of the comment, irrespective of how many open
              sequences appeared.
            </p>
            <p>For Example:</p>
            <pre><code>
/*    Start of C Comment

/* Start of "nested" Comment

End of nested Comment  */

Error this text is not commented */
</code></pre>
            <p>
              When -nestedcomments+ is enabled, the number of C-style
              open sequences will be tracked and then matched with the
              closing sequence count, resulting in the above being
              considered as all comments.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-newarraycookiesize " shortcut="-nacs " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-newarraycookiesize <i>bytes</i>]]></argument_syntax>
    <default_setting>-newarraycookiesize -1</default_setting>
    <description><![CDATA[
        <a id="NewArrayCookieSize">Set the size of the new array cookie. The default value of -1 will result in cookie size being set to 'size_t'</a>

            <p>
            The size in bytes of the overhead required by array new expressions can be set with this option.
            Different compilers may need different sizes and should be found in the compiler implementation documentation.
            The overhead size (commonly referred to as cookie size) defaults to size_t.
            </p>
            <p class="Note">
              This option is applicable to Dataflow analysis of C++ only.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-nodigraphmodglobalnamespace" shortcut="-ndmgns" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-nodigraphmodglobalnamespace[{+|-}]]]></argument_syntax>
    <default_setting>-nodigraphmodglobalnamespace-</default_setting>
    <description><![CDATA[
        <a id="NoDigraphModGlobalNamespace">When enabled, the sequence <code>%::</code> will be usable in an expression.
        </a>

            <p>
              The 2011 ISO Standard changed the way digraph tokens are
              read, adding an exception for the <code>&lt;:</code>
              when it is followed by another <code>:</code> that is
              not itself part of a longer following token.
            </p>
            <p>
              For consistency with the handling of <code>&lt;</code>,
              this option allows the same exception to be applied to
              <code>%</code>. This is a non-standard extension; the
              ISO Standard only specifies the exception for
              <code>&lt;</code>.
            </p>
            <p>For Example:</p>
            <pre><code>
int x;
bool mod_x (int y)
{
  return y%::x; // without this option, expression would be read as y#:x
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-nomsg " shortcut="-n " cumulative="yes" argtype="numeric_list" category="noncomponent" required="no" inheritable="no">
    <argument_syntax><![CDATA[-nomsg <i>message_number_list</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="NoMsg">Suppresses the display <i>and</i> generation of the specified messages.
        </a>

            <p>
              Message numbers can be specified individually, or as a
              list, range or a combination of both:
            </p>
            <ul>
              <li>-nomsg 2356</li>
              <li>-nomsg 1234,1236,1240</li>
              <li>-nomsg 2111,2200-2300</li>
            </ul>
            <p class="Note">
              <br />This option is only available at the file or directory level.  The enabling or disabling of diagnostics at the  component level is managed through the Rule Configuration File (RCF).
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-noseparateargexpandedcomma" shortcut="-nsaec" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-noseparateargexpandedcomma[{+|-}]]]></argument_syntax>
    <default_setting>-noseparateargexpandedcomma-</default_setting>
    <description><![CDATA[
        <a id="NoSeparateArgExpandedComma">When enabled, an expanded comma is not treated as an argument separator in a macro expansion.
        </a>

            <p>For example:</p>
            <pre><code>
#define COMMA ,

#define FUNC0(A, X, B) A X B
#define FUNC1(A, X, B) FUNC0(A, X, B)
#define FUNC2(A, B) FUNC1(A, COMMA, B)

void foo()
{
  // Succeeds with -noseparateargexpandedcomma+
  FUNC2(1 , 2);
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-only " shortcut="-o " cumulative="yes" argtype="numeric_list" category="noncomponent" required="no" inheritable="no">
    <argument_syntax><![CDATA[-only <i>message_number_list</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Only">Only the specified warning messages will be generated.
        </a>

            <p>
              Message numbers can be specified individually, or as a
              list, range or a combination of both:
            </p>
            <ul>
              <li>-only 2356</li>
              <li>-only 1234,1236,1240</li>
              <li>-only 2111,2200-2300</li>
            </ul>
            <p class="Note">
              <br />This option is only available at the file or directory level.  The enabling or disabling of diagnostics at the  component level is managed through the Rule Configuration File (RCF).
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-outputpath " shortcut="-op " cumulative="no" argtype="path" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-outputpath <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="OutputPath">Determines the path to which all output files will be generated during analysis, and, by extension, the location from which all files will be read as the input for RCMA analysis.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-ppfilename" shortcut="-ppf" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-ppfilename[{+|-}]]]></argument_syntax>
    <default_setting>-ppfilename-</default_setting>
    <description><![CDATA[
        <a id="PpFilename">When enabled, comments are introduced into the preprocessed file which indicate the source file and line number from which the code was derived.
        </a>

            <p>
              This option only applies when generating preprocessed output, enabled using -pplist.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-pplist" shortcut="-ppl" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-pplist[{+|-}]]]></argument_syntax>
    <default_setting>-pplist-</default_setting>
    <description><![CDATA[
        <a id="PpList">When enabled, a preprocessed file is generated in the output directory with a .i file extension.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-ppmetrics" shortcut="-ppm" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-ppmetrics[{+|-}]]]></argument_syntax>
    <default_setting>-ppmetrics-</default_setting>
    <description><![CDATA[
        <a id="PpMetrics">This option is designed to be used with file metrics, and governs the inclusion of header file information in the calculation of metrics.
        </a>

            <ul>
              <li>-ppmetrics+ results in all code/tokens in included header files being used when calculating metrics.</li>
              <li>-ppmetrics- results in code/tokens in included header files being ignored when calculating metrics.</li>
            </ul>
          
        ]]></description>
   </cli_option>
   <cli_option name="-pponly" shortcut="-ppo" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-pponly[{+|-}]]]></argument_syntax>
    <default_setting>-pponly-</default_setting>
    <description><![CDATA[
        <a id="PpOnly">When enabled, analysis will stop after preprocessing.
        </a>

            <p>
              Output files will only contain information generated
              from the preprocessing stage:
            </p>
            <ul>
              <li>file metrics,</li>
              <li>implicit declarations,</li>
              <li>macros, and</li>
              <li>preprocessor messages.</li>
            </ul>
            <p>
              This option can be used for analysis debug purposes,
              specifically to determine that preprocessing completes
              without engaging in C++ parsing and analysis.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-preproc32bittype" shortcut="-pp32bt" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-preproc32bittype[{+|-}]]]></argument_syntax>
    <default_setting>-preproc32bittype-</default_setting>
    <description><![CDATA[
        <a id="PreProc32BitType">When enabled, preprocessor integral evaluation is performed using 32-bit arithmetic rather than the ISO Standard default of 64-bit arithmetic.
        </a>

            <p>For example:</p>
            <pre><code>
// Condition true with -preproc32bittype+
#if ((1&lt;&lt;31)&lt;0)
#error "Preprocessor calculation in 32 bits"
#endif
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-preproccppkeywords" shortcut="-ppcppkw" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-preproccppkeywords[{+|-}]]]></argument_syntax>
    <default_setting>-preproccppkeywords+</default_setting>
    <description><![CDATA[
        <a id="PreProcCppKeywords">When enabled, the C++ alternative tokens are treated as keywords in the preprocessor.
        </a>

            <p>
              In C++, the alternative tokens are also keywords and
              <i>shall not be used otherwise</i>.  In C, these tokens
              are identifiers that, through including files, can be
              given appropriate replacement values.
            </p>
            <p>
              The alternative tokens are:
            </p>
            <ul>
              <li>and &amp;&amp;</li>
              <li>and_eq &amp;=</li>
              <li>bitand &amp;</li>
              <li>or ||</li>
              <li>or_eq |=</li>
              <li>bitor |</li>
              <li>xor ^</li>
              <li>xor_eq ^=</li>
              <li>compl ~</li>
              <li>not_eq !=</li>
              <li>not !</li>
            </ul>
            <p>
              In addition to the above, C++ also requires special handling of <code>true</code> and <code>false</code> when evaluating the result of <code>#if</code> directives.
            </p>
            <pre><code>
#if defined (and)  // Identifier expected
#endif
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-prodoption " shortcut="-po " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-prodoption <i>argument</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ProdOption">Enables fine-grained configuration of analysis.</a>

            <p>
              <code>prodoption</code> is used to provide additional fine-grained configuration to the analysis performed by a component.
            </p>
          
<h2>Dataflow Analysis</h2><p>
  <b><a id="df__function_timeout">-prodoption df::function_timeout=<i>value</i></a></b>
</p>
<p><b>Purpose:</b> Set an aggregate function timeout in milliseconds to limit the overall time spent in dataflow analysis for each function.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              This may curtail related results, and is designed to
              avoid lengthy analysis attempts on severely complex
              functions.
            </p>
            <p>
              This option only applies when dataflow is enabled (-enabledataflow+).
            </p>
          <p>
  <b><a id="df__analyse_header_functions">-prodoption df::analyse_header_functions=[{inter|intra}]</a></b>
</p>
<p><b>Purpose:</b> This option controls how functions defined in header files are analyzed.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption df::analyse_header_functions=inter</p>

            <p>
              When enabled, analysis of functions defined in header
              files will take place.  This can result in duplicate
              analysis of functions in each translation unit including
              the header file.
            </p>
          <p>
  <b><a id="df__struct_last_array_member_size_1">-prodoption df::struct_last_array_member_size_1[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Enables checking of single element arrays declared last in a structure.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption df::struct_last_array_member_size_1-</p>

            <p>
              When enabled, analysis will use the real size of single
              element array members declared at the end of a structure
              definition.
            </p>
          <p>
  <b><a id="df__variant_unions">-prodoption df::variant_unions[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Specifies that unions are used as variant types.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption df::variant_unions-</p>

            <p>
              Unions with a large size can be very costly for the SMT solver.
              A union that is not used to reinterpret the bits, but as a variant type,
              can be handled as a struct without loss of any analysis precision
              thus improving performance.
            </p>
            <p>
              Type punning through unions is undefined behaviour when this option is enabled.
            </p>
          <p>
  <b><a id="df__execution_boundary">-prodoption df::execution_boundary=<i>filename|path</i></a></b>
</p>
<p><b>Purpose:</b> Specifies a file or path to be an execution boundary.</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              When set, any include files which match the file or path specified used in the translation unit,
              will be considered to have a different ABI and its functions will denote an execution boundary.
              This option impacts QAC++ messages 3809-3811 and the C++ specific Dataflow messages 4741-4743; it has no effect 
              on C code. 
            </p>
            <p class="Note">
              <br />This option, which is solely for C++ analysis, applies only to included files and has no effect on the main source file.
            </p>
          
<h2>Preprocessor Behavior</h2><p>
  <b><a id="ignore_modification__forceinclude">-prodoption ignore_modification::forceinclude[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> When enabled, macros defined in a force included header file will implicitly be defined as _ignore_modification.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption ignore_modification::forceinclude+</p>

            <p>
              A common technique for handling non-standard extensions
              is to define the expansion of identifiers to nothing so
              they do not appear in the preprocessed source code.  A
              force include header can be used to achieve this:
            </p>
            <pre><code>
/* forceinclude.h */
#define __extension__

/* main.cc */
int i = __extension__ 0;
</code></pre>
            <p>
              Running with <code>-fi forceinclude.h</code> allows the
              code to be parsed successfully.  A slight complication
              occurs when the -rememberfirstdefinedirective option is
              disabled.  This can result in user code changing what
              the macro expands to and making invalid the workaround
              in the force include header:
            </p>
            <pre><code>
/* main.cc */
#define __extension__ __OTHER_EXTENSION__
int i = __extension__ 0;
</code></pre>
            <p>
              In order to ensure that the required workaround will
              always be used, irrespective of the
              -rememberfirstdefinedirective setting, then the
              _ignore_modification feature of -d can be used to fix
              the value that the macro expands to:
            </p>
            <pre><code>
/* forceinclude.h */
#define __extension__
#define __extension__ _ignore_modification  /* expansion fixed */
#define __extension__ 0                     /* no effect */
</code></pre>
            <p>
              When -po ignore_modification::forceinclude is enabled, all macros in the force include file will implicitly be treated as also being defined with _ignore_modification.
            </p>
          <p>
  <b><a id="ignore_modification__systemdefine">-prodoption ignore_modification::systemdefine[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> When enabled, macros defined using -systemdefine (-sd) will implicitly be defined as _ignore_modification.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption ignore_modification::systemdefine+</p>

            <p>
              A common technique for handling non-standard extensions
              is to define the expansion of identifiers to nothing so
              they do not appear in the preprocessed source code:
            </p>
            <pre><code>
/* main.cc */
int i = __extension__ 0;
</code></pre>
            <p>
              Running with <code>-systemdefine "__extension__="</code>
              allows the code to be parsed successfully.  A slight
              complication occurs when -rememberfirstdefinedirective
              option is disabled.  This can result in user code
              changing what the macro expands to and making invalid
              the workaround in the force include header:
            </p>
            <pre><code>
/* main.cc */
#define __extension__ __OTHER_EXTENSION__
int i = __extension__ 0;
</code></pre>
            <p>
              In order to ensure that the required workaround will
              always be used, irrespective of the
              -rememberfirstdefinedirective setting, then the
              _ignore_modification feature of -d and -sd can be used
              to fix the value to which the macro expands:
              <code>-systemdefine "__extension__=" -systemdefine
              "__extension__=_ignore_modification"</code> .
            </p>
            <p>
              When -po ignore_modification::systemdefine is enabled,
              all macros specified using -systemdefine (-sd) will
              implicitly be treated as also being defined with
              _ignore_modification.
            </p>
          <p>
  <b><a id="comment__dynamic_statistics">-prodoption comment::dynamic_statistics[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> This option allows you to control the update behavior of the analysis of commented out code. When the option is enabled (which it is by default), source token statistics continue to be gathered from the TU (Translation Unit) under analysis, to improve commented out code detection.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption comment::dynamic_statistics+</p>

            <p>
              In order to generate the analysis of commented out code, an
              algorithm is used to compare comments against a table of
              "common code sequences" gathered from real-world,
              standard-compliant projects. As long as the
              "comment::dynamic_statistics" option is enabled, triplets
              are gathered from uncommented sections of the TU being
              analyzed, so that unusual constructions or non-standard
              language extensions that appear elsewhere in the TU can be
              matched.
            </p>
            <p>For example:</p>
            <pre><code>
int f (int x, int y) {
  return ({ int w = x + y; w; });  // Statement expressions are a non-standard extension
}

// This will be recognized as commented out code if, and only if, we
// gather statistics from the current TU
/* return ({ int j = a; j; }); */
// Message only if -po comment::dynamic_statistics+
</code></pre>
            <p>
              The option is enabled by default, so that comments can be
              matched more accurately against the actual code in use, but
              this does mean that changes in one part of a TU may have
              unexpected effects on message generation in an apparently
              unrelated part of the TU. Disabling the option will ensure
              that commented out code detection is determined entirely
              locally, so that the same table of "common code sequences"
              is used throughout.
            </p>
          
<h2>QAX</h2><p>
  <b><a id="qax__limit">-prodoption qax::limit=<i>size(KB)</i></a></b>
</p>
<p><b>Purpose:</b> Sets the maximum packet size in KB sent to the QAX daemon.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption qax::limit=30</p>

            <p>
              The following information is sent by the analysis tools to the QAX daemon:
            </p>
            <ul>
              <li>Filenames</li>
              <li>Locations</li>
              <li>Preprocessor Events</li>
              <li>Diagnostics</li>
              <li>Annotations</li>
              <li>Function Flow Graphs.</li>
            </ul>
            <p>
              This option controls the amount of data stored before
              being transmitted to the server.
            </p>
            <p>
              In general this option does not need to be changed,
              however, if investigating a failure with the tool, it
              can be useful to set the option to 0 in order that all
              data is sent immediately to the daemon.
            </p>
          
<h2>General</h2><p>
  <b><a id="assert__no_override">-prodoption assert::no_override[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Don't override the definition of the 'assert' macro</p>
<p>
</p>
  <p><b>Default:</b>-prodoption assert::no_override-</p>

            <p>
              To perform analysis for message 3912 the parser replaces
              the 'assert' macro with its own definition (even if
              'NDEBUG' has been defined). This can affect dataflow
              analysis as it will always take 'assert' expressions
              into account, for example:
            </p>
            <pre><code>
#define NDEBUG 1
#include &lt;cassert&gt;

char array[10];

char foo(unsigned int i)
{
  assert(i &lt; 10);
  return array[i]; // message 2844 only generated
                   // with -po assert::no_override
}
</code></pre>
          <p>
  <b><a id="pass_by_value__max_size">-prodoption pass_by_value::max_size=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the maximum permissible size (in bytes) for a pass-by-value function parameter with a user-declared type. This analysis is only performed for function definitions.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              Message 2010 is generated for user-declared parameter
              types if the 'pass_by_value' option is not specified, or
              if the size of the parameter type is less than max_size.
            </p>
            <p>
              Message 2009 is generated if max_size is exceeded and
              the function parameter type can be changed to pass the
              parameter as a 'const &amp;'.
            </p>
            <p>
              Message 2008 is generated if max_size is exceeded and
              the function parameter type cannot be changed as the
              parameter is modified in the function body.
            </p>
          <p>
  <b><a id="basic_character_set_string_literal__ignore">-prodoption basic_character_set_string_literal::ignore=<i>characters</i></a></b>
</p>
<p><b>Purpose:</b> 
          Specifies a list of common characters that should be treated as members of the basic character set in string literal.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If a character is specified to the
              <code>-po basic_character_set_string_literal::ignore</code> option,
              then it will be considered as a member of the basic character
              set when used in a string literal and so will not generate
              messages to use outside of this character set.
            </p>
            <p>
              See also:
            </p>
            <ul>
              <li><code>-po basicchar::set</code></li>
              <li><code>-po basic_character_set::ignore</code></li>
              <li><code>-po basic_character_set_comment::ignore</code></li>
            </ul>
            <p class="Note">
              <br />Values used by configuration options may also be specified through environment variables:
            </p>
            <pre>
-d var=$env
</pre>
            <p>
              As a result, to specify a '$' character in the basic
              character set it needs to be switched with '\':
            </p>
            <pre>
-prodoption basicchar::set='\$'
</pre>
          <p>
  <b><a id="basic_character_set_comment__ignore">-prodoption basic_character_set_comment::ignore=<i>characters</i></a></b>
</p>
<p><b>Purpose:</b> 
          Specifies a list of common characters that should be treated as members of the basic character set in comment.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If a character is specified to the
              <code>-po basic_character_set_comment::ignore</code> option,
              then it will be considered as a member of the basic character
              set when used in a comment and so will not generate messages
              relating to use outside of this character set.
            </p>
            <p>
              See also:
            </p>
            <ul>
              <li><code>-po basicchar::set</code></li>
              <li><code>-po basic_character_set::ignore</code></li>
              <li><code>-po basic_character_set_string_literal::ignore</code></li>
            </ul>
            <p class="Note">
              <br />Values used by configuration options may also be specified through environment variables:
            </p>
            <pre>
-d var=$env
</pre>
            <p>
              As a result, to specify a '$' character in the basic
              character set it needs to be switched with '\':
            </p>
            <pre>
-prodoption basicchar::set='\$'
</pre>
          <p>
  <b><a id="basic_character_set__ignore">-prodoption basic_character_set::ignore=<i>characters</i></a></b>
</p>
<p><b>Purpose:</b> Specifies a list of common characters that should be treated as members of the basic character set.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If a character is specified to the
              <code>-po basic_character_set::ignore</code> option, then it will
              be considered as a member of the basic character set and
              so will not generate messages relating to use outside of
              this character set.
            </p>
            <p>
              See also:
            </p>
            <ul>
              <li><code>-po basicchar::set</code></li>
              <li><code>-po basic_character_set::ignore</code></li>
              <li><code>-po basic_character_set_string_literal::ignore</code></li>
              <li><code>-po basic_character_set_comment::ignore</code></li>
            </ul>
            <p class="Note">
              <br />Values used by configuration options may also be specified through environment variables:
            </p>
            <pre>
-d var=$env
</pre>
            <p>
              As a result, to specify a '$' character in the basic
              character set it needs to be switched with '\':
            </p>
            <pre>
-prodoption basicchar::set='\$'
</pre>
          <p>
  <b><a id="basicchar__set">-prodoption basicchar::set=<i>characters</i></a></b>
</p>
<p><b>Purpose:</b> Specifies a list of characters that are not in the basic character set but are common and are known to be supported in the target environment.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption basicchar::set=`\\$@</p>

            <p>
              Characters not in the basic character set and not
              specified to this option will generate one of the
              following messages:
            </p>
            <p>
              If not in the basic character set and not specified to <code>-po basicchar::set</code>:
            </p>
            <pre>
1095 The character 'char' is not in the basic character set.
</pre>
            <p>
              If not in the basic character set and specified to the <code>-po basicchar::set</code>:
            </p>
            <pre>
1096 The character 'char' is common, but not in the basic character set.
</pre>
            <p class="Note">
              <br />Values used by configuration options may also be specified through environment variables:
            </p>
            <pre>
-d var=$env
</pre>
            <p>
              As a result, to specify a '$' character in the basic character set it needs to be switched with '\':
            </p>
            <pre>
-prodoption basicchar::set='\$'
</pre>
          <p>
  <b><a id="class_usage__max_header_depth">-prodoption class_usage::max_header_depth=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Controls how deep in the include tree to search for type definitions to analyze.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption class_usage::max_header_depth=2</p>

            <p>Further explanation can be found in the help for message 1062.</p>
          <p>
  <b><a id="conv__allow_bitfield_bool_conv">-prodoption conv::allow_bitfield_bool_conv[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Controls bitfield conversion to bool.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption conv::allow_bitfield_bool_conv-</p>

            <p>When enabled, contextual conversion to bool is allowed for expressions whose type is an integral bitfield of size 1.</p>
          <p>
  <b><a id="conv__allow_cntx_bool_conv">-prodoption conv::allow_cntx_bool_conv[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Controls contextual conversion to bool.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption conv::allow_cntx_bool_conv-</p>

            <p>When enabled, contextual conversion to bool is allowed for expressions whose type is:</p>
            <ul>
              <li>a pointer type</li>
              <li>a class type having an <i>explicit operator bool()</i></li>
            </ul>
          <p>
  <b><a id="line__max_length">-prodoption line::max_length=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the maximum permissible width of a line in characters.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If the length of a line exceeds <i>limit</i>, then
              message 1094 will be generated:
            </p>
            <pre>
1094 This source line is longer than 'limit' characters.
</pre>
          <p>
  <b><a id="namespace__max_depth">-prodoption namespace::max_depth=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the maximum depth of namespace (excluding unnamed namespaces).
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If the nesting depth of namespaces exceeds <i>limit</i>,
              then message 2517 will be generated.
            </p>
            <pre>
2517 This namespace is nested more than 'limit' levels deep.
</pre>
          <p>
  <b><a id="switch__min_cases">-prodoption switch::min_cases=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the minimum number of cases that should exist before a switch statement with a single case block is considered better than an if-statement.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If the number of case labels in a switch is non zero,
              and is less than or equal to <i>limit</i>, then message
              4018 will be generated:
            </p>
            <pre>
4018 An if statement would provide a more natural representation instead
     of this switch.
</pre>
          <p>
  <b><a id="format__printf">-prodoption format::printf=<i>characters</i></a></b>
</p>
<p><b>Purpose:</b> Specifiers to be supported by 'printf' checking.</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              This option lists the specifiers that are considered
              valid in the format string passed to
              <code>printf</code>.
            </p>
            <p>For Example:</p>
            <pre><code>
#include &lt;stdio.h&gt;

void foo (int i)
{
  /*
   * By default a message will be generated on the use of '%z' as a specifier,
   * to indicate that it is not recognized. This behavior can be changed by
   * adding 'z' to the list of valid specifiers.
   */
  printf("%z", 10);
}
</code></pre>
          <p>
  <b><a id="format__scanf">-prodoption format::scanf=<i>characters</i></a></b>
</p>
<p><b>Purpose:</b> Specifiers to be supported by 'scanf' checking.</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              This option lists the specifiers that are considered
              valid in the format string passed to <code>scanf</code>.
            </p>
            <p>For Example:</p>
            <pre><code>
#include &lt;stdio.h&gt;

void foo (int i)
{
  /*
   * By default a message will be generated on the use of '%z' as a specifier,
   * to indicate that it is not recognized. This behavior can be changed by
   * adding 'z' to the list of valid specifiers.
   */
  scanf("%z", &amp;i);
}
</code></pre>
          <p>
  <b><a id="conv__type_rank_size">-prodoption conv::type_rank_size[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Specifies that the rank of types should be used rather than the configured sizes of types when checking if data loss could occur.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption conv::type_rank_size-</p>

            <p>
              If it is known that the code must be ported to another platform where 
              the types may not be the same size, then this option can be specified to compare the
              rank of the types rather than the real type sizes.
            </p>
          
<h2>Inline Cost Analysis</h2><p>
  <b><a id="inline_cost__bin_expr">-prodoption inline_cost::bin_expr=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a binary expression (non overloaded).
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::bin_expr=1</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__builtin_init">-prodoption inline_cost::builtin_init=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a built-in initializer.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::builtin_init=0</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__cast_expr">-prodoption inline_cost::cast_expr=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a cast expression that doesn't call a constructor.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::cast_expr=1</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__cond_expr">-prodoption inline_cost::cond_expr=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a ternary expression.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::cond_expr=1</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__conv_expr">-prodoption inline_cost::conv_expr=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a conversion expression that doesn't call a constructor.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::conv_expr=1</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__do_stmt">-prodoption inline_cost::do_stmt=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a do statement.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::do_stmt=2</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__dyn_cast_expr">-prodoption inline_cost::dyn_cast_expr=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a dynamic cast expression that doesn't call a constructor.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::dyn_cast_expr=4</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__for_stmt">-prodoption inline_cost::for_stmt=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a for statement.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::for_stmt=2</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__goto_stmt">-prodoption inline_cost::goto_stmt=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a goto statement.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::goto_stmt=1</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__if_stmt">-prodoption inline_cost::if_stmt=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of an if statement.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::if_stmt=1</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__max">-prodoption inline_cost::max=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the maximum value of an algorithm measuring the cost of a function that may be inlined.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>For example:</p>
            <pre><code>
inline int foo (int k)  // Inline cost of 4
{
  int j = k;   // 1
  if (k &gt; 0)   // 1
  {
    ++j;       // 1
  }
  else
  {
    --j;       // 1
  }
  return j;
}
</code></pre>
            <p>
              Further explanation and details on the generation of the
              algorithm can be found in the help for message 4125.
            </p>
            <p class="Note">
              <br />This option must be set for analysis of the cost of inline functions to take place.
            </p>
          <p>
  <b><a id="inline_cost__non_virtual_call">-prodoption inline_cost::non_virtual_call=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of making a non virtual call.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::non_virtual_call=2</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__throw_expr">-prodoption inline_cost::throw_expr=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a throw expression.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::throw_expr=2</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__try_stmt">-prodoption inline_cost::try_stmt=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a try statement.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::try_stmt=4</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__uny_expr">-prodoption inline_cost::uny_expr=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a unary expression (excluding '()' and '+').
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::uny_expr=1</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__virtual_call">-prodoption inline_cost::virtual_call=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of making a virtual call.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::virtual_call=4</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          <p>
  <b><a id="inline_cost__while_stmt">-prodoption inline_cost::while_stmt=<i>cost</i></a></b>
</p>
<p><b>Purpose:</b> The pseudo cost of a while statement.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption inline_cost::while_stmt=2</p>

            <p>This option only applies in conjunction with the -prodoption inline_cost::max option.</p>
          
<h2>Literal Analysis</h2><p>
  <b><a id="digit_separator__binary_group">-prodoption digit_separator::binary_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in binary literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::binary_group=4"</code>
              to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 0b1'0101'1111 ;
const int dl2 = 0b0'10111;                 // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__octal_group">-prodoption digit_separator::octal_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in octal literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::octal_group=4"</code>
              to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 07'4545;
const int dl2 = 074'545;                   // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__decimal_group">-prodoption digit_separator::decimal_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in decimal literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::decimal_group=3"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 1'000'000;
const int dl2 = 1'00'000;                 // warning message
long unsigned int ui5 = 1'123'123ul;
long unsigned int ui6 = 1'123123ul;     // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__hex_group">-prodoption digit_separator::hex_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in hexadecimal literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::hex_group=4"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 0xAB'F16C;
const int dl2 = 0xA'BF16C;                 // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__floating_group">-prodoption digit_separator::floating_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in floating part of float literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              The floating part belongs the digits before the dot character. For instance:
            </p>
            <ul>
              <li>If literal is "1234.32e-10" then the floating part is "1234".</li>
              <li>If literal is "-12.10F" then the floating part is "12".</li>
            </ul>
            <p>
              If floating part has any group of digits which is different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::floating_group=3"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const float dl1 = 1'000'000.5007;
const double dl2 = 100'0.50;                 // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__fractional_group">-prodoption digit_separator::fractional_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in fractional part of float literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              The fractional part belongs the digits between the dot character and the exponent (if it exists). For instance:
            </p>
            <ul>
              <li>If literal is "1234.32e-10" then the fractional part is "32".</li>
              <li>If literal is "-12.10F" then the fractional part is "10".</li>
            </ul>
            <p>
              If fractional part has any group of digits which is different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::fractional_group=3"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const float dl1 = 1000000.500'7;
const double dl2 = 1000.5'007;                 // warning message
const float dl3 = 1.500'7e-12F;
const double dl4 = 1000.5'007e10L;             // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__non_separated_max_size">-prodoption digit_separator::non_separated_max_size=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Maximum size of numeric literals which don't use separators.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption digit_separator::non_separated_max_size=10</p>

            <p>
              Specifies the maximum size for numeric literals that don't use separators. For floating point literals, the max size
              is applied on both the whole and fractional parts individually.
            </p>
            <p>
              For example, using <code>-po digit_separator::non_separated_max_size=5</code>:
            </p>
            <pre><code>

void foo()
{
  100'000'000;  // OK, has separator
  12345;        // OK, not over 5 digits
  1000000;      // warning message

  0xabcd'1234;  // OK, has separator
  0xd1234;      // OK, not over 5 digits
  0x654321;     // warning message

  1.123'456;    // OK, whole part not over 5 digits and fractional has separator
  12'456.12345; // OK, whole part has separator and fractional not over 5 digits
  1.234567;     // warning message
  123456.7;     // warning message
}

            </code></pre>
          
<h2>Metric Behavior</h2><p>
  <b><a id="metrics__no_do_while">-prodoption metrics::no_do_while[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Controls whether do..while loops with an integer constant zero loop condition are counted as control structures.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption metrics::no_do_while+</p>

            <p>
              A do..while loop with a constant zero as the loop controlling expression will only be executed once and is
              generally similar to a simple braced compound expression. It does not introduce algorithmic complexity and
              is normally introduced by macros purely for block scope purposes. Therefore, it is not counted as part of
              control flow metrics by default.
            </p>
          
<h2>Initialization</h2><p>
  <b><a id="init__entry">-prodoption init::entry=<i>functionName</i></a></b>
</p>
<p><b>Purpose:</b> List of entry points into program.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption init::entry=main,wmain,WinMain,wWinMain,DllMain,wDllMain,::main,::wmain,::WinMain,::wWinMain,::DllMain,::wDllMain,_prqa_main,::_prqa_main</p>

            <p>
              Configures RCMA, QAC and QACPP to treat the functions specified in this option as entry points for the program.
              Although Dataflow and MTA do not read this option directly, QAC and QACPP will set the appropriate functions as
              entry points and this affects certain analysis Dataflow and MTA does.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-propagatetemplateparameters" shortcut="-ptp" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-propagatetemplateparameters[{+|-}]]]></argument_syntax>
    <default_setting>-propagatetemplateparameters-</default_setting>
    <description><![CDATA[
        <a id="PropagateTemplateParameters">When enabled, template parameter names from primary template definitions are made available to template specialization definitions.
        </a>

            <p>For example:</p>
            <pre><code>
template &lt;typename T&gt;
class A { };

template &lt;&gt;
class A&lt;int&gt;
{
public:
  // Succeeds with -propagatetemplateparameters+
  T foo (T); // T is 'int'
};
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-quiet " shortcut="-q " cumulative="yes" argtype="path" category="basic" required="no" inheritable="yes">
    <argument_syntax><![CDATA[-quiet <i>filename|path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Quiet">Suppresses the generation of diagnostic and metrics output for the specified file or files in the specified path.
        </a>

            <p>
              This will have the effect of suppressing warning
              messages as well as significantly reducing the size of
              the output produced.
            </p>
            <p class="Note">
              <br />This option applies only to included files and has no effect on the main source file.
            </p>
            <p class="Note">
              <br />This option should not be used for project header files or directories, as it may affect the results of CMA, Project Metrics and Reports.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-quietextended " shortcut="-qx " cumulative="yes" argtype="path" category="basic" required="no" inheritable="yes">
    <argument_syntax><![CDATA[-quietextended <i>filename|path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="QuietExtended">
          Suppresses the generation of diagnostic output for unused contents of the specified file or files in the specified path.
        </a>

            <p>
              This will have the effect of suppressing warning
              messages as well as significantly reducing the size of
              the output produced.
              This suppression is limited to constructs from those files/folders
              that are not used in non suppressed files.
            </p>
            <p>
              When the argument is a non-absolute path, the path is interpreted to be a regular file
              path relative to a -systeminclude path. If the concatenation of a system include path
              and the relative file path corresponds to an existing file, the option takes effect on that file.
            </p>
            <p class="Note">
              <br />This option applies only to included files and has no effect on the main source file.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-remark " shortcut="-rem " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-remark <i>comment</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Remark">The -remark option can be used to add additional comments into configuration files. Alternatively, comments can be included in the configuration files by prefixing the comments with an asterisk.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-rememberfirstdefinedirective" shortcut="-remfdd" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-rememberfirstdefinedirective[{+|-}]]]></argument_syntax>
    <default_setting>-rememberfirstdefinedirective+</default_setting>
    <description><![CDATA[
        <a id="REMemberFirstDefineDirective">When enabled, a redefinition using a #define directive will not change the replacement list of the macro.</a>

            <p>
              The default behavior of the analyzer is to issue a
              message and update the replacement list of a macro for
              each new #define directive:
            </p>
            <pre><code>
#define A 1     /* A's replacement list set to 1 */
#define A 2     /* Message generated to highlight that macro A has been
                /* redefined and A's replacement list changed to 2 */

int i = A;      /* A expands to 2 */
</code></pre>
            <p>
              Previous versions operated slightly differently in that
              a message was issued but the replacement list was not
              changed:
            </p>
            <pre><code>
#define A 1     /* A's replacement list set to 1 */
#define A 2     /* Message generated to highlight that macro A has been
                /* redefined and A's replacement list unchanged as 1 */

int i = A;      /* A expands to 1 */
</code></pre>
            <p>
              The -rememberfirstdefinedirective option can be used to
              revert the behavior to match the previous functionality.
            </p>
            <p class="Note">
              <br />Macros defined on the command line always use the last value.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-randomnumbergeneratorseed " shortcut="-rngs " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-randomnumbergeneratorseed <i>function(argIndex)</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="RandomNumberGeneratorSeed">Specifies how a random number generator (RNG) is initialised with a new seed.</a>

              <p>The argument to this option should be a mangled name referring to a function followed
                immediately by a number in parentheses.</p>
              <p>
                The specified function will be treated as a function that initialises a RNG.
              </p>
              <p>
                The number specified in parentheses immediately
                after the name, is interpreted as the index (starting
                from 1) of the parameter which contains the new seed
                being used to configure the RNG.
              </p>
              <p>It is the value of the seed parameter that is analysed to see if it is
                unchanging or predictable.</p>
              <p>For example:</p>
              <pre><code>
const int SEED=1;
void foo(void)
{
  Random_Init(SEED);  // Generates diagnostics with -rngs="Random_Init(1)"
}
</code></pre>
            <p>In C++, the mangled name can be used to limit the match to a member or single overloaded function.</p>
            <pre><code>
struct SeedCtx
{
  void init(int);
};

int SEED = 1;
void foo(void)
{
  SeedCtx rng;

  rng.init(SEED);   // generates diagnostics with -rngs=".QN7SeedCtxN4initPi(1)"
}

</code></pre>
            
        ]]></description>
   </cli_option>
   <cli_option name="-rvaluerefbind" shortcut="-rvrb" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-rvaluerefbind[{+|-}]]]></argument_syntax>
    <default_setting>-rvaluerefbind+</default_setting>
    <description><![CDATA[
        <a id="RValueRefBind">When enabled, temporary class types are directly bound to const references, rather than calling a copy constructor.
        </a>

            <p>
              In the 2003 ISO C++ Standard it was implementation
              defined if a temporary was first copied, and the copy
              then bound to the reference.
            </p>
            <p>For example:</p>
            <pre><code>
template &lt;typename T&gt; struct A
{
  A ();
  A (A const &amp;)
  {
    typedef typename T::copy_not_needed_for_ref_bind TYPE;
  }
};

void bar(A&lt;int&gt; const &amp;);

void foo ()
{
  // Succeeds with -rvaluerefbind+
  bar ( A&lt;int&gt;() );
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-searchdependentbaseclasses" shortcut="-sdep" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-searchdependentbaseclasses[{+|-}]]]></argument_syntax>
    <default_setting>-searchdependentbaseclasses-</default_setting>
    <description><![CDATA[
        <a id="SearchDependentBaseClasses">When enabled, non standard lookup is performed in dependent base class scope.
        </a>

            <p>
              For some compilers, an identifier looked up in a class
              template may be found in a base class that is a
              dependent type. This lookup is not standard behavior,
              however the analyzer attempts to find names in the
              primary class template where a definition is available.
            </p>
            <p>For example:</p>
            <pre><code>
template &lt;typename T&gt; struct A
{
  typedef int TYPE;
};

template &lt;typename T&gt; struct B : public A&lt;T&gt;
{
  void foo ()
  {
    // Succeeds with -searchdependentbaseclasses+
    TYPE t;
  }
};
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-settings" shortcut="-set" cumulative="no" argtype="flag" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-settings[{+|-}]]]></argument_syntax>
    <default_setting>-settings-</default_setting>
    <description><![CDATA[
        <a id="Settings">Print the settings used by the tool after the complete processing of all command line arguments.
        </a>

            <p>When enabled, the current values for all configuration options are listed to the standard output.</p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-size " shortcut="-s " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-size <i>type</i>=<i>bits</i>]]></argument_syntax>
    <default_setting>-size "char=8" -size "short=16" -size "int=32 <br/>
    -size "long=32" -size "longlong=64" -size "float=32" <br/>
    -size "double=64" -size "ldouble=128" -size "codeptr=32" <br/>
     <b>QAC++</b>: <br/>
    -size "bool=8" -size "wchar_t=16" <br/>
     <b>QAC</b>: <br/>
    -size "_Bool=8"
    </default_setting>
    <description><![CDATA[
        <a id="Size">Defines the type sizes (measured in bits) implemented in your compiler environment.
        </a>

            <p>
              The analyzer uses type size values to calculate the size
              of structures and to perform analysis.
            </p>
            <p>
              The available size and alignment values are constrained
              by the ISO Standard rules on integral size ordering. The
              size is often related to the alignment of a data type.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-skippragma " shortcut="-spragma " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-skippragma <i>pragma_start</i>,<i>pragma_end</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SkipPragma">Defines the behavior of #pragma directives.
        </a>

            <p>
              #pragma statements are preprocessor directives that are specific to a particular compiler.
            </p>
            <p>
              You can declare a #pragma or a #pragma block by
              specifying #pragma names.  The following syntax is
              supported:
            </p>
            <pre><code>
/* Command Line:  -skippragma ID */
#pragma ID   /* This pragma is ignored */

/* Command Line:  -skippragma X1,X2 */
#pragma x1   /* This pragma and all code lines up to and
                including the #pragma x2 are ignored */

#pragma x2

/* Command Line:  -skippragma ABC* */
#pragma ABC1   /* This pragma ignored*/
#pragma ABC2   /* This pragma ignored*/
#pragma ABC3   /* This pragma ignored*/
</code></pre>
            <p xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Component Options.Helix QAC for C">
              By default, when an unrecognized #pragma is encountered, message 3116 will be generated.
              A #pragma declared by <code>-skippragma</code> will not be considered unrecognized.
            </p>
            <p class="Note">
              <br />The analyzer also recognizes the specific
              #pragma directives of its own, for example,
              PRQA_MESSAGES_OFF and PRQA_MESSAGES_ON. These do not
              need to be configured. They are used for suppressing and
              re-enabling warning messages from within the code. Refer
              to Message Suppression in the component manual.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-slashwhite" shortcut="-sl" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="yes">
    <argument_syntax><![CDATA[-slashwhite[{+|-}]]]></argument_syntax>
    <default_setting>-slashwhite-</default_setting>
    <description><![CDATA[
        <a id="SlashWhite">When enabled, parsing ignores whitespace between \ and the end of a line.
        </a>

            <p>
              Some source code uses continuation lines that have
              whitespace between the \ and the end of the line. This
              can happen when source files are transferred between
              different operating systems and results in errors,
              unless this option is enabled.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-stdisglobal" shortcut="-sig" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-stdisglobal[{+|-}]]]></argument_syntax>
    <default_setting>-stdisglobal-</default_setting>
    <description><![CDATA[
        <a id="StdIsGlobal">When enabled, declarations in namespace std are treated as if they were declarations in the global scope, and also declarations in the global scope treated as if they were declarations in namespace std.
        </a>

            <p>
              Some older non standard compilers treated the global
              scope and namespace std as the same.  This option can be
              used to match this non standard behavior.
            </p>
            <p>For example:</p>
            <pre><code>
void foo ();
namespace std
{
  void bar ();
}

void car ()
{
  // Both examples succeed with -stdisglobal+
  std :: foo ();   // OK, although foo() not declared
  // in std
  bar ();          // OK, although bar() not declared
  // in global scope
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-stoponerror" shortcut="-soe" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-stoponerror[{+|-}]]]></argument_syntax>
    <default_setting>-stoponerror+</default_setting>
    <description><![CDATA[
        <a id="StopOnError">Causes the analysis to stop on the first hard error.</a>

            <p>
              When enabled, the parser will stop parsing a translation unit if a
              hard error is encountered.
            </p>
            <p>
              This is enabled by default, as it is usually the case that hard
              errors for a translation unit should be addressed in the order
              they are generated.
            </p>
            <p class="Note">
              This option applies to the processing within a translation unit
              and it is unrelated to Perforce QAC's "Stop Analysis Upon Failure"
              option.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-stripemptyvaargcomma" shortcut="-sevac" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-stripemptyvaargcomma[{+|-}]]]></argument_syntax>
    <default_setting>-stripemptyvaargcomma-</default_setting>
    <description><![CDATA[
        <a id="StripEmptyVaArgComma">When enabled, preceding commas are removed if the __VA_ARGS__ parameter expands to nothing.
        </a>

            <p>For example:</p>
            <pre><code>
void call( const char * );

#define TEST1(format, ...) call( format, __VA_ARGS__ )
void f1 ()
{
  TEST1("test1");
  // Expands to "call( "test1",  )"  with -stripemptyvaargcomma-
  // Expands to "call( "test1"   )"  with -stripemptyvaargcomma+
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-systemdefine " shortcut="-sd " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-systemdefine <i>ident</i>[=[<i>value</i>]]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SystemDefine">Defines system macros.
        </a>

            <p>
              System macros in the analyzer have the same value and
              semantics as -d except that they
              are processed <i>after</i> the -d options.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-sysembed " shortcut="-sysembed " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-sysembed <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SystemEmbedPath">Specifies a search path for system binary resource files.
        </a>

            <p>
              Directories specified with the -sysembed option
              have the same value and semantics as those specified
              using -embed, except that these
              directories will be searched <i>after</i> the
              directories specified with -embed.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-systeminclude " shortcut="-si " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-systeminclude <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SystemInclude">Specifies a search path for your system header files.
        </a>

            <p>
              Directories specified with the -systeminclude option
              have the same value and semantics as those specified
              using -i, except that these
              directories will be searched <i>after</i> the
              directories specified with -i.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-tabstop " shortcut="-t " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-tabstop <i>columns</i>]]></argument_syntax>
    <default_setting>-tabstop 8</default_setting>
    <description><![CDATA[
        <a id="TabStop">Specifies the number of spaces represented by a tab character.
        </a>

            <p>
              Tab spacing is not related to the depth of indentation.
              It does affect the column location used when issuing
              diagnostics against the source file.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-thirdparty" shortcut="-tp" cumulative="no" argtype="flag" category="noncomponent" required="no" inheritable="no">
    <argument_syntax><![CDATA[-thirdparty[{+|-}]]]></argument_syntax>
    <default_setting>-thirdparty-</default_setting>
    <description><![CDATA[
        <a id="ThirdParty">Specifies a file or folder as third party.</a>

            <p>
              This option is used by QA Framework to support 3rd Party source code. See QA Framework manual for more information about this option.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-threshold " shortcut="-thresh " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-threshold <i>metric</i>{&lt;|&lt;=|=|&gt;|&gt;=}<i>value</i>[<i>:[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Threshold">When specified, message msg_no is output whenever the threshold condition (from the set {&lt;|&lt;=|=|&gt;|&gt;=} for specified metric is exceeded.
        </a>

            <p>
              The metric is specified by the name that appears in the metrics
              records of the <code>.arc</code> file. There are no default
              values. If <i>:msg_no</i> is omitted the default analyzer message
              4700 will be used.
            </p>
            <p>
              The optional <code>prefix_</code> can be used to specify the
              Compliance Module that <i>msg_no</i> is associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-undef " shortcut="-undef " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-undef <i>ident</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Undef">Will undefine, if any, a macro <i>ident</i> previously specified on the command line</a>

            <p>
              The -undef option when specified will causes the removal
              of definitions of <i>ident</i> previously seen on the
              command line.
            </p>
            <p>
              For example if the sequence:
            </p>
            <pre>
-d "A=1" -d "B=2" -d "c=3" -undef B
</pre>
            <p>
              Will have the same affects as:
            </p>
            <pre>
-d "A=1" -d "c=3"
</pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-url " shortcut="-url " cumulative="no" argtype="string" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-url <i>url</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="URL">The URL of the server to which analysis data should be sent.
        </a>

            <p>
              If no <code>-url</code> is specified, then output will be sent to the legacy output formats.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-version" shortcut="-v" cumulative="no" argtype="flag" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-version[{+|-}]]]></argument_syntax>
    <default_setting>-version-</default_setting>
    <description><![CDATA[
        <a id="Version">When enabled, the version number is printed to standard out and the tool will exit immediately.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-via " shortcut="-via " cumulative="yes" argtype="path" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-via <i>file</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Via">Used to specify a file containing additional configuration options.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-virtualmemorylimit " shortcut="-vml " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-virtualmemorylimit <i>value</i>]]></argument_syntax>
    <default_setting>-virtualmemorylimit 70</default_setting>
    <description><![CDATA[
        <a id="VirtualMemoryLimit">Determines the limit on the available memory a component can utilise.</a>

            <p>
              Before analysis is performed by a component a limit is set on
              the amount of memory that the component can utilise. By default this limit
              is set to either a percentage of the systems physical memory or
              a default fixed size, whichever is largest.
            </p>
            <p>
              This option determines the limit placed on the memory available to
              the component during analysis as a percentage of the total systems memory.
            </p>
            <p>
              If the argument of this option is 0 then no memory limit is applied to the component.
              And if the value of the argument does not lie between 0 and 100 then the default limit
              will be applied.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warncall " shortcut="-wc " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warncall <i>function</i>[<i>=[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnCall">Displays warning message <i>msg_no</i> if a call to <i>function</i> is encountered.
        </a>

            <p>
              If no message number is specified for C, the following default message
              is displayed:
            </p>
            <pre>
2010 The function 'func_name' must not be called.
</pre>
            <p>
              If no message number is specified for C++, the following default message
              is displayed:
            </p>
            <pre>
3999 Function 'func_name' called.
</pre>
            <p>
              When <i>msg_no</i> is specified, the optional <code>prefix_</code>
              can be used to specify the Compliance Module that <i>msg_no</i> is
              associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warnmacroexpansion " shortcut="-wme " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warnmacroexpansion <i>macro</i>[<i>=[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnMacroExpansion">Displays warning message <i>msg_no</i> if a <i>macro</i> is expanded.
        </a>

            <p>
              If no message number is declared, the following message
              is displayed:
            </p>
            <pre>
1007 The macro 'macro_name' must not be expanded.
</pre>
            <p>
              This option ignores any message number which is not
              between 1 and 9998 inclusive.
            </p>
            <p>
              When <i>msg_no</i> is specified, the optional <code>prefix_</code>
              can be used to specify the Compliance Module that <i>msg_no</i> is
              associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warnkeyword " shortcut="-wk " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warnkeyword <i>keyword</i>[=<i>[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnKeyword">Displays diagnostic message <i>msg_no</i> if usage of <i>keyword</i> is encountered.
        </a>

            <p>
              If no message number is declared, then message 1080 is
              displayed:
            </p>
            <pre>
1080 Using keyword 'keyword_name'.
</pre>
            <p>
              When <i>msg_no</i> is specified, the optional <code>prefix_</code>
              can be used to specify the Compliance Module that <i>msg_no</i> is
              associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warnpragma " shortcut="-wp " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warnpragma <i>pragma</i>[*][=<i>0</i>|<i>[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnPragma">Displays diagnostic message msg_no if a #pragma directive that matches <i>pragma</i> is encountered.
        </a>

            <p>
              The entry -warnpragma <i>pragma</i>=0 causes no
              diagnostic to be generated, and allows you to isolate
              necessary #pragma directives in code.  The option can
              include the use of wildcards.  Options can overwrite
              previous entries.
            </p>
            <p>
              When <i>msg_no</i> is specified, the optional <code>prefix_</code>
              can be used to specify the Compliance Module that <i>msg_no</i> is
              associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warnset " shortcut="-ws " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warnset <i>qualified_member_name</i>[=[prefix_]implicit_msg_no[!filter_value],explicit_const_msg_no[!filter_value],explicit_nonconst_msg_no]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnSet">Displays a warning if <i>qualified_member_name</i> is set. Which warning is displayed depends on context (see below for details).
        </a>

            <b>Note: in C++ the qualified_member_name must be specified using the mangled name format.</b>
            <p>
              If no message number is specified for C, the following default message is displayed:
            </p>
            <pre>
2033 The member 'member_name' must not be set.
</pre>
            <p>
              If no message number is specified for C++, the following default message is displayed:
            </p>
            <pre>
3998 Member variable 'member_name' modified.
</pre>
            <p><b>Warning Messages and Context</b></p>
            <p>Each -warnset may specify up to three warning messages per fully qualified member name. </p>
            <p>The first is the message to be raised if the member is set "implicitly". For example,
              if the non-static data member has a default value, and no other value is provided during
              construction of an object, the implicit_msg_no will be raised.
              <pre><code>
// QAC  : -warnset A::value -warnset A::seed=5001
// QAC++: -warnset .QNAN5value -warnset .QNAN4seed=5001

struct A
{
  int value =  1;            // default message raised
  int seed = 1;              // 5001 raised
};
</code></pre>
            </p>
            <p>The second is the message to be raised if the member is explicitly set to a compile-time constant
              value (i.e. a value which does not change between program runs). For example: passing a literal value
              to a member during construction will result in the explicit_const_msg_no being raised.
              <pre><code>
// QAC  : -warnset A::value -warnset A::seed=5001,5002
// QAC++: -warnset .QNAN5value -warnset .QNAN4seed=5001,5002

typedef struct
{
  int value;
  int seed;
} A;

A a {0,     // default raised
     0};    // 5002 raised
</code></pre>
            </p>
            <p>
              Finally, the third is the message to be raised if the member is explicitly set to a dynamic value
              (i.e. a value that is different every time the program runs). For example: passing the return value
              of a function call to a member during construction will result in the explicit_nonconst_msg_no being raised.
              <pre><code>
// QAC  : -warnset A::value -warnset A::seed=5001,5002,5003
// QAC++: -warnset .QNAN5value -warnset .QNAN4seed=5001,5002,5003

typedef struct
{
  unsigned value;
  unsigned seed;
} A;

unsigned getInitValue();
unsigned getInitSeed();

A a {getInitValue(),    // default raised
     getInitSeed()};    // 5003 raised
</code></pre>
            </p>
            <p>If at least one message number is specified but not <i>all</i> the messages are specified, then
            any that are unspecified will be ignored.</p>
            <p><b>!filtervalue</b></p>
            <p>The first two msg_no values can optionally take a "filter value". In the 2021.3 release this is an
              integer value that represents a single "valid" integer value. If analysis detects that the member is
              being to set to anything other than the "filter value" then the associated msg_no will be raised.</p>
            <p>
              The command line uses "!" to specify "not &lt;filter_value&gt;". The associated msg_no will be raised if
              <i>qualified_member_name</i> is set to a value that is <b>not</b> &lt;filter_value&gt;.
            <pre><code>
// QAC  : -warnset A::value=5001!1,5002!1,5003
// QAC++: -warnset .QNAN5value=5001!1,5002!1,5003

typedef struct
{
  unsigned value = 0;  // 5001 raised
} A;

A a_bad {128};  // 5002 raised
A a_ok  {1};    // 5002 NOT raised
</code></pre>
            </p>
            <p>
              When at least one message number is specified, the optional
              <code>prefix_</code> can be used to specify the Compliance Module
              that all messages are associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <preset_groups>
    <group name="Dataflow Presets" default="No Preset">
     <preset name="No Preset">
      <setting ref="-remark " value="No Preset Selected"/>
     </preset>
     <preset name="Depth 1">
      <setting ref="-remark " value="Depth 1 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=10000"/>
      <setting ref="-prodoption " value="df::analyse_header_functions=intra"/>
     </preset>
     <preset name="Depth 2">
      <setting ref="-remark " value="Depth 2 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=15000"/>
      <setting ref="-prodoption " value="df::analyse_header_functions=intra"/>
     </preset>
     <preset name="Depth 3">
      <setting ref="-remark " value="Depth 3 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=60000"/>
      <setting ref="-prodoption " value="df::analyse_header_functions=intra"/>
     </preset>
     <preset name="Depth 4">
      <setting ref="-remark " value="Depth 4 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=60000"/>
      <setting ref="-prodoption " value="df::analyse_header_functions=inter"/>
     </preset>
     <preset name="Depth 5">
      <setting ref="-remark " value="Depth 5 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=60000"/>
      <setting ref="-prodoption " value="df::analyse_header_functions=inter"/>
     </preset>
    </group>
   </preset_groups>
  </component_options>
 </executable>
 <messages>
  <message id="0010" level="QA_ERROR" help="doc-en_US/doc/messages/0010.html" severity="9">
   <text>Unable to open file '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0011" level="QA_ERROR" help="doc-en_US/doc/messages/0011.html" severity="9">
   <text>Unable to access file '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0012" level="QA_WARNING" help="doc-en_US/doc/messages/0012.html" severity="6">
   <text>The type in a function style cast must comprise of only one type specifier.</text>
   <references>
      </references>
  </message>
  <message id="0013" level="QA_WARNING" help="doc-en_US/doc/messages/0013.html" severity="6">
   <text>A delete array expression with an array dimension is obsolete.</text>
   <references>
    <reference source="ISO C++ Language [5.3.5/1]"/>
   </references>
  </message>
  <message id="0014" level="QA_ERROR" help="doc-en_US/doc/messages/0014.html" severity="9">
   <text>Syntax error before '%1s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0015" level="QA_ERROR" help="doc-en_US/doc/messages/0015.html" severity="9">
   <text>Divide by zero in expression.</text>
   <references>
      </references>
  </message>
  <message id="0016" level="QA_ERROR" help="doc-en_US/doc/messages/0016.html" severity="9">
   <text>No tokens remaining after macro substitution in #%1s directive, prefer defined() or #ifdef instead?</text>
   <references>
      </references>
  </message>
  <message id="0017" level="QA_WARNING" help="doc-en_US/doc/messages/0017.html" severity="6">
   <text>Invalid #line syntax: expect '#line NUMBER' or '#line NUMBER "FILENAME"'.</text>
   <references>
    <reference source="ISO C++ Language [16.4]"/>
   </references>
  </message>
  <message id="0018" level="QA_WARNING" help="doc-en_US/doc/messages/0018.html" severity="6">
   <text>Macro '%1s' is already defined.</text>
   <references>
    <reference source="ISO C++ Language [16.3]"/>
   </references>
  </message>
  <message id="0019" level="QA_ERROR" help="doc-en_US/doc/messages/0019.html" severity="9">
   <text>Expecting value of form '{size_t|ptrdiff_t|wchar_t}=datatype' in -intrinsictype option.</text>
   <references>
      </references>
  </message>
  <message id="0020" level="QA_ERROR" help="doc-en_US/doc/messages/0020.html" severity="9">
   <text>'%1s' cannot be set with -intrinsictype.  Valid types are 'size_t', 'ptrdiff_t' and 'wchar_t'.</text>
   <references>
      </references>
  </message>
  <message id="0021" level="QA_ERROR" help="doc-en_US/doc/messages/0021.html" severity="9">
   <text>Missing #endif directive at end of file.</text>
   <references>
      </references>
  </message>
  <message id="0022" level="QA_ERROR" help="doc-en_US/doc/messages/0022.html" severity="9">
   <text>Identifier expected in 'defined' expression.</text>
   <references>
      </references>
  </message>
  <message id="0023" level="QA_WARNING" help="doc-en_US/doc/messages/0023.html" severity="6">
   <text>Right parenthesis expected in 'defined' expression.</text>
   <references>
      </references>
  </message>
  <message id="0024" level="QA_WARNING" help="doc-en_US/doc/messages/0024.html" severity="6">
   <text>Tokens '%1s' and '%2s' do not form a valid token when concatenated and will remain separate tokens.</text>
   <references>
    <reference source="ISO C++ Language [16.3.3/3]"/>
   </references>
  </message>
  <message id="0025" level="QA_WARNING" help="doc-en_US/doc/messages/0025.html" severity="9">
   <text>Function macro '%1s' requires %2s argument(s).</text>
   <references>
    <reference source="ISO C++ Language [16.3/4]"/>
   </references>
  </message>
  <message id="0026" level="QA_WARNING" help="doc-en_US/doc/messages/0026.html" severity="6">
   <text>Token 'defined' generated from macro replacement in #if.</text>
   <references>
      </references>
  </message>
  <message id="0027" level="QA_WARNING" help="doc-en_US/doc/messages/0027.html" severity="6">
   <text>'extern' used before an explicit template instantiation is only supported from C++ '11.</text>
   <references>
      </references>
  </message>
  <message id="0028" level="QA_ERROR" help="doc-en_US/doc/messages/0028.html" severity="9">
   <text>Missing filename in #import directive, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0029" level="QA_WARNING" help="doc-en_US/doc/messages/0029.html" severity="6">
   <text>'asm' used before a function definition is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="0030" level="QA_WARNING" help="doc-en_US/doc/messages/0030.html" severity="6">
   <text>Ignoring '%1s' as its appearance with the existing declaration specifiers is ill-formed.</text>
   <references>
      </references>
  </message>
  <message id="0031" level="QA_ERROR" help="doc-en_US/doc/messages/0031.html" severity="9">
   <text>File encoding '%1s' is not recognized.</text>
   <references>
      </references>
  </message>
  <message id="0032" level="QA_WARNING" help="doc-en_US/doc/messages/0032.html" severity="8">
   <text>The result after macro expansion is not a filename, ignoring #include.</text>
   <references>
      </references>
  </message>
  <message id="0033" level="QA_WARNING" help="doc-en_US/doc/messages/0033.html" severity="8">
   <text>Syntax error in '__has_include' or '__has_include_next' operand.</text>
   <references>
    <reference source="ISO 2017 C++ Language [19.1]"/>
   </references>
  </message>
  <message id="0034" level="QA_ERROR" help="doc-en_US/doc/messages/0034.html" severity="9">
   <text>Cannot find include file '%1s', ignoring #include.</text>
   <references>
      </references>
  </message>
  <message id="0035" level="QA_ERROR" help="doc-en_US/doc/messages/0035.html" severity="9">
   <text>Include file '%1s' is not a regular file.</text>
   <references>
      </references>
  </message>
  <message id="0036" level="QA_ERROR" help="doc-en_US/doc/messages/0036.html" severity="9">
   <text>You do not have read permission for include file '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0037" level="QA_WARNING" help="doc-en_US/doc/messages/0037.html" severity="6">
   <text>Unable to define nested namespaces with top-level inline specifier.</text>
   <references>
    <reference source="ISO 2017 C++ Language [10.3.1]"/>
   </references>
  </message>
  <message id="0038" level="QA_WARNING" help="doc-en_US/doc/messages/0038.html" severity="6">
   <text>Using the '%1s' operator outside of an #if or #elif directive.</text>
   <references>
    <reference source="ISO 2017 C++ Language [19.1]"/>
   </references>
  </message>
  <message id="0039" level="QA_ERROR" help="doc-en_US/doc/messages/0039.html" severity="9">
   <text>Unexpected end of input found while parsing buffer.</text>
   <references>
      </references>
  </message>
  <message id="0040" level="QA_WARNING" help="doc-en_US/doc/messages/0040.html" severity="6">
   <text>Directive name '%1s' not recognized.</text>
   <references>
      </references>
  </message>
  <message id="0041" level="QA_WARNING" help="doc-en_US/doc/messages/0041.html" severity="6">
   <text>Declaration specifier consteval is not valid with objects. Consteval specifier ignored.</text>
   <references>
      </references>
  </message>
  <message id="0042" level="QA_WARNING" help="doc-en_US/doc/messages/0042.html" severity="6">
   <text>Declaration specifier constinit is not valid with non static objects. Constinit specifier ignored.</text>
   <references>
      </references>
  </message>
  <message id="0043" level="QA_ERROR" help="doc-en_US/doc/messages/0043.html" severity="9">
   <text>Qualified ID not valid in this context.</text>
   <references>
      </references>
  </message>
  <message id="0044" level="QA_WARNING" help="doc-en_US/doc/messages/0044.html" severity="1">
   <text>Comma ignored after enumerator list.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.enum#1]"/>
   </references>
  </message>
  <message id="0045" level="QA_ERROR" help="doc-en_US/doc/messages/0045.html" severity="9">
   <text>Name is not a type, will assume 'int'.</text>
   <references>
      </references>
  </message>
  <message id="0046" level="QA_ERROR" help="doc-en_US/doc/messages/0046.html" severity="9">
   <text>Not a type name, base type ignored.</text>
   <references>
    <reference source="ISO C++ Language [10/1]"/>
   </references>
  </message>
  <message id="0047" level="QA_WARNING" help="doc-en_US/doc/messages/0047.html" severity="1">
   <text>This declaration is of the non standard type long long.</text>
   <references>
      </references>
  </message>
  <message id="0048" level="QA_WARNING" help="doc-en_US/doc/messages/0048.html" severity="1">
   <text>This declaration is of the non standard type unsigned long long.</text>
   <references>
      </references>
  </message>
  <message id="0050" level="QA_ERROR" help="doc-en_US/doc/messages/0050.html" severity="9">
   <text>Unexpected end of file while reading function macro arguments.</text>
   <references>
    <reference source="ISO C++ Language [16.3/4]"/>
   </references>
  </message>
  <message id="0051" level="QA_WARNING" help="doc-en_US/doc/messages/0051.html" severity="6">
   <text>Expecting a preprocessor directive following #.</text>
   <references>
      </references>
  </message>
  <message id="0052" level="QA_ERROR" help="doc-en_US/doc/messages/0052.html" severity="9">
   <text>#endif directive without preceding #if, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0053" level="QA_ERROR" help="doc-en_US/doc/messages/0053.html" severity="9">
   <text>#elif directive without preceding #if, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0054" level="QA_ERROR" help="doc-en_US/doc/messages/0054.html" severity="9">
   <text>#else directive without preceding #if, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0055" level="QA_WARNING" help="doc-en_US/doc/messages/0055.html" severity="6">
   <text>Macro '%1s' not defined, #undef ignored.</text>
   <references>
      </references>
  </message>
  <message id="0056" level="QA_WARNING" help="doc-en_US/doc/messages/0056.html" severity="6">
   <text>'%2s' is not a valid macro name, ignoring directive.</text>
   <references>
    <reference source="ISO C++ Language [2.10]"/>
   </references>
  </message>
  <message id="0057" level="QA_WARNING" help="doc-en_US/doc/messages/0057.html" severity="6">
   <text>Extra characters after directive.</text>
   <references>
    <reference source="ISO C++ Language [16/1]"/>
   </references>
  </message>
  <message id="0058" level="QA_ERROR" help="doc-en_US/doc/messages/0058.html" severity="9">
   <text>Invalid macro parameter name, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0059" level="QA_ERROR" help="doc-en_US/doc/messages/0059.html" severity="9">
   <text>Syntax error in macro parameter list, ignoring directive.</text>
   <references>
    <reference source="ISO C++ Language [16.3/9]"/>
   </references>
  </message>
  <message id="0060" level="QA_WARNING" help="doc-en_US/doc/messages/0060.html" severity="6">
   <text>Non-standard 'asm' syntax, standard syntax is 'asm (" ... ");'.</text>
   <references>
    <reference source="ISO C++ Language [7.4]"/>
   </references>
  </message>
  <message id="0061" level="QA_ERROR" help="doc-en_US/doc/messages/0061.html" severity="9">
   <text>#error: %1s</text>
   <references>
      </references>
  </message>
  <message id="0062" level="QA_WARNING" help="doc-en_US/doc/messages/0062.html" severity="6">
   <text>Extra tokens at end of #include directive</text>
   <references>
    <reference source="ISO C++ Language [2.13.4]"/>
   </references>
  </message>
  <message id="0063" level="QA_ERROR" help="doc-en_US/doc/messages/0063.html" severity="9">
   <text>File '%1s' is included recursively.</text>
   <references>
      </references>
  </message>
  <message id="0064" level="QA_WARNING" help="doc-en_US/doc/messages/0064.html" severity="6">
   <text>Ill-formed universal character.</text>
   <references>
    <reference source="ISO C++ Language [2.2/2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0065" level="QA_WARNING" help="doc-en_US/doc/messages/0065.html" severity="6">
   <text>New line in include filename.</text>
   <references>
    <reference source="ISO C++ Language [2.13.4]"/>
   </references>
  </message>
  <message id="0066" level="QA_WARNING" help="doc-en_US/doc/messages/0066.html" severity="6">
   <text>Unexpected end of file while ignoring tokens.</text>
   <references>
      </references>
  </message>
  <message id="0067" level="QA_WARNING" help="doc-en_US/doc/messages/0067.html" severity="6">
   <text>Invalid _ignore syntax, expecting '_ignore' or '_ignore(#)'.</text>
   <references>
      </references>
  </message>
  <message id="0068" level="QA_WARNING" help="doc-en_US/doc/messages/0068.html" severity="6">
   <text>The type in a function style cast cannot be an elaborated type specifier.  A typedef should be used instead.</text>
   <references>
    <reference source="ISO C++ Language [3.4.4]"/>
   </references>
  </message>
  <message id="0069" level="QA_WARNING" help="doc-en_US/doc/messages/0069.html" severity="6">
   <text>A typedef declaration must include a declarator.</text>
   <references>
      </references>
  </message>
  <message id="0070" level="QA_WARNING" help="doc-en_US/doc/messages/0070.html" severity="6">
   <text>Newline in literal character.</text>
   <references>
    <reference source="ISO C++ Language [2.13.2]"/>
   </references>
  </message>
  <message id="0071" level="QA_WARNING" help="doc-en_US/doc/messages/0071.html" severity="6">
   <text>Newline in literal string.</text>
   <references>
    <reference source="ISO C++ Language [2.13.4]"/>
   </references>
  </message>
  <message id="0072" level="QA_WARNING" help="doc-en_US/doc/messages/0072.html" severity="6">
   <text>Hex digit must follow '0x'.</text>
   <references>
    <reference source="ISO C++ Language [2.13.1]"/>
   </references>
  </message>
  <message id="0073" level="QA_WARNING" help="doc-en_US/doc/messages/0073.html" severity="6">
   <text>An optional sign and at least one digit must follow 'E' or 'e' in a floating literal (or 'P' or 'p' in a hexadecimal floating literal).</text>
   <references>
    <reference source="ISO C++ Language [2.13.3]"/>
   </references>
  </message>
  <message id="0074" level="QA_WARNING" help="doc-en_US/doc/messages/0074.html" severity="6">
   <text>Invalid character.</text>
   <references>
    <reference source="ISO C++ Language [2.2/1]"/>
   </references>
  </message>
  <message id="0075" level="QA_ERROR" help="doc-en_US/doc/messages/0075.html" severity="9">
   <text>Unexpected end of file while reading c-style comment.</text>
   <references>
    <reference source="ISO C++ Language [2.7]"/>
   </references>
  </message>
  <message id="0076" level="QA_WARNING" help="doc-en_US/doc/messages/0076.html" severity="6">
   <text>No hex digits following '\x' in string literal.</text>
   <references>
    <reference source="ISO C++ Language [2.13.2/4]"/>
   </references>
  </message>
  <message id="0077" level="QA_WARNING" help="doc-en_US/doc/messages/0077.html" severity="6">
   <text>Invalid escape character in string literal.</text>
   <references>
    <reference source="ISO C++ Language [2.13.2/3]"/>
    <reference source="ISO C++ Language [2.13.2]"/>
   </references>
  </message>
  <message id="0078" level="QA_WARNING" help="doc-en_US/doc/messages/0078.html" severity="6">
   <text>Literal contains character that exceeds maximum char value.</text>
   <references>
    <reference source="ISO C++ Language [2.13.2/4]"/>
   </references>
  </message>
  <message id="0079" level="QA_ERROR" help="doc-en_US/doc/messages/0079.html" severity="9">
   <text>Raw string literal delimiter is longer than 16 characters.</text>
   <references>
    <reference source="ISO C++ Language [2.13.5/2]"/>
   </references>
  </message>
  <message id="0080" level="QA_WARNING" help="doc-en_US/doc/messages/0080.html" severity="6">
   <text>Producing a universal character name through token concatenation is undefined.</text>
   <references>
    <reference source="ISO 2011 C++ Language [2.2/4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0081" level="QA_WARNING" help="doc-en_US/doc/messages/0081.html" severity="6">
   <text>#warning: %1s</text>
   <references>
      </references>
  </message>
  <message id="0083" level="QA_ERROR" help="doc-en_US/doc/messages/0083.html" severity="9">
   <text>The use of a template-id is not valid in this context.</text>
   <references>
      </references>
  </message>
  <message id="0084" level="QA_WARNING" help="doc-en_US/doc/messages/0084.html" severity="6">
   <text>Friend specifier not valid with object declaration.</text>
   <references>
      </references>
  </message>
  <message id="0085" level="QA_WARNING" help="doc-en_US/doc/messages/0085.html" severity="6">
   <text>Friend specifier not valid with bitfield declaration.</text>
   <references>
      </references>
  </message>
  <message id="0086" level="QA_WARNING" help="doc-en_US/doc/messages/0086.html" severity="6">
   <text>Typedef specifier not valid with bitfield declaration.</text>
   <references>
      </references>
  </message>
  <message id="0087" level="QA_WARNING" help="doc-en_US/doc/messages/0087.html" severity="6">
   <text>Friend specifier not valid with pure virtual function.</text>
   <references>
      </references>
  </message>
  <message id="0088" level="QA_WARNING" help="doc-en_US/doc/messages/0088.html" severity="6">
   <text>Typedef specifier not valid with pure virtual function.</text>
   <references>
      </references>
  </message>
  <message id="0089" level="QA_WARNING" help="doc-en_US/doc/messages/0089.html" severity="6">
   <text>Initializer invalid in this context.</text>
   <references>
      </references>
  </message>
  <message id="0090" level="QA_WARNING" help="doc-en_US/doc/messages/0090.html" severity="6">
   <text>Typedef specifier not valid with function definition.</text>
   <references>
      </references>
  </message>
  <message id="0091" level="QA_WARNING" help="doc-en_US/doc/messages/0091.html" severity="6">
   <text>Pure virtual functions must use "= 0".</text>
   <references>
      </references>
  </message>
  <message id="0094" level="QA_WARNING" help="doc-en_US/doc/messages/0094.html" severity="6">
   <text>Missing type specifier.</text>
   <references>
      </references>
  </message>
  <message id="0095" level="QA_WARNING" help="doc-en_US/doc/messages/0095.html" severity="6">
   <text>An ellipse in a throw specification is a language extension.</text>
   <references>
    <reference source="ISO C++ Language [15.4/1]"/>
   </references>
  </message>
  <message id="0097" level="QA_ERROR" help="doc-en_US/doc/messages/0097.html" severity="9">
   <text>Missing filename in #using directive, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0100" level="QA_WARNING" help="doc-en_US/doc/messages/0100.html" severity="6">
   <text>The declaration specifier '%1s' may not be used in this declaration.</text>
   <references>
    <reference source="ISO C++ Language [7.1]"/>
   </references>
  </message>
  <message id="0101" level="QA_ERROR" help="doc-en_US/doc/messages/0101.html" severity="9">
   <text>The scope '%1s', in class member access expression, not found.</text>
   <references>
      </references>
  </message>
  <message id="0103" level="QA_WARNING" help="doc-en_US/doc/messages/0103.html" severity="9">
   <text>'%1s' was already defined.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0104" level="QA_WARNING" help="doc-en_US/doc/messages/0104.html" severity="9">
   <text>'%1s' was not declared in the qualifying scope '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [3.4.3]"/>
   </references>
  </message>
  <message id="0105" level="QA_WARNING" help="doc-en_US/doc/messages/0105.html" severity="6">
   <text>'%1s' was previously declared with non-static linkage.</text>
   <references>
    <reference source="ISO C++ Language [7.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0106" level="QA_WARNING" help="doc-en_US/doc/messages/0106.html" severity="5">
   <text>This use of 'extern' does not change the linkage of '%s'.</text>
   <references>
    <reference source="ISO C++ Language [3.5]"/>
    <reference source="ISO C++ Language [7.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0107" level="QA_WARNING" help="doc-en_US/doc/messages/0107.html" severity="6">
   <text>'%1s' may not be redeclared in a class.</text>
   <references>
      </references>
  </message>
  <message id="0108" level="QA_WARNING" help="doc-en_US/doc/messages/0108.html" severity="6">
   <text>Static member functions may not have 'const' or 'volatile' qualification.</text>
   <references>
    <reference source="ISO C++ Language [9.4.1/2]"/>
   </references>
  </message>
  <message id="0109" level="QA_INFORMATION" help="doc-en_US/doc/messages/0109.html" severity="0">
   <text>Static and non-static member functions of the same basic function type cannot be declared.</text>
   <references>
    <reference source="ISO C++ Language [9.4.1/2]"/>
    <reference source="ISO C++ Language [5.2.5]"/>
   </references>
  </message>
  <message id="0110" level="QA_INFORMATION" help="doc-en_US/doc/messages/0110.html" severity="0">
   <text>Cannot overload existing function with different return type.</text>
   <references>
    <reference source="ISO C++ Language [13.1/2]"/>
   </references>
  </message>
  <message id="0111" level="QA_INFORMATION" help="doc-en_US/doc/messages/0111.html" severity="0">
   <text>This function with a different return type is also declared for the enclosing namespace.</text>
   <references>
    <reference source="ISO C++ Language [13.1/2]"/>
   </references>
  </message>
  <message id="0112" level="QA_INFORMATION" help="doc-en_US/doc/messages/0112.html" severity="0">
   <text>'%1s' previously declared here, was not declared as a class.</text>
   <references>
      </references>
  </message>
  <message id="0113" level="QA_INFORMATION" help="doc-en_US/doc/messages/0113.html" severity="0">
   <text>'%1s' previously declared here, was not declared as an enumeration.</text>
   <references>
      </references>
  </message>
  <message id="0114" level="QA_WARNING" help="doc-en_US/doc/messages/0114.html" severity="6">
   <text>This function cannot accept arguments.</text>
   <references>
    <reference source="ISO C++ Language [12.4/1]"/>
   </references>
  </message>
  <message id="0115" level="QA_WARNING" help="doc-en_US/doc/messages/0115.html" severity="6">
   <text>This function may not have an explicit return type.</text>
   <references>
    <reference source="ISO C++ Language [12.1/1]"/>
    <reference source="ISO C++ Language [7.1.2/1]"/>
   </references>
  </message>
  <message id="0116" level="QA_WARNING" help="doc-en_US/doc/messages/0116.html" severity="6">
   <text>The object definition or redeclaration conflicts with its declaration due to the constinit specifier.</text>
   <references>
    <reference source="ISO 2020 C++ Language [9.2.6]"/>
   </references>
  </message>
  <message id="0117" level="QA_WARNING" help="doc-en_US/doc/messages/0117.html" severity="6">
   <text>A copy constructor cannot have the class type itself as its parameter type.</text>
   <references>
    <reference source="ISO C++ Language [12.1/10]"/>
   </references>
  </message>
  <message id="0118" level="QA_WARNING" help="doc-en_US/doc/messages/0118.html" severity="6">
   <text>'%1s' is not a static member object and cannot be defined here.</text>
   <references>
      </references>
  </message>
  <message id="0122" level="QA_WARNING" help="doc-en_US/doc/messages/0122.html" severity="6">
   <text>The namespace alias '%1s' was already used for a different namespace alias.</text>
   <references>
    <reference source="ISO C++ Language [7.3.2/4]"/>
   </references>
  </message>
  <message id="0124" level="QA_WARNING" help="doc-en_US/doc/messages/0124.html" severity="6">
   <text>A qualified '%1s' declaration is not allowed at class scope.</text>
   <references>
    <reference source="ISO C++ Language [12.1/1]"/>
    <reference source="ISO C++ Language [12.4/1]"/>
    <reference source="ISO C++ Language [9.3]"/>
    <reference source="ISO C++ Language [11.3]"/>
   </references>
  </message>
  <message id="0125" level="QA_WARNING" help="doc-en_US/doc/messages/0125.html" severity="6">
   <text>'%1s' is already declared, recovering using initializer as expression.</text>
   <references>
      </references>
  </message>
  <message id="0126" level="QA_WARNING" help="doc-en_US/doc/messages/0126.html" severity="6">
   <text>'%1s' is used here for a different type.</text>
   <references>
      </references>
  </message>
  <message id="0127" level="QA_WARNING" help="doc-en_US/doc/messages/0127.html" severity="6">
   <text>'%1s' is not a class.</text>
   <references>
      </references>
  </message>
  <message id="0128" level="QA_WARNING" help="doc-en_US/doc/messages/0128.html" severity="9">
   <text>Type '%1s' is not complete, continuing with '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [9.2/2]"/>
    <reference source="ISO C++ Language [3.9/6]"/>
   </references>
  </message>
  <message id="0129" level="QA_WARNING" help="doc-en_US/doc/messages/0129.html" severity="9">
   <text>Array type is not complete, recovering with '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [9.2/2]"/>
    <reference source="ISO C++ Language [3.9/6]"/>
   </references>
  </message>
  <message id="0130" level="QA_INFORMATION" help="doc-en_US/doc/messages/0130.html" severity="0">
   <text>Cannot overload existing functions with different language linkage.</text>
   <references>
    <reference source="ISO C++ Language [7.5/5]"/>
   </references>
  </message>
  <message id="0131" level="QA_WARNING" help="doc-en_US/doc/messages/0131.html" severity="9">
   <text>'%1s' was previously declared to be of a different type.</text>
   <references>
      </references>
  </message>
  <message id="0133" level="QA_ERROR" help="doc-en_US/doc/messages/0133.html" severity="9">
   <text>The type '%1s' used as a qualifier is not complete.</text>
   <references>
      </references>
  </message>
  <message id="0134" level="QA_WARNING" help="doc-en_US/doc/messages/0134.html" severity="6">
   <text>The function return type was not specified.</text>
   <references>
      </references>
  </message>
  <message id="0135" level="QA_WARNING" help="doc-en_US/doc/messages/0135.html" severity="6">
   <text>The class '%1s' may not be used as a base class of itself.</text>
   <references>
      </references>
  </message>
  <message id="0136" level="QA_WARNING" help="doc-en_US/doc/messages/0136.html" severity="9">
   <text>Illegal qualified declaration.</text>
   <references>
      </references>
  </message>
  <message id="0137" level="QA_WARNING" help="doc-en_US/doc/messages/0137.html" severity="9">
   <text>Existing %3s '%1s' prevents this %2s declaration.</text>
   <references>
      </references>
  </message>
  <message id="0139" level="QA_WARNING" help="doc-en_US/doc/messages/0139.html" severity="6">
   <text>'%1s' different when looked up as a member than when looked up in the enclosing context.</text>
   <references>
    <reference source="ISO C++ Language [3.4.5]"/>
   </references>
  </message>
  <message id="0140" level="QA_WARNING" help="doc-en_US/doc/messages/0140.html" severity="6">
   <text>An enumeration may not be forward declared.</text>
   <references>
    <reference source="ISO C++ Language [7.1.5.3]"/>
    <reference source="ISO C++ Language [7.2]"/>
   </references>
  </message>
  <message id="0141" level="QA_WARNING" help="doc-en_US/doc/messages/0141.html" severity="6">
   <text>An enumerator may only be initialized with a compile time constant, recovering with 0.</text>
   <references>
      </references>
  </message>
  <message id="0142" level="QA_WARNING" help="doc-en_US/doc/messages/0142.html" severity="6">
   <text>The type of this object was not specified, recovering with 'int'.</text>
   <references>
      </references>
  </message>
  <message id="0143" level="QA_WARNING" help="doc-en_US/doc/messages/0143.html" severity="6">
   <text>'%1s' is not visible.</text>
   <references>
    <reference source="ISO C++ Language [14.6/4]"/>
    <reference source="Effective C++ 3rd Edition [Item42]"/>
   </references>
  </message>
  <message id="0144" level="QA_WARNING" help="doc-en_US/doc/messages/0144.html" severity="8">
   <text>An initializer is not allowed here.</text>
   <references>
      </references>
  </message>
  <message id="0145" level="QA_WARNING" help="doc-en_US/doc/messages/0145.html" severity="6">
   <text>Too many initializers were provided.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0146" level="QA_WARNING" help="doc-en_US/doc/messages/0146.html" severity="6">
   <text>An expression was expected, recovering with value initialization.</text>
   <references>
      </references>
  </message>
  <message id="0147" level="QA_WARNING" help="doc-en_US/doc/messages/0147.html" severity="6">
   <text>A brace enclosed initializer was expected.</text>
   <references>
      </references>
  </message>
  <message id="0148" level="QA_WARNING" help="doc-en_US/doc/messages/0148.html" severity="6">
   <text>'%1s' should be preceded by a '%2s' keyword.</text>
   <references>
    <reference source="ISO C++ Language [3.3.7]"/>
    <reference source="ISO C++ Language [7.1.5.3]"/>
   </references>
  </message>
  <message id="0149" level="QA_WARNING" help="doc-en_US/doc/messages/0149.html" severity="6">
   <text>'%1s' should be preceded by 'enum'.</text>
   <references>
    <reference source="ISO C++ Language [3.3.7]"/>
    <reference source="ISO C++ Language [7.1.5.3]"/>
   </references>
  </message>
  <message id="0150" level="QA_ERROR" help="doc-en_US/doc/messages/0150.html" severity="9">
   <text>Could not convert expression of type '%1s' to type '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0152" level="QA_INFORMATION" help="doc-en_US/doc/messages/0152.html" severity="9">
   <text>'%1s' is not declared.</text>
   <references>
      </references>
  </message>
  <message id="0153" level="QA_WARNING" help="doc-en_US/doc/messages/0153.html" severity="6">
   <text>An array must have a size greater than zero, using dimension of '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0154" level="QA_WARNING" help="doc-en_US/doc/messages/0154.html" severity="6">
   <text>The size of an array must be a constant value, using dimension of '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0155" level="QA_ERROR" help="doc-en_US/doc/messages/0155.html" severity="9">
   <text>An array of reference type is not allowed, recovering with '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0156" level="QA_ERROR" help="doc-en_US/doc/messages/0156.html" severity="9">
   <text>An array cannot be of type void, recovering with '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0157" level="QA_WARNING" help="doc-en_US/doc/messages/0157.html" severity="6">
   <text>Invalid bitfield size, recovering with '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [9.6]"/>
   </references>
  </message>
  <message id="0158" level="QA_ERROR" help="doc-en_US/doc/messages/0158.html" severity="9">
   <text>Typename '%1s' not found, recovering with '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0159" level="QA_WARNING" help="doc-en_US/doc/messages/0159.html" severity="6">
   <text>This member function may not be static.</text>
   <references>
    <reference source="ISO C++ Language [13.5/6]"/>
   </references>
  </message>
  <message id="0160" level="QA_WARNING" help="doc-en_US/doc/messages/0160.html" severity="9">
   <text>Template '%1s' was already declared with an incompatible template parameter list.</text>
   <references>
      </references>
  </message>
  <message id="0161" level="QA_INFORMATION" help="doc-en_US/doc/messages/0161.html" severity="9">
   <text>The class template name '%1s' was already used in another declaration.</text>
   <references>
      </references>
  </message>
  <message id="0162" level="QA_WARNING" help="doc-en_US/doc/messages/0162.html" severity="6">
   <text>The declaration of the specialization for '%1s' must be preceded by 'template &lt;&gt; '.</text>
   <references>
    <reference source="ISO C++ Language [14/1]"/>
    <reference source="ISO C++ Language [14.7.3/1]"/>
   </references>
  </message>
  <message id="0163" level="QA_ERROR" help="doc-en_US/doc/messages/0163.html" severity="9">
   <text>A type was expected for parameter '%1s', recovering with '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [14.6.1/1]"/>
   </references>
  </message>
  <message id="0164" level="QA_ERROR" help="doc-en_US/doc/messages/0164.html" severity="9">
   <text>An object was expected for parameter %1s, attempting to recover with '0'.</text>
   <references>
      </references>
  </message>
  <message id="0165" level="QA_ERROR" help="doc-en_US/doc/messages/0165.html" severity="9">
   <text>Only %1s of the %2s required arguments were given.</text>
   <references>
      </references>
  </message>
  <message id="0166" level="QA_WARNING" help="doc-en_US/doc/messages/0166.html" severity="9">
   <text>Too many arguments provided for template (only expected %1s arguments).</text>
   <references>
      </references>
  </message>
  <message id="0167" level="QA_WARNING" help="doc-en_US/doc/messages/0167.html" severity="6">
   <text>A partial specialization should have dependent arguments.</text>
   <references>
    <reference source="ISO C++ Language [14.5.4]"/>
   </references>
  </message>
  <message id="0168" level="QA_WARNING" help="doc-en_US/doc/messages/0168.html" severity="9">
   <text>More than one partial specializations are equally suitable for this specialization.</text>
   <references>
    <reference source="ISO C++ Language [14.5.4.1]"/>
   </references>
  </message>
  <message id="0169" level="QA_WARNING" help="doc-en_US/doc/messages/0169.html" severity="6">
   <text>For '%1s' to be considered a type, the 'typename' keyword must precede the qualified name.</text>
   <references>
    <reference source="ISO C++ Language [14.6/2]"/>
    <reference source="Effective C++ 3rd Edition [Item42]"/>
   </references>
  </message>
  <message id="0170" level="QA_ERROR" help="doc-en_US/doc/messages/0170.html" severity="9">
   <text>'%1s' not found in '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0172" level="QA_WARNING" help="doc-en_US/doc/messages/0172.html" severity="9">
   <text>The template for this specialization was not found.</text>
   <references>
      </references>
  </message>
  <message id="0173" level="QA_ERROR" help="doc-en_US/doc/messages/0173.html" severity="9">
   <text>A non-type template parameter may not be of type '%1s', recovering with '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [14.3.2]"/>
   </references>
  </message>
  <message id="0174" level="QA_ERROR" help="doc-en_US/doc/messages/0174.html" severity="9">
   <text>A class template was expected for parameter %1s.</text>
   <references>
    <reference source="ISO C++ Language [14.6.1/1]"/>
   </references>
  </message>
  <message id="0175" level="QA_ERROR" help="doc-en_US/doc/messages/0175.html" severity="9">
   <text>Template arguments must be given in this context, continuing in outer scope.</text>
   <references>
    <reference source="ISO C++ Language [3.4.3/1]"/>
   </references>
  </message>
  <message id="0176" level="QA_ERROR" help="doc-en_US/doc/messages/0176.html" severity="9">
   <text>Template arguments must be given in this context, recovering with '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0177" level="QA_ERROR" help="doc-en_US/doc/messages/0177.html" severity="9">
   <text>Invalid template non-type argument '%1s', continuing in outer scope.</text>
   <references>
    <reference source="ISO C++ Language [14.3.2]"/>
   </references>
  </message>
  <message id="0178" level="QA_INFORMATION" help="doc-en_US/doc/messages/0178.html" severity="9">
   <text>Too many template parameter scopes.</text>
   <references>
    <reference source="ISO C++ Language [14.7.3]"/>
   </references>
  </message>
  <message id="0179" level="QA_WARNING" help="doc-en_US/doc/messages/0179.html" severity="6">
   <text>Fully qualify nested names and use 'typename' where necessary when using -sdep flag.</text>
   <references>
      </references>
  </message>
  <message id="0180" level="QA_WARNING" help="doc-en_US/doc/messages/0180.html" severity="6">
   <text>A parameter may not be added after 'void' is specified.</text>
   <references>
      </references>
  </message>
  <message id="0181" level="QA_WARNING" help="doc-en_US/doc/messages/0181.html" severity="6">
   <text>'void' cannot be specified after any other parameters have been specified for a function.</text>
   <references>
      </references>
  </message>
  <message id="0182" level="QA_WARNING" help="doc-en_US/doc/messages/0182.html" severity="6">
   <text>'break' can only appear within a 'switch', 'while', 'do', or 'for' statement.</text>
   <references>
      </references>
  </message>
  <message id="0183" level="QA_WARNING" help="doc-en_US/doc/messages/0183.html" severity="6">
   <text>'continue' can only appear within a 'while', 'do', or 'for' statement.</text>
   <references>
      </references>
  </message>
  <message id="0184" level="QA_WARNING" help="doc-en_US/doc/messages/0184.html" severity="6">
   <text>A 'case' label must be within a switch statement.</text>
   <references>
      </references>
  </message>
  <message id="0185" level="QA_WARNING" help="doc-en_US/doc/messages/0185.html" severity="6">
   <text>A 'default' label must be within a switch statement.</text>
   <references>
      </references>
  </message>
  <message id="0186" level="QA_WARNING" help="doc-en_US/doc/messages/0186.html" severity="6">
   <text>This label has already been used.</text>
   <references>
      </references>
  </message>
  <message id="0187" level="QA_WARNING" help="doc-en_US/doc/messages/0187.html" severity="6">
   <text>A default argument was already specified for this parameter.</text>
   <references>
      </references>
  </message>
  <message id="0189" level="QA_WARNING" help="doc-en_US/doc/messages/0189.html" severity="6">
   <text>A function in a namespace may not have 'const' or 'volatile' qualification.</text>
   <references>
      </references>
  </message>
  <message id="0190" level="QA_WARNING" help="doc-en_US/doc/messages/0190.html" severity="6">
   <text>'%1s' may not have any parameters.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0191" level="QA_WARNING" help="doc-en_US/doc/messages/0191.html" severity="6">
   <text>'%1s' may only have zero or one parameters.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0192" level="QA_WARNING" help="doc-en_US/doc/messages/0192.html" severity="6">
   <text>'%1s' must have exactly one parameter.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0193" level="QA_WARNING" help="doc-en_US/doc/messages/0193.html" severity="6">
   <text>'%1s' must have at least one parameter.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0194" level="QA_WARNING" help="doc-en_US/doc/messages/0194.html" severity="6">
   <text>'%1s' must have one or two parameters.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0195" level="QA_WARNING" help="doc-en_US/doc/messages/0195.html" severity="6">
   <text>'%1s' must have exactly two parameters.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0196" level="QA_WARNING" help="doc-en_US/doc/messages/0196.html" severity="6">
   <text>Parameter %1s must be of class or enum type.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0197" level="QA_WARNING" help="doc-en_US/doc/messages/0197.html" severity="6">
   <text>Parameter %1s must be of type '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0198" level="QA_WARNING" help="doc-en_US/doc/messages/0198.html" severity="6">
   <text>At least one parameter must be class or enum type.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0199" level="QA_WARNING" help="doc-en_US/doc/messages/0199.html" severity="6">
   <text>Return type must be '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0200" level="QA_ERROR" help="doc-en_US/doc/messages/0200.html" severity="9">
   <text>A declaration of array type is not allowed here.</text>
   <references>
      </references>
  </message>
  <message id="0201" level="QA_ERROR" help="doc-en_US/doc/messages/0201.html" severity="9">
   <text>A declaration of function type is not allowed here.</text>
   <references>
      </references>
  </message>
  <message id="0202" level="QA_WARNING" help="doc-en_US/doc/messages/0202.html" severity="6">
   <text>A pure function must be virtual.</text>
   <references>
    <reference source="ISO C++ Language [10.3]"/>
    <reference source="ISO C++ Language [10.4]"/>
   </references>
  </message>
  <message id="0203" level="QA_WARNING" help="doc-en_US/doc/messages/0203.html" severity="6">
   <text>Exception specification is not allowed.</text>
   <references>
    <reference source="ISO C++ Language [15.4/1]"/>
   </references>
  </message>
  <message id="0204" level="QA_WARNING" help="doc-en_US/doc/messages/0204.html" severity="6">
   <text>This function has a less restrictive exception specification to the function it overrides.</text>
   <references>
      </references>
  </message>
  <message id="0205" level="QA_WARNING" help="doc-en_US/doc/messages/0205.html" severity="6">
   <text>A return expression is required.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0206" level="QA_WARNING" help="doc-en_US/doc/messages/0206.html" severity="6">
   <text>This function may not return an expression.</text>
   <references>
    <reference source="ISO C++ Language [12.1/12]"/>
   </references>
  </message>
  <message id="0207" level="QA_ERROR" help="doc-en_US/doc/messages/0207.html" severity="9">
   <text>A function may not return '%1s', recovering with '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0208" level="QA_ERROR" help="doc-en_US/doc/messages/0208.html" severity="9">
   <text>Default argument not yet available</text>
   <references>
      </references>
  </message>
  <message id="0209" level="QA_WARNING" help="doc-en_US/doc/messages/0209.html" severity="6">
   <text>A destructor must be a member function.</text>
   <references>
    <reference source="ISO C++ Language [12.4]"/>
   </references>
  </message>
  <message id="0210" level="QA_WARNING" help="doc-en_US/doc/messages/0210.html" severity="6">
   <text>This operator cannot have an ellipsis parameter.</text>
   <references>
    <reference source="ISO C++ Language [13.5]"/>
   </references>
  </message>
  <message id="0211" level="QA_WARNING" help="doc-en_US/doc/messages/0211.html" severity="6">
   <text>Conversion functions must be member functions.</text>
   <references>
    <reference source="ISO C++ Language [12.3.2]"/>
   </references>
  </message>
  <message id="0212" level="QA_WARNING" help="doc-en_US/doc/messages/0212.html" severity="6">
   <text>Literal operators may not be member functions.</text>
   <references>
    <reference source="ISO 2011 C++ Language [13.5.8]"/>
   </references>
  </message>
  <message id="0213" level="QA_WARNING" help="doc-en_US/doc/messages/0213.html" severity="6">
   <text>Invalid parameters for literal operator.</text>
   <references>
    <reference source="ISO 2011 C++ Language [13.5.8]"/>
   </references>
  </message>
  <message id="0215" level="QA_WARNING" help="doc-en_US/doc/messages/0215.html" severity="6">
   <text>A function in a namespace may not have a reference qualification.</text>
   <references>
      </references>
  </message>
  <message id="0216" level="QA_WARNING" help="doc-en_US/doc/messages/0216.html" severity="9">
   <text>Function declared 'override' does not override a base class virtual function.</text>
   <references>
      </references>
  </message>
  <message id="0217" level="QA_ERROR" help="doc-en_US/doc/messages/0217.html" severity="9">
   <text>Exception specification not yet available.</text>
   <references>
      </references>
  </message>
  <message id="0218" level="QA_WARNING" help="doc-en_US/doc/messages/0218.html" severity="9">
   <text>Function declared 'final' does not override a base class virtual function and is not declared 'virtual'.</text>
   <references>
      </references>
  </message>
  <message id="0219" level="QA_WARNING" help="doc-en_US/doc/messages/0219.html" severity="9">
   <text>Default argument in requirement-parameter-list. Default arguments are not allowed for these constructs.</text>
   <references>
      </references>
  </message>
  <message id="0220" level="QA_WARNING" help="doc-en_US/doc/messages/0220.html" severity="6">
   <text>Initializer illegal for local extern.</text>
   <references>
      </references>
  </message>
  <message id="0221" level="QA_WARNING" help="doc-en_US/doc/messages/0221.html" severity="6">
   <text>Initializer illegal with using declaration.</text>
   <references>
      </references>
  </message>
  <message id="0222" level="QA_WARNING" help="doc-en_US/doc/messages/0222.html" severity="6">
   <text>The target type has a more restrictive exception specification.</text>
   <references>
    <reference source="ISO C++ Language [15.4/4]"/>
   </references>
  </message>
  <message id="0223" level="QA_WARNING" help="doc-en_US/doc/messages/0223.html" severity="9">
   <text>Typename '%1s' not found - perhaps you should include cstddef.</text>
   <references>
      </references>
  </message>
  <message id="0224" level="QA_ERROR" help="doc-en_US/doc/messages/0224.html" severity="7">
   <text>'%1s' differs from the parser internal value - please set the parser internal value using -intrinsictype "%1s=%2s", not changing internal parser value.</text>
   <references>
      </references>
  </message>
  <message id="0225" level="QA_WARNING" help="doc-en_US/doc/messages/0225.html" severity="6">
   <text>'%1s' is a typedef and cannot be preceded by class or enum.</text>
   <references>
      </references>
  </message>
  <message id="0226" level="QA_WARNING" help="doc-en_US/doc/messages/0226.html" severity="6">
   <text>The type is not a class where a class was expected or an enum where an enum was expected.</text>
   <references>
      </references>
  </message>
  <message id="0227" level="QA_WARNING" help="doc-en_US/doc/messages/0227.html" severity="6">
   <text>The last member of a C++ class may not be an incomplete array type.</text>
   <references>
      </references>
  </message>
  <message id="0228" level="QA_WARNING" help="doc-en_US/doc/messages/0228.html" severity="6">
   <text>The target type has a different language linkage.</text>
   <references>
    <reference source="ISO C++ Language [7.5/5]"/>
   </references>
  </message>
  <message id="0229" level="QA_WARNING" help="doc-en_US/doc/messages/0229.html" severity="6">
   <text>This redeclaration has different exception specifications.</text>
   <references>
    <reference source="ISO C++ Language [15.4/2]"/>
   </references>
  </message>
  <message id="0230" level="QA_WARNING" help="doc-en_US/doc/messages/0230.html" severity="6">
   <text>The type in this redeclaration has different language linkage.</text>
   <references>
    <reference source="ISO 2017 C++ Language [10.5]"/>
   </references>
  </message>
  <message id="0231" level="QA_ERROR" help="doc-en_US/doc/messages/0231.html" severity="9">
   <text>Template '%1s' not found.</text>
   <references>
      </references>
  </message>
  <message id="0232" level="QA_WARNING" help="doc-en_US/doc/messages/0232.html" severity="6">
   <text>The namespace '%1s' was not found - using directive ignored.</text>
   <references>
      </references>
  </message>
  <message id="0233" level="QA_WARNING" help="doc-en_US/doc/messages/0233.html" severity="9">
   <text>No type was specified, recovering with '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0236" level="QA_ERROR" help="doc-en_US/doc/messages/0236.html" severity="9">
   <text>An array of function type is not allowed, recovering with '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0237" level="QA_WARNING" help="doc-en_US/doc/messages/0237.html" severity="6">
   <text>This declaration does not declare anything.</text>
   <references>
      </references>
  </message>
  <message id="0238" level="QA_WARNING" help="doc-en_US/doc/messages/0238.html" severity="6">
   <text>Friend function declarations cannot have default arguments.</text>
   <references>
      </references>
  </message>
  <message id="0239" level="QA_WARNING" help="doc-en_US/doc/messages/0239.html" severity="9">
   <text>Cannot declare a non-static member object template.</text>
   <references>
    <reference source="ISO 2014 C++ Language [14]"/>
   </references>
  </message>
  <message id="0240" level="QA_WARNING" help="doc-en_US/doc/messages/0240.html" severity="9">
   <text>Cannot declare a destructor template.</text>
   <references>
      </references>
  </message>
  <message id="0241" level="QA_WARNING" help="doc-en_US/doc/messages/0241.html" severity="6">
   <text>Cannot declare a friend in namespace scope.</text>
   <references>
    <reference source="ISO C++ Language [11.4]"/>
   </references>
  </message>
  <message id="0242" level="QA_WARNING" help="doc-en_US/doc/messages/0242.html" severity="9">
   <text>Cannot declare a typedef template.</text>
   <references>
      </references>
  </message>
  <message id="0243" level="QA_WARNING" help="doc-en_US/doc/messages/0243.html" severity="6">
   <text>Cannot redeclare a qualified function template.</text>
   <references>
      </references>
  </message>
  <message id="0245" level="QA_WARNING" help="doc-en_US/doc/messages/0245.html" severity="9">
   <text>This member initializer identifier is not a class member object, or a valid base.</text>
   <references>
      </references>
  </message>
  <message id="0246" level="QA_ERROR" help="doc-en_US/doc/messages/0246.html" severity="9">
   <text>'%1s' is ambiguous.</text>
   <references>
      </references>
  </message>
  <message id="0247" level="QA_WARNING" help="doc-en_US/doc/messages/0247.html" severity="6">
   <text>Cannot declare '%1s', as an extern and non extern object in block scope.</text>
   <references>
      </references>
  </message>
  <message id="0248" level="QA_ERROR" help="doc-en_US/doc/messages/0248.html" severity="9">
   <text>'%1s' may not be redeclared in the current scope, ignoring redeclaration.</text>
   <references>
      </references>
  </message>
  <message id="0249" level="QA_WARNING" help="doc-en_US/doc/messages/0249.html" severity="6">
   <text>'%1s' is not a legal switch conditional type.</text>
   <references>
      </references>
  </message>
  <message id="0250" level="QA_WARNING" help="doc-en_US/doc/messages/0250.html" severity="6">
   <text>The case label expression should be a constant integral expression.</text>
   <references>
    <reference source="ISO C++ Language [6.4.2]"/>
   </references>
  </message>
  <message id="0251" level="QA_ERROR" help="doc-en_US/doc/messages/0251.html" severity="9">
   <text>'%1s' is not complete, continuing in outer scope.</text>
   <references>
    <reference source="ISO C++ Language [9.2/2]"/>
    <reference source="ISO C++ Language [3.9/6]"/>
   </references>
  </message>
  <message id="0252" level="QA_WARNING" help="doc-en_US/doc/messages/0252.html" severity="9">
   <text>Cannot create an array with elements of array type with unknown size.</text>
   <references>
    <reference source="ISO C++ Language [8.3.4/3]"/>
   </references>
  </message>
  <message id="0253" level="QA_ERROR" help="doc-en_US/doc/messages/0253.html" severity="9">
   <text>Too many initializers provided for direct initialization.</text>
   <references>
      </references>
  </message>
  <message id="0254" level="QA_WARNING" help="doc-en_US/doc/messages/0254.html" severity="9">
   <text>Invalid Declaration (ignoring):</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0255" level="QA_ERROR" help="doc-en_US/doc/messages/0255.html" severity="9">
   <text>Invalid Definition (continuing in outer scope):</text>
   <references>
      </references>
  </message>
  <message id="0256" level="QA_WARNING" help="doc-en_US/doc/messages/0256.html" severity="9">
   <text>Anonymous member %1s already declared.</text>
   <references>
      </references>
  </message>
  <message id="0257" level="QA_ERROR" help="doc-en_US/doc/messages/0257.html" severity="9">
   <text>The name '%1s', before '::', in the ptr to member declaration must be a class type.</text>
   <references>
    <reference source="ISO C++ Language [8.3.3.]"/>
   </references>
  </message>
  <message id="0258" level="QA_WARNING" help="doc-en_US/doc/messages/0258.html" severity="6">
   <text>The scope 'std' is not yet declared.</text>
   <references>
      </references>
  </message>
  <message id="0259" level="QA_WARNING" help="doc-en_US/doc/messages/0259.html" severity="6">
   <text>The type 'std::bad_alloc' is not yet declared.</text>
   <references>
      </references>
  </message>
  <message id="0260" level="QA_WARNING" help="doc-en_US/doc/messages/0260.html" severity="6">
   <text>Type name '%1s' is not qualified and does not need the typename keyword.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item42]"/>
   </references>
  </message>
  <message id="0261" level="QA_WARNING" help="doc-en_US/doc/messages/0261.html" severity="6">
   <text>'%1s' found by lookup in '%2s', the typename keyword is not required.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item42]"/>
   </references>
  </message>
  <message id="0262" level="QA_WARNING" help="doc-en_US/doc/messages/0262.html" severity="6">
   <text>Explicit template arguments are illegal for '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0263" level="QA_WARNING" help="doc-en_US/doc/messages/0263.html" severity="6">
   <text>Friend declarations cannot declare partial specializations.</text>
   <references>
    <reference source="ISO C++ Language [14.5.3/9]"/>
   </references>
  </message>
  <message id="0264" level="QA_WARNING" help="doc-en_US/doc/messages/0264.html" severity="6">
   <text>Parameter %1s is considered a template in this scope.</text>
   <references>
    <reference source="ISO C++ Language [14.6.1/1]"/>
   </references>
  </message>
  <message id="0265" level="QA_WARNING" help="doc-en_US/doc/messages/0265.html" severity="6">
   <text>Parameter %1s is considered a type in this scope.</text>
   <references>
    <reference source="ISO C++ Language [14.6.1/1]"/>
   </references>
  </message>
  <message id="0266" level="QA_WARNING" help="doc-en_US/doc/messages/0266.html" severity="9">
   <text>Invalid template non-type argument '%1s', attempting to recover.</text>
   <references>
    <reference source="ISO C++ Language [14.3.2]"/>
   </references>
  </message>
  <message id="0267" level="QA_WARNING" help="doc-en_US/doc/messages/0267.html" severity="6">
   <text>Cannot declare an explicit class specialization as a member of a class template in an enclosing scope.</text>
   <references>
    <reference source="ISO C++ Language [14.7.3]"/>
   </references>
  </message>
  <message id="0268" level="QA_WARNING" help="doc-en_US/doc/messages/0268.html" severity="6">
   <text>Cannot declare an explicit function specialization as a member of a class template in an enclosing scope.</text>
   <references>
    <reference source="ISO C++ Language [14.7.3]"/>
   </references>
  </message>
  <message id="0269" level="QA_WARNING" help="doc-en_US/doc/messages/0269.html" severity="6">
   <text>'%1s' cannot be explicit instantiated.</text>
   <references>
      </references>
  </message>
  <message id="0270" level="QA_WARNING" help="doc-en_US/doc/messages/0270.html" severity="6">
   <text>Passing the minimum required recursive template instantiation depth: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0271" level="QA_ERROR" help="doc-en_US/doc/messages/0271.html" severity="9">
   <text>Passing the configured maximum recursive template instantiation depth: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0273" level="QA_WARNING" help="doc-en_US/doc/messages/0273.html" severity="9">
   <text>Too few template parameter scopes.</text>
   <references>
    <reference source="ISO C++ Language [14.7.3]"/>
   </references>
  </message>
  <message id="0274" level="QA_WARNING" help="doc-en_US/doc/messages/0274.html" severity="9">
   <text>'%1s' must be a template and be explicitly specialized using a 'template-id'.</text>
   <references>
    <reference source="ISO C++ Language [14.7.3]"/>
   </references>
  </message>
  <message id="0275" level="QA_WARNING" help="doc-en_US/doc/messages/0275.html" severity="9">
   <text>Parameter %1s is a template, attempting to recover with '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [14.6.1/1]"/>
   </references>
  </message>
  <message id="0276" level="QA_ERROR" help="doc-en_US/doc/messages/0276.html" severity="9">
   <text>Entity referred to by '%1s' failed to instantiate.</text>
   <references>
    <reference source="ISO C++ Language [7.3.3/4]"/>
    <reference source="ISO C++ Language [14.6.2.2]"/>
   </references>
  </message>
  <message id="0277" level="QA_WARNING" help="doc-en_US/doc/messages/0277.html" severity="6">
   <text>'%1s' should be preceded by one of: class, struct, union or enum.</text>
   <references>
    <reference source="ISO C++ Language [3.3.7]"/>
    <reference source="ISO C++ Language [7.1.5.3]"/>
   </references>
  </message>
  <message id="0278" level="QA_ERROR" help="doc-en_US/doc/messages/0278.html" severity="9">
   <text>All of the parameter packs in a pack expansion shall have the same number of arguments specified.</text>
   <references>
    <reference source="ISO C++ Language [14.5.3]"/>
   </references>
  </message>
  <message id="0279" level="QA_ERROR" help="doc-en_US/doc/messages/0279.html" severity="9">
   <text>This parameter pack is not expanded.</text>
   <references>
      </references>
  </message>
  <message id="0280" level="QA_WARNING" help="doc-en_US/doc/messages/0280.html" severity="9">
   <text>Class '%1s' is not a base class in member using declaration.</text>
   <references>
      </references>
  </message>
  <message id="0281" level="QA_WARNING" help="doc-en_US/doc/messages/0281.html" severity="9">
   <text>Expecting nested name '%1s' to be a base class, or for '%2s' to be an enumerator in member using declaration.</text>
   <references>
      </references>
  </message>
  <message id="0282" level="QA_ERROR" help="doc-en_US/doc/messages/0282.html" severity="9">
   <text>Type '%1s' cannot have a scope.</text>
   <references>
      </references>
  </message>
  <message id="0283" level="QA_WARNING" help="doc-en_US/doc/messages/0283.html" severity="9">
   <text>Using declarations for class members shall be class member declarations.</text>
   <references>
    <reference source="ISO C++ Language [7.3.3/6]"/>
   </references>
  </message>
  <message id="0284" level="QA_ERROR" help="doc-en_US/doc/messages/0284.html" severity="9">
   <text>'%1s' is not a namespace or class.</text>
   <references>
      </references>
  </message>
  <message id="0285" level="QA_ERROR" help="doc-en_US/doc/messages/0285.html" severity="9">
   <text>'%1s' is not a namespace or class in '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0286" level="QA_ERROR" help="doc-en_US/doc/messages/0286.html" severity="9">
   <text>'%1s' is not a class template.</text>
   <references>
      </references>
  </message>
  <message id="0287" level="QA_ERROR" help="doc-en_US/doc/messages/0287.html" severity="9">
   <text>'%1s' is not a class template in '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0288" level="QA_WARNING" help="doc-en_US/doc/messages/0288.html" severity="6">
   <text>This qualified member initializer is not a class.</text>
   <references>
      </references>
  </message>
  <message id="0289" level="QA_WARNING" help="doc-en_US/doc/messages/0289.html" severity="9">
   <text>Cannot declare an enum template, continuing with non template.</text>
   <references>
      </references>
  </message>
  <message id="0290" level="QA_WARNING" help="doc-en_US/doc/messages/0290.html" severity="9">
   <text>Cannot create an array with elements of type abstract class.</text>
   <references>
    <reference source="ISO C++ Language [8.3.4/1]"/>
   </references>
  </message>
  <message id="0291" level="QA_WARNING" help="doc-en_US/doc/messages/0291.html" severity="9">
   <text>Cannot declare a namespace template.</text>
   <references>
      </references>
  </message>
  <message id="0292" level="QA_WARNING" help="doc-en_US/doc/messages/0292.html" severity="9">
   <text>Could not convert expression of type '%1s' to type '%2s', recovering by inserting c-style cast.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0293" level="QA_WARNING" help="doc-en_US/doc/messages/0293.html" severity="9">
   <text>Undefined behavior: '%1s' declared with internal and external linkage.</text>
   <references>
    <reference source="ISO C++ Language [3.5/6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0294" level="QA_WARNING" help="doc-en_US/doc/messages/0294.html" severity="6">
   <text>Unexpected brace found in initializer, recovering by ignoring it.</text>
   <references>
      </references>
  </message>
  <message id="0295" level="QA_WARNING" help="doc-en_US/doc/messages/0295.html" severity="6">
   <text>This static member has the same name as the class it is a member of.</text>
   <references>
    <reference source="ISO C++ Language [9.2/13]"/>
   </references>
  </message>
  <message id="0296" level="QA_WARNING" help="doc-en_US/doc/messages/0296.html" severity="6">
   <text>This type member has the same name as the class it is a member of.</text>
   <references>
    <reference source="ISO C++ Language [9.2/13]"/>
   </references>
  </message>
  <message id="0297" level="QA_WARNING" help="doc-en_US/doc/messages/0297.html" severity="6">
   <text>This enumerator has the same name as the enclosing class.</text>
   <references>
    <reference source="ISO C++ Language [9.2/13]"/>
   </references>
  </message>
  <message id="0298" level="QA_WARNING" help="doc-en_US/doc/messages/0298.html" severity="6">
   <text>This member of an anonymous union has the same name as the enclosing class.</text>
   <references>
    <reference source="ISO C++ Language [9.2/13]"/>
   </references>
  </message>
  <message id="0299" level="QA_WARNING" help="doc-en_US/doc/messages/0299.html" severity="6">
   <text>This member has the same name as the class it is a member of and there is a user declared constructor.</text>
   <references>
    <reference source="ISO C++ Language [9.2/13]"/>
   </references>
  </message>
  <message id="0300" level="QA_WARNING" help="doc-en_US/doc/messages/0300.html" severity="6">
   <text>Enum name not valid as part of nested qualified scope in C++ '03.</text>
   <references>
    <reference source="ISO 2011 C++ Language [[dcl.enum#11]]"/>
   </references>
  </message>
  <message id="0301" level="QA_WARNING" help="doc-en_US/doc/messages/0301.html" severity="6">
   <text>Invalid type '%1s' for bitfield, recovering with '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [9.6/3]"/>
   </references>
  </message>
  <message id="0302" level="QA_WARNING" help="doc-en_US/doc/messages/0302.html" severity="9">
   <text>Parameter '%1s' already appears, recovering with unnamed parameter.</text>
   <references>
    <reference source="ISO C++ Language [3.2]"/>
   </references>
  </message>
  <message id="0303" level="QA_WARNING" help="doc-en_US/doc/messages/0303.html" severity="8">
   <text>An expression was expected, recovering with call to default constructor.</text>
   <references>
      </references>
  </message>
  <message id="0304" level="QA_WARNING" help="doc-en_US/doc/messages/0304.html" severity="9">
   <text>An initializer is required for placeholder type deduction, recovering using '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0305" level="QA_WARNING" help="doc-en_US/doc/messages/0305.html" severity="8">
   <text>A single initializer is required for auto type deduction.</text>
   <references>
      </references>
  </message>
  <message id="0306" level="QA_ERROR" help="doc-en_US/doc/messages/0306.html" severity="9">
   <text>Failed to deduce auto type from initializer.</text>
   <references>
      </references>
  </message>
  <message id="0307" level="QA_ERROR" help="doc-en_US/doc/messages/0307.html" severity="9">
   <text>'%1s' is not an integral type.</text>
   <references>
      </references>
  </message>
  <message id="0308" level="QA_WARNING" help="doc-en_US/doc/messages/0308.html" severity="9">
   <text>Enumeration '%1s' was previously declared as scoped.</text>
   <references>
      </references>
  </message>
  <message id="0309" level="QA_WARNING" help="doc-en_US/doc/messages/0309.html" severity="9">
   <text>Enumeration '%1s' was previously declared as unscoped.</text>
   <references>
      </references>
  </message>
  <message id="0310" level="QA_WARNING" help="doc-en_US/doc/messages/0310.html" severity="9">
   <text>Enumeration '%1s' was previously declared with a different underlying type.</text>
   <references>
      </references>
  </message>
  <message id="0311" level="QA_WARNING" help="doc-en_US/doc/messages/0311.html" severity="9">
   <text>Unnamed parameter at position '%1s' is not complete.</text>
   <references>
    <reference source="ISO C++ Language [9.2/2]"/>
    <reference source="ISO C++ Language [3.9/6]"/>
   </references>
  </message>
  <message id="0312" level="QA_WARNING" help="doc-en_US/doc/messages/0312.html" severity="9">
   <text>Static member functions may not have a reference qualification.</text>
   <references>
    <reference source="ISO C++ Language [9.3.1/5]"/>
   </references>
  </message>
  <message id="0313" level="QA_ERROR" help="doc-en_US/doc/messages/0313.html" severity="9">
   <text>Cannot form pointer to reference type.</text>
   <references>
    <reference source="ISO C++ Language [8.3.2/5]"/>
   </references>
  </message>
  <message id="0314" level="QA_WARNING" help="doc-en_US/doc/messages/0314.html" severity="6">
   <text>'%1s' is an alias template and cannot be preceded by class or enum.</text>
   <references>
    <reference source="ISO C++ Language [7.1.6.3]"/>
   </references>
  </message>
  <message id="0315" level="QA_WARNING" help="doc-en_US/doc/messages/0315.html" severity="6">
   <text>The noexcept specification must be a constant value, using noexcept(false).</text>
   <references>
    <reference source="ISO C++ Language [15.4]"/>
   </references>
  </message>
  <message id="0316" level="QA_WARNING" help="doc-en_US/doc/messages/0316.html" severity="6">
   <text>Explicit exception specification for '%1s', differs from implicit exception specification of defaulted function.</text>
   <references>
    <reference source="ISO C++ Language [8.4.2]"/>
   </references>
  </message>
  <message id="0317" level="QA_WARNING" help="doc-en_US/doc/messages/0317.html" severity="6">
   <text>Member initialization list cannot delegate and initialize. Member initializer ignored.</text>
   <references>
    <reference source="ISO 2011 C++ Language [12.6.2]"/>
   </references>
  </message>
  <message id="0318" level="QA_WARNING" help="doc-en_US/doc/messages/0318.html" severity="6">
   <text>Member initialization list cannot initialize and delegate.  Call to delegate ignored.</text>
   <references>
    <reference source="ISO 2011 C++ Language [12.6.2]"/>
   </references>
  </message>
  <message id="0319" level="QA_WARNING" help="doc-en_US/doc/messages/0319.html" severity="6">
   <text>Illegal function template default template argument for friend function, ignoring default.</text>
   <references>
    <reference source="ISO C++ Language [14.1/9]"/>
   </references>
  </message>
  <message id="0320" level="QA_ERROR" help="doc-en_US/doc/messages/0320.html" severity="9">
   <text>Pattern type '%1s' is not expandable.</text>
   <references>
      </references>
  </message>
  <message id="0321" level="QA_ERROR" help="doc-en_US/doc/messages/0321.html" severity="9">
   <text>Pattern expression is not expandable.</text>
   <references>
      </references>
  </message>
  <message id="0322" level="QA_ERROR" help="doc-en_US/doc/messages/0322.html" severity="9">
   <text>Pattern template is not expandable.</text>
   <references>
      </references>
  </message>
  <message id="0323" level="QA_ERROR" help="doc-en_US/doc/messages/0323.html" severity="9">
   <text>This pack expansion is used as an argument to a non-pack parameter of an alias template.</text>
   <references>
      </references>
  </message>
  <message id="0324" level="QA_ERROR" help="doc-en_US/doc/messages/0324.html" severity="9">
   <text>This fold expression expands to an empty expression set.</text>
   <references>
      </references>
  </message>
  <message id="0325" level="QA_ERROR" help="doc-en_US/doc/messages/0325.html" severity="9">
   <text>This binary fold expression contains packs in both expressions.</text>
   <references>
      </references>
  </message>
  <message id="0326" level="QA_ERROR" help="doc-en_US/doc/messages/0326.html" severity="9">
   <text>The type '%1s' in this deduction guide is not a specialization of the template class.</text>
   <references>
      </references>
  </message>
  <message id="0327" level="QA_WARNING" help="doc-en_US/doc/messages/0327.html" severity="6">
   <text>'%1s' is not a member of the current instantiation, recovering with lookup at instantiation.</text>
   <references>
    <reference source="ISO 2011 C++ Language [14.6.2.1/4]"/>
   </references>
  </message>
  <message id="0328" level="QA_WARNING" help="doc-en_US/doc/messages/0328.html" severity="6">
   <text>Cannot declare an explicit variable specialization as a member of a class template in an enclosing scope.</text>
   <references>
    <reference source="ISO C++ Language [14.7.3]"/>
   </references>
  </message>
  <message id="0329" level="QA_ERROR" help="doc-en_US/doc/messages/0329.html" severity="9">
   <text>Unable to create specialization of template.</text>
   <references>
      </references>
  </message>
  <message id="0330" level="QA_WARNING" help="doc-en_US/doc/messages/0330.html" severity="6">
   <text>No underlying type can represent all the enumerator values. Using long long.</text>
   <references>
    <reference source="ISO 2011 C++ Language [7.2/6]"/>
   </references>
  </message>
  <message id="0331" level="QA_WARNING" help="doc-en_US/doc/messages/0331.html" severity="6">
   <text>This inline namespace was previously declared as a non-inline namespace.</text>
   <references>
    <reference source="ISO 2011 C++ Language [7.3.1/7]"/>
   </references>
  </message>
  <message id="0332" level="QA_WARNING" help="doc-en_US/doc/messages/0332.html" severity="6">
   <text>This initializer is not a constant expression.</text>
   <references>
    <reference source="ISO C++ Language [9.4.2]"/>
   </references>
  </message>
  <message id="0333" level="QA_ERROR" help="doc-en_US/doc/messages/0333.html" severity="9">
   <text>Cannot capture non-object '%1s'.</text>
   <references>
    <reference source="ISO 2011 C++ Language [5.1.2]"/>
   </references>
  </message>
  <message id="0334" level="QA_ERROR" help="doc-en_US/doc/messages/0334.html" severity="9">
   <text>Cannot capture non-local object '%1s'.</text>
   <references>
    <reference source="ISO 2011 C++ Language [5.1.2]"/>
   </references>
  </message>
  <message id="0335" level="QA_ERROR" help="doc-en_US/doc/messages/0335.html" severity="9">
   <text>The deduced type '%1s' is different to the previously deduced type '%2s'</text>
   <references>
    <reference source="ISO 2014 C++ Language [7.1.6.4]"/>
   </references>
  </message>
  <message id="0336" level="QA_ERROR" help="doc-en_US/doc/messages/0336.html" severity="9">
   <text>'%1s' is not in the reaching scope.</text>
   <references>
    <reference source="ISO 2011 C++ Language [5.1.2]"/>
   </references>
  </message>
  <message id="0337" level="QA_WARNING" help="doc-en_US/doc/messages/0337.html" severity="9">
   <text>A static_assert declaration may only be used with a compile time constant.</text>
   <references>
    <reference source="ISO 2011 C++ Language [7]"/>
   </references>
  </message>
  <message id="0338" level="QA_WARNING" help="doc-en_US/doc/messages/0338.html" severity="9">
   <text>This static assertion failed: '%1s'</text>
   <references>
    <reference source="ISO 2011 C++ Language [7]"/>
   </references>
  </message>
  <message id="0339" level="QA_ERROR" help="doc-en_US/doc/messages/0339.html" severity="9">
   <text>Critical error in initialization.</text>
   <references>
      </references>
  </message>
  <message id="0340" level="QA_WARNING" help="doc-en_US/doc/messages/0340.html" severity="5">
   <text>The 'thread_local' declaration specifier does not appear in all declarations of '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0341" level="QA_WARNING" help="doc-en_US/doc/messages/0341.html" severity="5">
   <text>Non static member declared with 'thread_local' declaration specifier.</text>
   <references>
      </references>
  </message>
  <message id="0342" level="QA_WARNING" help="doc-en_US/doc/messages/0342.html" severity="5">
   <text>Designator '%1s' is not a non static member of '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0343" level="QA_WARNING" help="doc-en_US/doc/messages/0343.html" severity="5">
   <text>Designator '%1s' has already been used.</text>
   <references>
      </references>
  </message>
  <message id="0344" level="QA_WARNING" help="doc-en_US/doc/messages/0344.html" severity="5">
   <text>Designator used to initialize an array object.</text>
   <references>
      </references>
  </message>
  <message id="0345" level="QA_WARNING" help="doc-en_US/doc/messages/0345.html" severity="5">
   <text>Designator used to initialize a non aggregate class object.</text>
   <references>
      </references>
  </message>
  <message id="0346" level="QA_WARNING" help="doc-en_US/doc/messages/0346.html" severity="5">
   <text>Member for designator '%1s' already initialized.</text>
   <references>
      </references>
  </message>
  <message id="0347" level="QA_WARNING" help="doc-en_US/doc/messages/0347.html" severity="5">
   <text>Initializer contains mixture of designated and non designated elements.</text>
   <references>
      </references>
  </message>
  <message id="0348" level="QA_WARNING" help="doc-en_US/doc/messages/0348.html" severity="5">
   <text>Member '%1s' not initialized in 'constexpr' constructor.</text>
   <references>
      </references>
  </message>
  <message id="0349" level="QA_WARNING" help="doc-en_US/doc/messages/0349.html" severity="9">
   <text>The condition in a 'constexpr if' statement must be a compile time constant.</text>
   <references>
    <reference source="ISO 2017 C++ Language [9.4.1]"/>
   </references>
  </message>
  <message id="0350" level="QA_ERROR" help="doc-en_US/doc/messages/0350.html" severity="9">
   <text>Failed to deduce class template arguments.</text>
   <references>
    <reference source="ISO 2017 C++ Language [17.8.2]"/>
   </references>
  </message>
  <message id="0351" level="QA_ERROR" help="doc-en_US/doc/messages/0351.html" severity="9">
   <text>Cannot form compound type from placeholder type '%1s'.</text>
   <references>
    <reference source="ISO 2017 C++ Language [10.1.7]"/>
   </references>
  </message>
  <message id="0352" level="QA_ERROR" help="doc-en_US/doc/messages/0352.html" severity="9">
   <text>Default member initializer not yet available.</text>
   <references>
      </references>
  </message>
  <message id="0353" level="QA_ERROR" help="doc-en_US/doc/messages/0353.html" severity="9">
   <text>Number of identifiers %3s does not match number of elements %2s in structured binding declaration for type '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0354" level="QA_ERROR" help="doc-en_US/doc/messages/0354.html" severity="9">
   <text>Type '%1s' is not decomposable, ignoring declaration.</text>
   <references>
      </references>
  </message>
  <message id="0355" level="QA_ERROR" help="doc-en_US/doc/messages/0355.html" severity="9">
   <text>Cannot declare a structured binding with non-class type '%1s'</text>
   <references>
      </references>
  </message>
  <message id="0356" level="QA_ERROR" help="doc-en_US/doc/messages/0356.html" severity="9">
   <text>Cannot form a reference to 'void'.</text>
   <references>
    <reference source="ISO C++ Language [8.3.2/1]"/>
   </references>
  </message>
  <message id="0357" level="QA_ERROR" help="doc-en_US/doc/messages/0357.html" severity="9">
   <text>Argument to alignas must be const integral expression. Recovering with '%1s'</text>
   <references>
    <reference source="ISO 2017 C++ Language [9.4.1]"/>
   </references>
  </message>
  <message id="0358" level="QA_ERROR" help="doc-en_US/doc/messages/0358.html" severity="9">
   <text>Object cannot have function type, recovering with '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [14.3.1/3]"/>
    <reference source="ISO 2017 C++ Language [17.7/7]"/>
   </references>
  </message>
  <message id="0359" level="QA_WARNING" help="doc-en_US/doc/messages/0359.html" severity="6">
   <text>The type 'std::align_val_t' is not yet declared.</text>
   <references>
      </references>
  </message>
  <message id="0360" level="QA_ERROR" help="doc-en_US/doc/messages/0360.html" severity="9">
   <text>'std::%1s' requires that 'compare' be included.</text>
   <references>
      </references>
  </message>
  <message id="0361" level="QA_INFORMATION" help="doc-en_US/doc/messages/0361.html" severity="6">
   <text>This member comparison operator cannot be declared '=default'.</text>
   <references>
    <reference source="ISO 2020 C++ Language [11.11]"/>
   </references>
  </message>
  <message id="0362" level="QA_INFORMATION" help="doc-en_US/doc/messages/0362.html" severity="6">
   <text>Equality or relation operator defined '=default' does not return bool.</text>
   <references>
    <reference source="ISO 2020 C++ Language [11.11]"/>
   </references>
  </message>
  <message id="0363" level="QA_INFORMATION" help="doc-en_US/doc/messages/0363.html" severity="6">
   <text>This comparison operator cannot be declared '=default'.</text>
   <references>
    <reference source="ISO 2020 C++ Language [11.11]"/>
   </references>
  </message>
  <message id="0364" level="QA_WARNING" help="doc-en_US/doc/messages/0364.html" severity="6">
   <text>'requires-clause' is not allowed.</text>
   <references>
    <reference source="ISO 2020 C++ Language [dcl.decl.general]"/>
   </references>
  </message>
  <message id="0365" level="QA_WARNING" help="doc-en_US/doc/messages/0365.html" severity="6">
   <text>A concept can only be defined at namespace scope.</text>
   <references>
    <reference source="ISO 2020 C++ Language [temp.concept]"/>
   </references>
  </message>
  <message id="0366" level="QA_WARNING" help="doc-en_US/doc/messages/0366.html" severity="8">
   <text>Syntax error in '#embed' directive.</text>
   <references>
      </references>
  </message>
  <message id="0367" level="QA_WARNING" help="doc-en_US/doc/messages/0367.html" severity="7">
   <text>Unknown parameter '%1s' to '#embed' directive.</text>
   <references>
      </references>
  </message>
  <message id="0368" level="QA_WARNING" help="doc-en_US/doc/messages/0368.html" severity="6">
   <text>Cannot find or open binary resource file '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0400" level="QA_ERROR" help="doc-en_US/doc/messages/0400.html" severity="9">
   <text>'%1s' is not declared.</text>
   <references>
      </references>
  </message>
  <message id="0401" level="QA_ERROR" help="doc-en_US/doc/messages/0401.html" severity="9">
   <text>Entity is not an expression.</text>
   <references>
      </references>
  </message>
  <message id="0403" level="QA_ERROR" help="doc-en_US/doc/messages/0403.html" severity="9">
   <text>No matching functions, arguments were '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0404" level="QA_ERROR" help="doc-en_US/doc/messages/0404.html" severity="9">
   <text>Ambiguous call to overloaded function, arguments were '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [13.3]"/>
   </references>
  </message>
  <message id="0405" level="QA_ERROR" help="doc-en_US/doc/messages/0405.html" severity="9">
   <text>Object expression does not have class type.</text>
   <references>
      </references>
  </message>
  <message id="0406" level="QA_ERROR" help="doc-en_US/doc/messages/0406.html" severity="9">
   <text>Non-static member used without object.</text>
   <references>
      </references>
  </message>
  <message id="0407" level="QA_ERROR" help="doc-en_US/doc/messages/0407.html" severity="9">
   <text>No matching 'operator new' call.'.</text>
   <references>
      </references>
  </message>
  <message id="0408" level="QA_WARNING" help="doc-en_US/doc/messages/0408.html" severity="8">
   <text>Class type argument with no value used in constant evaluation of function call.</text>
   <references>
      </references>
  </message>
  <message id="0415" level="QA_ERROR" help="doc-en_US/doc/messages/0415.html" severity="9">
   <text>'this' used outside non-static member function.</text>
   <references>
      </references>
  </message>
  <message id="0416" level="QA_ERROR" help="doc-en_US/doc/messages/0416.html" severity="7">
   <text>'this' used in the declaration of a static member function.</text>
   <references>
      </references>
  </message>
  <message id="0417" level="QA_WARNING" help="doc-en_US/doc/messages/0417.html" severity="7">
   <text>'this' used in the declaration of a typedef.</text>
   <references>
      </references>
  </message>
  <message id="0422" level="QA_INFORMATION" help="doc-en_US/doc/messages/0422.html" severity="0">
   <text>Operand is not an lvalue.</text>
   <references>
    <reference source="ISO C++ Language [3.10]"/>
   </references>
  </message>
  <message id="0424" level="QA_ERROR" help="doc-en_US/doc/messages/0424.html" severity="9">
   <text>No conversion from type '%1s' to left-hand type '%2s' in assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0429" level="QA_ERROR" help="doc-en_US/doc/messages/0429.html" severity="9">
   <text>Operand does not have function or pointer-to-function type.</text>
   <references>
      </references>
  </message>
  <message id="0435" level="QA_WARNING" help="doc-en_US/doc/messages/0435.html" severity="8">
   <text>Division by zero, the behavior is undefined.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="ISO C++ Language [5/5]"/>
   </references>
  </message>
  <message id="0439" level="QA_ERROR" help="doc-en_US/doc/messages/0439.html" severity="9">
   <text>Operator function is not declared.</text>
   <references>
      </references>
  </message>
  <message id="0440" level="QA_ERROR" help="doc-en_US/doc/messages/0440.html" severity="9">
   <text>Conversion function is not declared.</text>
   <references>
      </references>
  </message>
  <message id="0441" level="QA_ERROR" help="doc-en_US/doc/messages/0441.html" severity="9">
   <text>Entity is not a member of object.</text>
   <references>
      </references>
  </message>
  <message id="0444" level="QA_WARNING" help="doc-en_US/doc/messages/0444.html" severity="8">
   <text>Conversion from '%1s' to '%2s' requires narrowing.</text>
   <references>
      </references>
  </message>
  <message id="0445" level="QA_ERROR" help="doc-en_US/doc/messages/0445.html" severity="9">
   <text>Conversion from '%1s' to '%2s' is ambiguous, ignoring expression.</text>
   <references>
      </references>
  </message>
  <message id="0446" level="QA_WARNING" help="doc-en_US/doc/messages/0446.html" severity="6">
   <text>No hex digits following x in character literal, will assume 0.</text>
   <references>
    <reference source="ISO C++ Language [2.13.2/4]"/>
   </references>
  </message>
  <message id="0447" level="QA_WARNING" help="doc-en_US/doc/messages/0447.html" severity="6">
   <text>Invalid escape character in character literal.</text>
   <references>
    <reference source="ISO C++ Language [2.13.2/3]"/>
   </references>
  </message>
  <message id="0448" level="QA_ERROR" help="doc-en_US/doc/messages/0448.html" severity="9">
   <text>Too many arguments in function style cast (zero or one expected).</text>
   <references>
    <reference source="ISO C++ Language [5.2.3]"/>
   </references>
  </message>
  <message id="0450" level="QA_ERROR" help="doc-en_US/doc/messages/0450.html" severity="9">
   <text>Invalid arguments to operator.</text>
   <references>
    <reference source="ISO C++ Language [5]"/>
   </references>
  </message>
  <message id="0451" level="QA_ERROR" help="doc-en_US/doc/messages/0451.html" severity="9">
   <text>Invalid argument to '%1s' operator.</text>
   <references>
    <reference source="ISO C++ Language [5.3.3]"/>
   </references>
  </message>
  <message id="0453" level="QA_ERROR" help="doc-en_US/doc/messages/0453.html" severity="9">
   <text>Ambiguous reference to overloaded function.</text>
   <references>
    <reference source="ISO C++ Language [13.4]"/>
   </references>
  </message>
  <message id="0454" level="QA_ERROR" help="doc-en_US/doc/messages/0454.html" severity="9">
   <text>Destructor is not declared.</text>
   <references>
      </references>
  </message>
  <message id="0455" level="QA_ERROR" help="doc-en_US/doc/messages/0455.html" severity="9">
   <text>Null array size in call to operator new.</text>
   <references>
      </references>
  </message>
  <message id="0456" level="QA_ERROR" help="doc-en_US/doc/messages/0456.html" severity="9">
   <text>Cannot determine which overload of '%1s' to use.</text>
   <references>
      </references>
  </message>
  <message id="0457" level="QA_ERROR" help="doc-en_US/doc/messages/0457.html" severity="9">
   <text>A function or pointer to function may not be deleted</text>
   <references>
      </references>
  </message>
  <message id="0458" level="QA_ERROR" help="doc-en_US/doc/messages/0458.html" severity="9">
   <text>Could not convert instantiated expression to type '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0459" level="QA_ERROR" help="doc-en_US/doc/messages/0459.html" severity="9">
   <text>Can't call constructor explicitly, instead use placement new.</text>
   <references>
    <reference source="ISO C++ Language [12.1/2]"/>
    <reference source="ISO C++ Language [5.2.3]"/>
   </references>
  </message>
  <message id="0460" level="QA_WARNING" help="doc-en_US/doc/messages/0460.html" severity="4">
   <text>Illegal conversion from temporary to non const reference.</text>
   <references>
    <reference source="ISO C++ Language [12.2]"/>
    <reference source="ISO C++ Language [3.10]"/>
   </references>
  </message>
  <message id="0461" level="QA_WARNING" help="doc-en_US/doc/messages/0461.html" severity="9">
   <text>dynamic_cast type should be pointer or reference to a complete type or pointer to void</text>
   <references>
    <reference source="ISO C++ Language [5.2.7/1]"/>
   </references>
  </message>
  <message id="0462" level="QA_WARNING" help="doc-en_US/doc/messages/0462.html" severity="6">
   <text>Do not call or take the address of global main</text>
   <references>
    <reference source="ISO C++ Language [3.6.1]"/>
   </references>
  </message>
  <message id="0464" level="QA_WARNING" help="doc-en_US/doc/messages/0464.html" severity="6">
   <text>String literal does not convert to void *.</text>
   <references>
    <reference source="ISO C++ Language [2.13.4/1]"/>
    <reference source="ISO C++ Language [4.2/2]"/>
   </references>
  </message>
  <message id="0465" level="QA_WARNING" help="doc-en_US/doc/messages/0465.html" severity="6">
   <text>Cannot copy initialize type with expression.</text>
   <references>
    <reference source="ISO C++ Language [12.3.1/2]"/>
   </references>
  </message>
  <message id="0466" level="QA_WARNING" help="doc-en_US/doc/messages/0466.html" severity="6">
   <text>Using old ISO lookup rules to find this id.</text>
   <references>
      </references>
  </message>
  <message id="0467" level="QA_WARNING" help="doc-en_US/doc/messages/0467.html" severity="6">
   <text>ISO lookup rules will not find '%1s', recovering with lookup at instantiation.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item43]"/>
   </references>
  </message>
  <message id="0468" level="QA_WARNING" help="doc-en_US/doc/messages/0468.html" severity="6">
   <text>ISO lookup rules will not find this operator here, attempting to find by delayed lookup.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item43]"/>
   </references>
  </message>
  <message id="0469" level="QA_ERROR" help="doc-en_US/doc/messages/0469.html" severity="9">
   <text>'%2s' is not declared in '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [3.4.5]"/>
   </references>
  </message>
  <message id="0470" level="QA_WARNING" help="doc-en_US/doc/messages/0470.html" severity="6">
   <text>Call is ambiguous when rewritten candidates included, arguments were '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [13.3]"/>
   </references>
  </message>
  <message id="0471" level="QA_WARNING" help="doc-en_US/doc/messages/0471.html" severity="6">
   <text>Number is too big for largest integral data type</text>
   <references>
      </references>
  </message>
  <message id="0472" level="QA_WARNING" help="doc-en_US/doc/messages/0472.html" severity="6">
   <text>The underlying type cannot represent all values.</text>
   <references>
      </references>
  </message>
  <message id="0473" level="QA_WARNING" help="doc-en_US/doc/messages/0473.html" severity="6">
   <text>This literal is implicitly of the non standard type 'long long'</text>
   <references>
      </references>
  </message>
  <message id="0474" level="QA_WARNING" help="doc-en_US/doc/messages/0474.html" severity="6">
   <text>This literal is of the non standard type 'long long'</text>
   <references>
      </references>
  </message>
  <message id="0475" level="QA_WARNING" help="doc-en_US/doc/messages/0475.html" severity="6">
   <text>This literal is implicitly of the non standard type 'unsigned long long'</text>
   <references>
      </references>
  </message>
  <message id="0476" level="QA_WARNING" help="doc-en_US/doc/messages/0476.html" severity="6">
   <text>This literal is of the non standard type 'unsigned long long'</text>
   <references>
      </references>
  </message>
  <message id="0479" level="QA_WARNING" help="doc-en_US/doc/messages/0479.html" severity="6">
   <text>This function call was resolved with recovery lookup.</text>
   <references>
      </references>
  </message>
  <message id="0480" level="QA_WARNING" help="doc-en_US/doc/messages/0480.html" severity="9">
   <text>Incomplete class to operand of typeid, recovering with '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0481" level="QA_ERROR" help="doc-en_US/doc/messages/0481.html" severity="9">
   <text>'class' operand to delete is not contextually implicitly convertible to a pointer to object type.</text>
   <references>
      </references>
  </message>
  <message id="0482" level="QA_ERROR" help="doc-en_US/doc/messages/0482.html" severity="9">
   <text>Operand to delete does not have pointer type or is not a complete class.</text>
   <references>
      </references>
  </message>
  <message id="0483" level="QA_ERROR" help="doc-en_US/doc/messages/0483.html" severity="9">
   <text>No suitable 'operator delete' found.</text>
   <references>
      </references>
  </message>
  <message id="0484" level="QA_ERROR" help="doc-en_US/doc/messages/0484.html" severity="9">
   <text>A pseudo destructor shall only be used as the operand to ().</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0485" level="QA_WARNING" help="doc-en_US/doc/messages/0485.html" severity="6">
   <text>No suitable functions found  for '%1s' during first phase lookup, recovering with lookup at instantiation.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0486" level="QA_WARNING" help="doc-en_US/doc/messages/0486.html" severity="6">
   <text>No suitable operator functions found during first phase lookup, recovering with lookup at instantiation.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0487" level="QA_WARNING" help="doc-en_US/doc/messages/0487.html" severity="9">
   <text>Instantiated '%1s' is not an expression, recovering with implicit 'typename'.</text>
   <references>
    <reference source="ISO C++ Language [14.6/2]"/>
    <reference source="Effective C++ 3rd Edition [Item42]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0488" level="QA_WARNING" help="doc-en_US/doc/messages/0488.html" severity="9">
   <text>Invalid throw expression, recovering with 'throw 0;'.</text>
   <references>
    <reference source="ISO C++ Language [15.1/3]"/>
   </references>
  </message>
  <message id="0489" level="QA_WARNING" help="doc-en_US/doc/messages/0489.html" severity="9">
   <text>Invalid initializer(s) in array new expression, recovering with '()'.</text>
   <references>
      </references>
  </message>
  <message id="0490" level="QA_WARNING" help="doc-en_US/doc/messages/0490.html" severity="9">
   <text>Illegal value initialization of reference type: %1s, recovering with %2s.</text>
   <references>
    <reference source="ISO C++ Language [5.2.3/2]"/>
    <reference source="ISO C++ Language [8.5/5]"/>
   </references>
  </message>
  <message id="0491" level="QA_ERROR" help="doc-en_US/doc/messages/0491.html" severity="9">
   <text>Illegal cast from '%1s' to '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [5.2.7]"/>
    <reference source="ISO C++ Language [5.2.9]"/>
    <reference source="ISO C++ Language [5.2.10]"/>
    <reference source="ISO C++ Language [5.2.11]"/>
    <reference source="ISO C++ Language [5.4]"/>
   </references>
  </message>
  <message id="0492" level="QA_ERROR" help="doc-en_US/doc/messages/0492.html" severity="9">
   <text>'%1s' does not name a parameter pack.</text>
   <references>
    <reference source="ISO C++ Language [5.3.3/5]"/>
   </references>
  </message>
  <message id="0493" level="QA_ERROR" help="doc-en_US/doc/messages/0493.html" severity="9">
   <text>No matching literal operator '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0494" level="QA_ERROR" help="doc-en_US/doc/messages/0494.html" severity="9">
   <text>Literal operator is not declared.</text>
   <references>
      </references>
  </message>
  <message id="0495" level="QA_WARNING" help="doc-en_US/doc/messages/0495.html" severity="9">
   <text>Explicit constructor %1s used for copy initialization.</text>
   <references>
    <reference source="ISO 2011 C++ Language [13.3.1.7/1]"/>
   </references>
  </message>
  <message id="0496" level="QA_ERROR" help="doc-en_US/doc/messages/0496.html" severity="9">
   <text>Return type for %1s has not yet been deduced.</text>
   <references>
    <reference source="ISO 2014 C++ Language [7.1.6.4/11]"/>
   </references>
  </message>
  <message id="0497" level="QA_ERROR" help="doc-en_US/doc/messages/0497.html" severity="9">
   <text>This is using '%1s' from an enclosing scope.</text>
   <references>
      </references>
  </message>
  <message id="0498" level="QA_ERROR" help="doc-en_US/doc/messages/0498.html" severity="9">
   <text>This is using the deleted function '%1s'.</text>
   <references>
    <reference source="ISO 2011 C++ Language [8.4.3/2]"/>
   </references>
  </message>
  <message id="0499" level="QA_ERROR" help="doc-en_US/doc/messages/0499.html" severity="9">
   <text>This constraint-expression is not valid.</text>
   <references>
    <reference source="ISO 2020 C++ Language [13.5.3]"/>
   </references>
  </message>
  <message id="0600" level="QA_ERROR" help="doc-en_US/doc/messages/0600.html" severity="9">
   <text>The macro concatenation operator cannot be the first or last token in a macro token replacement set, ignoring directive.</text>
   <references>
    <reference source="ISO C++ Language [16.3.3/1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0601" level="QA_WARNING" help="doc-en_US/doc/messages/0601.html" severity="8">
   <text>The stringify operator must precede a macro parameter, ignoring directive.</text>
   <references>
    <reference source="ISO C++ Language [16.3.2/1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0602" level="QA_ERROR" help="doc-en_US/doc/messages/0602.html" severity="9">
   <text>Filename expected after #include directive, ignoring directive.</text>
   <references>
    <reference source="ISO C++ Language [16.2]"/>
   </references>
  </message>
  <message id="0603" level="QA_WARNING" help="doc-en_US/doc/messages/0603.html" severity="6">
   <text>Identifier expected after #%1s directive.</text>
   <references>
    <reference source="ISO C++ Language [16/1]"/>
   </references>
  </message>
  <message id="0604" level="QA_WARNING" help="doc-en_US/doc/messages/0604.html" severity="6">
   <text>Empty literal character.</text>
   <references>
    <reference source="ISO C++ Language [2.13.2/1]"/>
   </references>
  </message>
  <message id="0605" level="QA_WARNING" help="doc-en_US/doc/messages/0605.html" severity="6">
   <text>Function macro argument consists of no preprocessing tokens.</text>
   <references>
    <reference source="ISO 2003 C++ Language [16.3/10]"/>
   </references>
  </message>
  <message id="0606" level="QA_WARNING" help="doc-en_US/doc/messages/0606.html" severity="9">
   <text>Function macro '%1s' requires at least %2s argument(s).</text>
   <references>
      </references>
  </message>
  <message id="0607" level="QA_WARNING" help="doc-en_US/doc/messages/0607.html" severity="8">
   <text>'%1s' has already been used a macro parameter name, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0608" level="QA_WARNING" help="doc-en_US/doc/messages/0608.html" severity="8">
   <text>'%1s' cannot be used as a macro parameter name, ignoring directive.</text>
   <references>
      </references>
  </message>
  <message id="0609" level="QA_WARNING" help="doc-en_US/doc/messages/0609.html" severity="6">
   <text>'%1s' is used in replacement list of non-variadic function macro.</text>
   <references>
      </references>
  </message>
  <message id="0610" level="QA_WARNING" help="doc-en_US/doc/messages/0610.html" severity="6">
   <text>'__VA_ARGS__' is used in replacement list of variadic function macro with named variable argument.</text>
   <references>
      </references>
  </message>
  <message id="0611" level="QA_ERROR" help="doc-en_US/doc/messages/0611.html" severity="9">
   <text>Syntax error before '%2s' in #%1s expression, skipping until #endif.</text>
   <references>
      </references>
  </message>
  <message id="0612" level="QA_WARNING" help="doc-en_US/doc/messages/0612.html" severity="7">
   <text>Missing tokens after #%1s directive, recovering with 0.</text>
   <references>
    <reference source="ISO C++ Language [16/1]"/>
   </references>
  </message>
  <message id="0613" level="QA_WARNING" help="doc-en_US/doc/messages/0613.html" severity="7">
   <text>Ill-formed operand to __VA_OPT__.</text>
   <references>
      </references>
  </message>
  <message id="0616" level="QA_ERROR" help="doc-en_US/doc/messages/0616.html" severity="9">
   <text>Namespace is not defined, ignoring alias definition.</text>
   <references>
      </references>
  </message>
  <message id="0617" level="QA_ERROR" help="doc-en_US/doc/messages/0617.html" severity="9">
   <text>Unable to alias a namespace using a qualified name, ignoring alias definition.</text>
   <references>
    <reference source="ISO C++ Language [7.3.2/1]"/>
   </references>
  </message>
  <message id="0618" level="QA_WARNING" help="doc-en_US/doc/messages/0618.html" severity="6">
   <text>Integer literal '%1s' contains digits beyond radix.</text>
   <references>
    <reference source="ISO C++ Language [2.13.1]"/>
   </references>
  </message>
  <message id="0619" level="QA_ERROR" help="doc-en_US/doc/messages/0619.html" severity="9">
   <text>Parameter name is not an identifier, ignoring parameter.</text>
   <references>
    <reference source="ISO C++ Language [8.3/1]"/>
   </references>
  </message>
  <message id="0620" level="QA_ERROR" help="doc-en_US/doc/messages/0620.html" severity="9">
   <text>'%1s' is not a type.</text>
   <references>
      </references>
  </message>
  <message id="0621" level="QA_ERROR" help="doc-en_US/doc/messages/0621.html" severity="9">
   <text>Critical Parsing error, parser failures for:</text>
   <references>
      </references>
  </message>
  <message id="0622" level="QA_ERROR" help="doc-en_US/doc/messages/0622.html" severity="9">
   <text>'%1s' is not a concept name.</text>
   <references>
      </references>
  </message>
  <message id="0623" level="QA_WARNING" help="doc-en_US/doc/messages/0623.html" severity="6">
   <text>Unexpected characters following integer literal.</text>
   <references>
    <reference source="ISO C++ Language [2.13.1/2]"/>
   </references>
  </message>
  <message id="0624" level="QA_WARNING" help="doc-en_US/doc/messages/0624.html" severity="6">
   <text>Unexpected characters following floating point literal.</text>
   <references>
    <reference source="ISO C++ Language [2.13.3/1]"/>
   </references>
  </message>
  <message id="0625" level="QA_WARNING" help="doc-en_US/doc/messages/0625.html" severity="6">
   <text>Floating point literals are not valid in #if expressions.</text>
   <references>
    <reference source="ISO C++ Language [16.1/4]"/>
    <reference source="ISO C++ Language [5.19/1]"/>
   </references>
  </message>
  <message id="0626" level="QA_WARNING" help="doc-en_US/doc/messages/0626.html" severity="1">
   <text>Treating '%1s' as a '&gt;' followed by '%2s'.</text>
   <references>
    <reference source="ISO C++ Language [14.2/3]"/>
   </references>
  </message>
  <message id="0627" level="QA_ERROR" help="doc-en_US/doc/messages/0627.html" severity="9">
   <text>Unexpected EOF in char or string literal.</text>
   <references>
      </references>
  </message>
  <message id="0628" level="QA_WARNING" help="doc-en_US/doc/messages/0628.html" severity="6">
   <text>Invalid character outside of string literal, allowing as an extension.</text>
   <references>
    <reference source="ISO C++ Language [2.2/1]"/>
   </references>
  </message>
  <message id="0629" level="QA_WARNING" help="doc-en_US/doc/messages/0629.html" severity="9">
   <text>Use of auto not allowed in this context, recovering using '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0630" level="QA_WARNING" help="doc-en_US/doc/messages/0630.html" severity="9">
   <text>Return type must be 'auto' when using trailing return types.</text>
   <references>
      </references>
  </message>
  <message id="0631" level="QA_ERROR" help="doc-en_US/doc/messages/0631.html" severity="9">
   <text>Scoped enumerations must be named.</text>
   <references>
      </references>
  </message>
  <message id="0632" level="QA_ERROR" help="doc-en_US/doc/messages/0632.html" severity="9">
   <text>Parameter pack is not allowed in this context.</text>
   <references>
      </references>
  </message>
  <message id="0633" level="QA_WARNING" help="doc-en_US/doc/messages/0633.html" severity="9">
   <text>User-defined literal suffixes ('%1s' and '%2s') differ.</text>
   <references>
      </references>
  </message>
  <message id="0634" level="QA_WARNING" help="doc-en_US/doc/messages/0634.html" severity="6">
   <text>Error in code replacement expression '%1s'. '%2s'</text>
   <references>
      </references>
  </message>
  <message id="0635" level="QA_WARNING" help="doc-en_US/doc/messages/0635.html" severity="4">
   <text>This is concatenating a string literal with an encoding prefix with a string literal without an encoding prefix.</text>
   <references>
      </references>
  </message>
  <message id="0636" level="QA_WARNING" help="doc-en_US/doc/messages/0636.html" severity="6">
   <text>This is concatenating string literals with different encoding prefixes.</text>
   <references>
      </references>
  </message>
  <message id="0637" level="QA_WARNING" help="doc-en_US/doc/messages/0637.html" severity="6">
   <text>Binary digit must follow '0b'.</text>
   <references>
    <reference source="ISO 2011 C++ Language [2.13.2]"/>
   </references>
  </message>
  <message id="0638" level="QA_WARNING" help="doc-en_US/doc/messages/0638.html" severity="6">
   <text>Digit separator is not in digit sequence.</text>
   <references>
    <reference source="ISO 2011 C++ Language [2.13]"/>
   </references>
  </message>
  <message id="0639" level="QA_WARNING" help="doc-en_US/doc/messages/0639.html" severity="6">
   <text>This statement expression is being parsed as a lambda expression with a default capture by reference.</text>
   <references>
      </references>
  </message>
  <message id="0640" level="QA_WARNING" help="doc-en_US/doc/messages/0640.html" severity="6">
   <text>An explicit class template instantiation without a class key is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="0641" level="QA_WARNING" help="doc-en_US/doc/messages/0641.html" severity="6">
   <text>An exponent is required for a hexadecimal floating literal.</text>
   <references>
    <reference source="ISO 2017 C++ Language [5.13.4]"/>
   </references>
  </message>
  <message id="0642" level="QA_ERROR" help="doc-en_US/doc/messages/0642.html" severity="9">
   <text>A class or enumeration cannot be defined in an alias template declaration.</text>
   <references>
      </references>
  </message>
  <message id="0643" level="QA_ERROR" help="doc-en_US/doc/messages/0643.html" severity="9">
   <text>The operators ('%1s' and '%2s') in this binary fold expression differ.</text>
   <references>
      </references>
  </message>
  <message id="0644" level="QA_WARNING" help="doc-en_US/doc/messages/0644.html" severity="9">
   <text>The type in a structured binding declaration must be (optional reference to) cv-qualified 'auto'.</text>
   <references>
      </references>
  </message>
  <message id="0645" level="QA_WARNING" help="doc-en_US/doc/messages/0645.html" severity="6">
   <text>Applying the 'alignof' operator to an expression is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="0646" level="QA_WARNING" help="doc-en_US/doc/messages/0646.html" severity="9">
   <text>It is ill-formed for the requirement parameter list to terminate with an ellipsis.</text>
   <references>
    <reference source="ISO 2020 C++ Language [7.5.7/4]"/>
   </references>
  </message>
  <message id="0647" level="QA_WARNING" help="doc-en_US/doc/messages/0647.html" severity="9">
   <text>Use of decltype(auto) not allowed in this context, recovering using '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0648" level="QA_ERROR" help="doc-en_US/doc/messages/0648.html" severity="9">
   <text>Use of auto not allowed in this context.</text>
   <references>
      </references>
  </message>
  <message id="0700" level="QA_INFORMATION" help="doc-en_US/doc/messages/0700.html" severity="0">
   <text>Array type: '%1s' is not complete.</text>
   <references>
      </references>
  </message>
  <message id="0701" level="QA_INFORMATION" help="doc-en_US/doc/messages/0701.html" severity="0">
   <text>Array element type: '%1s' is not complete.</text>
   <references>
      </references>
  </message>
  <message id="0702" level="QA_INFORMATION" help="doc-en_US/doc/messages/0702.html" severity="0">
   <text>Cannot get size of '%1s' as it is being defined.</text>
   <references>
      </references>
  </message>
  <message id="0703" level="QA_INFORMATION" help="doc-en_US/doc/messages/0703.html" severity="0">
   <text>Candidate partial specialization.</text>
   <references>
      </references>
  </message>
  <message id="0704" level="QA_INFORMATION" help="doc-en_US/doc/messages/0704.html" severity="0">
   <text>Cannot deduce template parameters from function arguments.</text>
   <references>
    <reference source="ISO C++ Language [14.8.2]"/>
   </references>
  </message>
  <message id="0705" level="QA_INFORMATION" help="doc-en_US/doc/messages/0705.html" severity="0">
   <text>Not enough arguments in call.</text>
   <references>
    <reference source="ISO C++ Language [13.3/1]"/>
    <reference source="ISO C++ Language [Annex.B/2]"/>
   </references>
  </message>
  <message id="0706" level="QA_INFORMATION" help="doc-en_US/doc/messages/0706.html" severity="0">
   <text>Too many arguments in call.</text>
   <references>
    <reference source="ISO C++ Language [13.3/1]"/>
    <reference source="ISO C++ Language [Annex.B/2]"/>
   </references>
  </message>
  <message id="0707" level="QA_INFORMATION" help="doc-en_US/doc/messages/0707.html" severity="0">
   <text>The friend scope '%1s' is not complete.</text>
   <references>
      </references>
  </message>
  <message id="0708" level="QA_INFORMATION" help="doc-en_US/doc/messages/0708.html" severity="0">
   <text>Constraint not satisfied.</text>
   <references>
    <reference source="ISO 2020 C++ Language [[over.match.viable]]"/>
   </references>
  </message>
  <message id="0800" level="QA_ERROR" help="doc-en_US/doc/messages/0800.html" severity="9">
   <text>Unable to open file '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0801" level="QA_ERROR" help="doc-en_US/doc/messages/0801.html" severity="9">
   <text>Invalid character.</text>
   <references>
      </references>
  </message>
  <message id="0802" level="QA_ERROR" help="doc-en_US/doc/messages/0802.html" severity="9">
   <text>'%1s' is not a valid operator.</text>
   <references>
      </references>
  </message>
  <message id="0803" level="QA_WARNING" help="doc-en_US/doc/messages/0803.html" severity="6">
   <text>Missing token: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0804" level="QA_WARNING" help="doc-en_US/doc/messages/0804.html" severity="6">
   <text>Discarding token: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0805" level="QA_WARNING" help="doc-en_US/doc/messages/0805.html" severity="9">
   <text>Unrecoverable syntax error before '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0900" level="QA_INFORMATION" help="doc-en_US/doc/messages/0900.html" severity="0">
   <text>Viable function: %1s</text>
   <references>
      </references>
  </message>
  <message id="0901" level="QA_INFORMATION" help="" severity="0">
   <text>Candidate function: %1s</text>
   <references>
      </references>
  </message>
  <message id="0902" level="QA_INFORMATION" help="doc-en_US/doc/messages/0902.html" severity="0">
   <text>This pointer to member conversion to derived class is illegal for a template argument.</text>
   <references>
      </references>
  </message>
  <message id="0903" level="QA_INFORMATION" help="doc-en_US/doc/messages/0903.html" severity="0">
   <text>Illegal '%1s' for non type template parameter.</text>
   <references>
      </references>
  </message>
  <message id="0904" level="QA_INFORMATION" help="doc-en_US/doc/messages/0904.html" severity="0">
   <text>Cannot convert to non type template parameter type</text>
   <references>
      </references>
  </message>
  <message id="0905" level="QA_INFORMATION" help="doc-en_US/doc/messages/0905.html" severity="0">
   <text>'%1s' does not have linkage</text>
   <references>
      </references>
  </message>
  <message id="0906" level="QA_INFORMATION" help="doc-en_US/doc/messages/0906.html" severity="0">
   <text>This cannot be bound to a reference template parameter</text>
   <references>
      </references>
  </message>
  <message id="0907" level="QA_INFORMATION" help="doc-en_US/doc/messages/0907.html" severity="0">
   <text>This expression is not allowed in a template argument.</text>
   <references>
      </references>
  </message>
  <message id="0908" level="QA_INFORMATION" help="doc-en_US/doc/messages/0908.html" severity="0">
   <text>Invalid pointer argument to template</text>
   <references>
      </references>
  </message>
  <message id="0909" level="QA_INFORMATION" help="doc-en_US/doc/messages/0909.html" severity="0">
   <text>This derived to base conversion is illegal on a template argument.</text>
   <references>
      </references>
  </message>
  <message id="0910" level="QA_INFORMATION" help="" severity="0">
   <text>Available conversion with %1s</text>
   <references>
      </references>
  </message>
  <message id="0911" level="QA_INFORMATION" help="doc-en_US/doc/messages/0911.html" severity="0">
   <text>Argument must be a constant expression</text>
   <references>
      </references>
  </message>
  <message id="0912" level="QA_INFORMATION" help="doc-en_US/doc/messages/0912.html" severity="0">
   <text>A pointer to function cannot be bound to a reference template parameter.</text>
   <references>
      </references>
  </message>
  <message id="0913" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' not found by argument-dependent lookup.</text>
   <references>
      </references>
  </message>
  <message id="0914" level="QA_INFORMATION" help="doc-en_US/doc/messages/0914.html" severity="0">
   <text>Surrogate call function not created for '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0915" level="QA_INFORMATION" help="doc-en_US/doc/messages/0915.html" severity="0">
   <text>Cannot get the size of bitfield '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0916" level="QA_INFORMATION" help="doc-en_US/doc/messages/0916.html" severity="0">
   <text>Cannot get the size of function, did you mean 'sizeof(&amp; %1s)'?</text>
   <references>
      </references>
  </message>
  <message id="0917" level="QA_INFORMATION" help="doc-en_US/doc/messages/0917.html" severity="0">
   <text>This expression shall be a constant expression of type bool.</text>
   <references>
      </references>
  </message>
  <message id="0918" level="QA_INFORMATION" help="doc-en_US/doc/messages/0918.html" severity="0">
   <text>Cannot get the size of a function, should this be the sizeof a function pointer?</text>
   <references>
      </references>
  </message>
  <message id="0919" level="QA_INFORMATION" help="doc-en_US/doc/messages/0919.html" severity="0">
   <text>Cannot use builtin operator '%1s' with type '%2s'</text>
   <references>
    <reference source="ISO C++ Language [5.3]"/>
   </references>
  </message>
  <message id="0920" level="QA_INFORMATION" help="doc-en_US/doc/messages/0920.html" severity="0">
   <text>Cannot find overloaded operator matching operator %1s (%2s)</text>
   <references>
      </references>
  </message>
  <message id="0921" level="QA_INFORMATION" help="doc-en_US/doc/messages/0921.html" severity="0">
   <text>Cannot use builtin operator '%1s' with types '%2s', '%3s'</text>
   <references>
    <reference source="ISO C++ Language [5]"/>
   </references>
  </message>
  <message id="0922" level="QA_INFORMATION" help="doc-en_US/doc/messages/0922.html" severity="0">
   <text>Cannot find overloaded operator matching operator %1s (%2s, %3s)</text>
   <references>
      </references>
  </message>
  <message id="0923" level="QA_INFORMATION" help="doc-en_US/doc/messages/0923.html" severity="0">
   <text>Operand is incomplete or is a pointer to an incomplete type.</text>
   <references>
      </references>
  </message>
  <message id="0924" level="QA_INFORMATION" help="doc-en_US/doc/messages/0924.html" severity="0">
   <text>Operand is not of class type</text>
   <references>
    <reference source="ISO C++ Language [5.5]"/>
   </references>
  </message>
  <message id="0925" level="QA_INFORMATION" help="doc-en_US/doc/messages/0925.html" severity="0">
   <text>Operand is not a pointer to member</text>
   <references>
    <reference source="ISO C++ Language [5.5]"/>
   </references>
  </message>
  <message id="0926" level="QA_INFORMATION" help="doc-en_US/doc/messages/0926.html" severity="0">
   <text>Operand is not of pointer to class type</text>
   <references>
    <reference source="ISO C++ Language [5.5]"/>
   </references>
  </message>
  <message id="0927" level="QA_INFORMATION" help="doc-en_US/doc/messages/0927.html" severity="0">
   <text>Operand is not of pointer or array type</text>
   <references>
    <reference source="ISO C++ Language [5.2.1]"/>
   </references>
  </message>
  <message id="0928" level="QA_INFORMATION" help="doc-en_US/doc/messages/0928.html" severity="0">
   <text>Operand is not of integral or enum type</text>
   <references>
    <reference source="ISO C++ Language [5.2.1]"/>
   </references>
  </message>
  <message id="0929" level="QA_INFORMATION" help="doc-en_US/doc/messages/0929.html" severity="0">
   <text>Operand is not of arithmetic type</text>
   <references>
    <reference source="ISO C++ Language [5]"/>
   </references>
  </message>
  <message id="0930" level="QA_INFORMATION" help="doc-en_US/doc/messages/0930.html" severity="0">
   <text>Can only add integral or enumeration types to a pointer</text>
   <references>
    <reference source="ISO C++ Language [5.7]"/>
   </references>
  </message>
  <message id="0931" level="QA_INFORMATION" help="doc-en_US/doc/messages/0931.html" severity="0">
   <text>You can only subtract integral, enumeration or compatible pointer types from a pointer</text>
   <references>
    <reference source="ISO C++ Language [5.7]"/>
   </references>
  </message>
  <message id="0932" level="QA_INFORMATION" help="doc-en_US/doc/messages/0932.html" severity="0">
   <text>You cannot subtract a pointer from a non pointer value</text>
   <references>
    <reference source="ISO C++ Language [5.7]"/>
   </references>
  </message>
  <message id="0933" level="QA_INFORMATION" help="doc-en_US/doc/messages/0933.html" severity="0">
   <text>Addition of pointers is not allowed</text>
   <references>
    <reference source="ISO C++ Language [5.7]"/>
   </references>
  </message>
  <message id="0934" level="QA_INFORMATION" help="doc-en_US/doc/messages/0934.html" severity="0">
   <text>Operands are incompatible pointer types</text>
   <references>
    <reference source="ISO C++ Language [5.7]"/>
   </references>
  </message>
  <message id="0935" level="QA_INFORMATION" help="doc-en_US/doc/messages/0935.html" severity="0">
   <text>Operands are not of compatible types</text>
   <references>
    <reference source="ISO C++ Language [5.16]"/>
   </references>
  </message>
  <message id="0936" level="QA_INFORMATION" help="doc-en_US/doc/messages/0936.html" severity="0">
   <text>Operand is not modifiable</text>
   <references>
    <reference source="ISO C++ Language [5]"/>
   </references>
  </message>
  <message id="0937" level="QA_INFORMATION" help="doc-en_US/doc/messages/0937.html" severity="0">
   <text>Decrement on type bool is deprecated</text>
   <references>
    <reference source="ISO C++ Language [5.7]"/>
   </references>
  </message>
  <message id="0938" level="QA_INFORMATION" help="doc-en_US/doc/messages/0938.html" severity="0">
   <text>Operand does not convert to type bool</text>
   <references>
    <reference source="ISO C++ Language [5.16]"/>
   </references>
  </message>
  <message id="0939" level="QA_INFORMATION" help="doc-en_US/doc/messages/0939.html" severity="0">
   <text>Hint - did you intend .*</text>
   <references>
    <reference source="ISO C++ Language [5.5]"/>
   </references>
  </message>
  <message id="0940" level="QA_INFORMATION" help="doc-en_US/doc/messages/0940.html" severity="0">
   <text>Hint - did you intend -&gt;*</text>
   <references>
    <reference source="ISO C++ Language [5.5]"/>
   </references>
  </message>
  <message id="0941" level="QA_INFORMATION" help="doc-en_US/doc/messages/0941.html" severity="0">
   <text>Operand is not a pointer type</text>
   <references>
    <reference source="ISO C++ Language [5.3.1]"/>
   </references>
  </message>
  <message id="0942" level="QA_INFORMATION" help="" severity="0">
   <text>Invalid candidate function: %1s</text>
   <references>
      </references>
  </message>
  <message id="0943" level="QA_INFORMATION" help="doc-en_US/doc/messages/0943.html" severity="0">
   <text>Pointer arithmetic can only be used with pointers to object type</text>
   <references>
    <reference source="ISO C++ Language [5]"/>
   </references>
  </message>
  <message id="0944" level="QA_INFORMATION" help="doc-en_US/doc/messages/0944.html" severity="0">
   <text>Either both or neither operand to the &lt;=&gt; operator can have bool type</text>
   <references>
    <reference source="ISO C++ Language [5.16]"/>
   </references>
  </message>
  <message id="0945" level="QA_INFORMATION" help="doc-en_US/doc/messages/0945.html" severity="0">
   <text>Enum operands to the &lt;=&gt; operator have different type</text>
   <references>
    <reference source="ISO C++ Language [5.16]"/>
   </references>
  </message>
  <message id="0946" level="QA_INFORMATION" help="doc-en_US/doc/messages/0946.html" severity="0">
   <text>Operand is not a type expression</text>
   <references>
    <reference source="ISO C++ Language [5.16]"/>
   </references>
  </message>
  <message id="0947" level="QA_INFORMATION" help="doc-en_US/doc/messages/0947.html" severity="0">
   <text>Selected rewritten operator does not return bool</text>
   <references>
    <reference source="ISO 2020 C++ Language [12.2.2.3]"/>
   </references>
  </message>
  <message id="0948" level="QA_INFORMATION" help="doc-en_US/doc/messages/0948.html" severity="0">
   <text>Rewritten and/or Synthesized Viable function: %1s</text>
   <references>
      </references>
  </message>
  <message id="0950" level="QA_INFORMATION" help="doc-en_US/doc/messages/0950.html" severity="0">
   <text>Recovery lookup finds this function</text>
   <references>
      </references>
  </message>
  <message id="0951" level="QA_INFORMATION" help="doc-en_US/doc/messages/0951.html" severity="0">
   <text>Cannot determine which overload of '%1s' to use</text>
   <references>
      </references>
  </message>
  <message id="0952" level="QA_INFORMATION" help="" severity="0">
   <text>Pointer to function: %1s</text>
   <references>
      </references>
  </message>
  <message id="0953" level="QA_INFORMATION" help="doc-en_US/doc/messages/0953.html" severity="0">
   <text>The address-of operator shall not be applied to a bit-field.</text>
   <references>
    <reference source="ISO C++ Language [9.6]"/>
   </references>
  </message>
  <message id="0996" level="QA_ERROR" help="doc-en_US/doc/messages/0996.html" severity="9">
   <text>Unexpected internal error.\n%1s.</text>
   <references>
      </references>
  </message>
  <message id="0998" level="QA_INFORMATION" help="doc-en_US/doc/messages/0998.html" severity="0">
   <text>The maximum number of errors has been exceeded - the analysis has been aborted.</text>
   <references>
      </references>
  </message>
  <message id="0999" level="QA_WARNING" help="doc-en_US/doc/messages/0999.html" severity="0">
   <text>%1s</text>
   <references>
      </references>
  </message>
  <message id="1000" level="QA_WARNING" help="doc-en_US/doc/messages/1000.html" severity="4">
   <text>Include file does not contain include guard.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1001" level="QA_WARNING" help="doc-en_US/doc/messages/1001.html" severity="4">
   <text>The include guard is not self-contained.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1007" level="QA_WARNING" help="doc-en_US/doc/messages/1007.html" severity="0">
   <text>Macro '%1s' is expanded.</text>
   <references>
      </references>
  </message>
  <message id="1010" level="QA_WARNING" help="doc-en_US/doc/messages/1010.html" severity="1">
   <text>Do not specify absolute paths in include directives.</text>
   <references>
    <reference source="Industrial Strength C++ [Rule.15.5]"/>
   </references>
  </message>
  <message id="1011" level="QA_WARNING" help="doc-en_US/doc/messages/1011.html" severity="1">
   <text>Use &lt;&gt; brackets for system and standard library headers.</text>
   <references>
    <reference source="Industrial Strength C++ [Rule.15.4]"/>
   </references>
  </message>
  <message id="1012" level="QA_WARNING" help="doc-en_US/doc/messages/1012.html" severity="1">
   <text>Use "" quotes for non-standard library headers.</text>
   <references>
    <reference source="Industrial Strength C++ [Rule.15.4]"/>
   </references>
  </message>
  <message id="1013" level="QA_WARNING" help="doc-en_US/doc/messages/1013.html" severity="1">
   <text>Do not specify relative paths in include directives.</text>
   <references>
    <reference source="Industrial Strength C++ [Rule.15.5]"/>
   </references>
  </message>
  <message id="1014" level="QA_WARNING" help="doc-en_US/doc/messages/1014.html" severity="2">
   <text>This is a C standard library header.</text>
   <references>
      </references>
  </message>
  <message id="1015" level="QA_WARNING" help="doc-en_US/doc/messages/1015.html" severity="1">
   <text>'%1s' included using "".</text>
   <references>
      </references>
  </message>
  <message id="1016" level="QA_WARNING" help="doc-en_US/doc/messages/1016.html" severity="1">
   <text>Header name contains "%1s".</text>
   <references>
      </references>
  </message>
  <message id="1017" level="QA_WARNING" help="doc-en_US/doc/messages/1017.html" severity="1">
   <text>Header name contains "%1s", a directory separator on some platforms.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1020" level="QA_WARNING" help="doc-en_US/doc/messages/1020.html" severity="2">
   <text>Avoid macros.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Industrial Strength C++ [Rule.13.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1021" level="QA_WARNING" help="doc-en_US/doc/messages/1021.html" severity="1">
   <text>This macro is replaced with a literal.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Industrial Strength C++ [Rule.13.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1022" level="QA_WARNING" help="doc-en_US/doc/messages/1022.html" severity="4">
   <text>This macro acts like a comment start.</text>
   <references>
      </references>
  </message>
  <message id="1023" level="QA_WARNING" help="doc-en_US/doc/messages/1023.html" severity="2">
   <text>This macro contains statement separators.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1024" level="QA_WARNING" help="doc-en_US/doc/messages/1024.html" severity="4">
   <text>Use of NULL for the null pointer constant.</text>
   <references>
      </references>
  </message>
  <message id="1025" level="QA_WARNING" help="doc-en_US/doc/messages/1025.html" severity="1">
   <text>Macro may be used as a literal.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Industrial Strength C++ [Rule.13.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1026" level="QA_WARNING" help="doc-en_US/doc/messages/1026.html" severity="2">
   <text>Macro may be used as a constant expression.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Industrial Strength C++ [Rule.13.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1027" level="QA_WARNING" help="doc-en_US/doc/messages/1027.html" severity="1">
   <text>Macro used for a specifier.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Industrial Strength C++ [Rule.13.5]"/>
   </references>
  </message>
  <message id="1028" level="QA_WARNING" help="doc-en_US/doc/messages/1028.html" severity="3">
   <text>'__VA_OPT__' elided in expansion of '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1029" level="QA_WARNING" help="doc-en_US/doc/messages/1029.html" severity="1">
   <text>Ignoring whitespace between backslash and newline.</text>
   <references>
    <reference source="ISO C++ Language [2.1]"/>
   </references>
  </message>
  <message id="1030" level="QA_WARNING" help="doc-en_US/doc/messages/1030.html" severity="3">
   <text>Enclose macro arguments in parentheses.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1031" level="QA_WARNING" help="doc-en_US/doc/messages/1031.html" severity="7">
   <text>Macro body contains operators, enclose it in parentheses.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1032" level="QA_WARNING" help="doc-en_US/doc/messages/1032.html" severity="1">
   <text>This is an #undef directive.</text>
   <references>
      </references>
  </message>
  <message id="1033" level="QA_WARNING" help="doc-en_US/doc/messages/1033.html" severity="8">
   <text>Compiler macro '%1s' is subject of '#%2s' directive.</text>
   <references>
    <reference source="ISO C++ Language [16.8/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1034" level="QA_WARNING" help="doc-en_US/doc/messages/1034.html" severity="1">
   <text>#define directive should be in the global namespace.</text>
   <references>
      </references>
  </message>
  <message id="1035" level="QA_WARNING" help="doc-en_US/doc/messages/1035.html" severity="1">
   <text>#undef directive should be in the global namespace.</text>
   <references>
      </references>
  </message>
  <message id="1036" level="QA_WARNING" help="doc-en_US/doc/messages/1036.html" severity="1">
   <text>Identifier '%1s', used in a conditional preprocessor directive is not defined.</text>
   <references>
      </references>
  </message>
  <message id="1037" level="QA_WARNING" help="doc-en_US/doc/messages/1037.html" severity="2">
   <text>This file contains the control-M character at the end of a line.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1038" level="QA_WARNING" help="doc-en_US/doc/messages/1038.html" severity="4">
   <text>Avoid using the stringify operator (#).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1039" level="QA_WARNING" help="doc-en_US/doc/messages/1039.html" severity="4">
   <text>Avoid using the glue operator (##).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1040" level="QA_WARNING" help="doc-en_US/doc/messages/1040.html" severity="3">
   <text>This is a #pragma directive</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.18]"/>
   </references>
  </message>
  <message id="1041" level="QA_WARNING" help="doc-en_US/doc/messages/1041.html" severity="1">
   <text>File does not end with a newline character.</text>
   <references>
    <reference source="ISO C++ Language [2.1]"/>
   </references>
  </message>
  <message id="1042" level="QA_WARNING" help="doc-en_US/doc/messages/1042.html" severity="1">
   <text>File ends with backslash followed by a single newline character.</text>
   <references>
    <reference source="ISO C++ Language [2.1]"/>
   </references>
  </message>
  <message id="1043" level="QA_WARNING" help="doc-en_US/doc/messages/1043.html" severity="3">
   <text>Unable to parse '%1s_macro' arguments; ignoring #pragma.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.18]"/>
   </references>
  </message>
  <message id="1044" level="QA_WARNING" help="doc-en_US/doc/messages/1044.html" severity="3">
   <text>'%1s_macro' with non-macro identifier '%2s'.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.18]"/>
   </references>
  </message>
  <message id="1045" level="QA_WARNING" help="doc-en_US/doc/messages/1045.html" severity="3">
   <text>Ignoring 'pop_macro' with empty macro stack for '%1s'.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.18]"/>
   </references>
  </message>
  <message id="1046" level="QA_WARNING" help="doc-en_US/doc/messages/1046.html" severity="2">
   <text>This identifier is reserved for compilers and the standard library implementation.</text>
   <references>
    <reference source="ISO 2003 C++ Language [2.13.4]"/>
   </references>
  </message>
  <message id="1047" level="QA_WARNING" help="doc-en_US/doc/messages/1047.html" severity="4">
   <text>Identifier '%1s' contains characters that may not be supported by some compilers.</text>
   <references>
    <reference source="ISO 2003 C++ Language [2.13.4]"/>
   </references>
  </message>
  <message id="1048" level="QA_WARNING" help="doc-en_US/doc/messages/1048.html" severity="8">
   <text>Identifier '%1s' contains characters out a of the ranges [A-Z], [0-9] or '_'.</text>
   <references>
    <reference source="ISO 2003 C++ Language [2.13.4]"/>
   </references>
  </message>
  <message id="1049" level="QA_WARNING" help="doc-en_US/doc/messages/1049.html" severity="1">
   <text>A macro argument expanded by this macro function may form an unexpected sub-expression.</text>
   <references>
      </references>
  </message>
  <message id="1050" level="QA_WARNING" help="doc-en_US/doc/messages/1050.html" severity="1">
   <text>Prefer C++ style comments to C style comments.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item4]"/>
    <reference source="Industrial Strength C++ [Recommendations.3.4]"/>
   </references>
  </message>
  <message id="1051" level="QA_WARNING" help="doc-en_US/doc/messages/1051.html" severity="5">
   <text>This C++ style comment, comments out source code.</text>
   <references>
      </references>
  </message>
  <message id="1052" level="QA_WARNING" help="doc-en_US/doc/messages/1052.html" severity="5">
   <text>This C style comment, comments out source code.</text>
   <references>
      </references>
  </message>
  <message id="1053" level="QA_WARNING" help="doc-en_US/doc/messages/1053.html" severity="7">
   <text>Character sequence '/*' found in c-style comment.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1054" level="QA_WARNING" help="doc-en_US/doc/messages/1054.html" severity="6">
   <text>C++-style comment line ends with a backslash, continuing it to the next line.</text>
   <references>
    <reference source="ISO 2014 C++ Language [2.2]"/>
   </references>
  </message>
  <message id="1055" level="QA_WARNING" help="doc-en_US/doc/messages/1055.html" severity="5">
   <text>Use of '#if 0' directive.</text>
   <references>
      </references>
  </message>
  <message id="1060" level="QA_WARNING" help="doc-en_US/doc/messages/1060.html" severity="2">
   <text>Included header file '%1s' is not used directly by this file.</text>
   <references>
      </references>
  </message>
  <message id="1061" level="QA_WARNING" help="doc-en_US/doc/messages/1061.html" severity="1">
   <text>Header file '%1s' already included in this file.</text>
   <references>
      </references>
  </message>
  <message id="1062" level="QA_WARNING" help="doc-en_US/doc/messages/1062.html" severity="2">
   <text>Class '%1s' may be forward declared in this path.</text>
   <references>
      </references>
  </message>
  <message id="1063" level="QA_WARNING" help="doc-en_US/doc/messages/1063.html" severity="2">
   <text>Class '%1s' is not used in this path.</text>
   <references>
      </references>
  </message>
  <message id="1064" level="QA_WARNING" help="doc-en_US/doc/messages/1064.html" severity="2">
   <text>The definition of class '%1s' may be delayed in this path.</text>
   <references>
      </references>
  </message>
  <message id="1065" level="QA_WARNING" help="doc-en_US/doc/messages/1065.html" severity="2">
   <text>The definition of class template '%1s' may be delayed in this path.</text>
   <references>
      </references>
  </message>
  <message id="1067" level="QA_WARNING" help="doc-en_US/doc/messages/1067.html" severity="3">
   <text>This is a definition in a header file that could violate the one definition rule.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1068" level="QA_WARNING" help="doc-en_US/doc/messages/1068.html" severity="2">
   <text>This definition in a header file will have different definitions in each translation unit.</text>
   <references>
      </references>
  </message>
  <message id="1069" level="QA_WARNING" help="doc-en_US/doc/messages/1069.html" severity="3">
   <text>This is an explicit instantiation of a function template in a header file.</text>
   <references>
      </references>
  </message>
  <message id="1070" level="QA_WARNING" help="doc-en_US/doc/messages/1070.html" severity="1">
   <text>Using the '#%1s' directive.</text>
   <references>
      </references>
  </message>
  <message id="1071" level="QA_WARNING" help="doc-en_US/doc/messages/1071.html" severity="4">
   <text>The result of the '#%1s' directive is not 0 or 1</text>
   <references>
      </references>
  </message>
  <message id="1072" level="QA_WARNING" help="doc-en_US/doc/messages/1072.html" severity="6">
   <text>Preprocessor directive '%1s' in macro argument context.</text>
   <references>
      </references>
  </message>
  <message id="1073" level="QA_WARNING" help="doc-en_US/doc/messages/1073.html" severity="2">
   <text>Using the '#error' preprocessing directive.</text>
   <references>
      </references>
  </message>
  <message id="1074" level="QA_WARNING" help="doc-en_US/doc/messages/1074.html" severity="2">
   <text>This preprocessing directive does not implement an include guard or conditional file inclusion.</text>
   <references>
      </references>
  </message>
  <message id="1075" level="QA_WARNING" help="doc-en_US/doc/messages/1075.html" severity="2">
   <text>This '#error' directive can be trivially rewritten as a static assertion.</text>
   <references>
      </references>
  </message>
  <message id="1080" level="QA_WARNING" help="doc-en_US/doc/messages/1080.html" severity="4">
   <text>Using keyword '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1090" level="QA_WARNING" help="doc-en_US/doc/messages/1090.html" severity="1">
   <text>Tab found in source.</text>
   <references>
      </references>
  </message>
  <message id="1091" level="QA_WARNING" help="doc-en_US/doc/messages/1091.html" severity="1">
   <text>Tab found in header.</text>
   <references>
      </references>
  </message>
  <message id="1092" level="QA_WARNING" help="doc-en_US/doc/messages/1092.html" severity="3">
   <text>Trigraph '??%1s' replaced with '%2s'.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1093" level="QA_WARNING" help="doc-en_US/doc/messages/1093.html" severity="3">
   <text>Digraph '%1s' is equivalent to '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="1094" level="QA_WARNING" help="doc-en_US/doc/messages/1094.html" severity="1">
   <text>This source line is longer than '%1s' characters.</text>
   <references>
      </references>
  </message>
  <message id="1095" level="QA_WARNING" help="doc-en_US/doc/messages/1095.html" severity="4">
   <text>The character '%1s' is not in the basic character set.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1096" level="QA_WARNING" help="doc-en_US/doc/messages/1096.html" severity="4">
   <text>The character '%1s' is common, but not in the basic character set.</text>
   <references>
      </references>
  </message>
  <message id="1097" level="QA_WARNING" help="doc-en_US/doc/messages/1097.html" severity="1">
   <text>Pre-C++17 trigraph sequence '??%1s' ('%2s') ignored.</text>
   <references>
    <reference source="ISO 2017 C++ Language [C.4.1]"/>
   </references>
  </message>
  <message id="1098" level="QA_WARNING" help="doc-en_US/doc/messages/1098.html" severity="1">
   <text>Treating '%1s' as a '%2s' followed by '%3s'.</text>
   <references>
    <reference source="ISO 2011 C++ Language [2.4]"/>
   </references>
  </message>
  <message id="1099" level="QA_WARNING" help="doc-en_US/doc/messages/1099.html" severity="6">
   <text>Preprocessor defined operator expanded from a macro in conditional directive.</text>
   <references>
      </references>
  </message>
  <message id="1100" level="QA_WARNING" help="doc-en_US/doc/messages/1100.html" severity="4">
   <text>This is an asm declaration.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1101" level="QA_WARNING" help="doc-en_US/doc/messages/1101.html" severity="5">
   <text>This is a definition of a named type and a variable at the same time.</text>
   <references>
      </references>
  </message>
  <message id="1102" level="QA_WARNING" help="doc-en_US/doc/messages/1102.html" severity="5">
   <text>This is a definition of an unnamed type and a variable at the same time.</text>
   <references>
      </references>
  </message>
  <message id="1103" level="QA_WARNING" help="doc-en_US/doc/messages/1103.html" severity="5">
   <text>This literal operator id has a space between the literal string and the identifier.</text>
   <references>
      </references>
  </message>
  <message id="1104" level="QA_WARNING" help="doc-en_US/doc/messages/1104.html" severity="5">
   <text>This non-type decl specifier appears after a type-specifier.</text>
   <references>
      </references>
  </message>
  <message id="1105" level="QA_WARNING" help="doc-en_US/doc/messages/1105.html" severity="5">
   <text>This cv-qualifier appears before a type-specifier.</text>
   <references>
      </references>
  </message>
  <message id="1106" level="QA_WARNING" help="doc-en_US/doc/messages/1106.html" severity="6">
   <text>The typedef-name '%1s' of pointer or reference type appears after a cv-qualifier.</text>
   <references>
      </references>
  </message>
  <message id="1107" level="QA_WARNING" help="doc-en_US/doc/messages/1107.html" severity="5">
   <text>This lambda expression does not have an explicit parameter list.</text>
   <references>
      </references>
  </message>
  <message id="1108" level="QA_WARNING" help="doc-en_US/doc/messages/1108.html" severity="4">
   <text>The typedef-name '%1s' appears after a cv-qualifier.</text>
   <references>
      </references>
  </message>
  <message id="1109" level="QA_WARNING" help="doc-en_US/doc/messages/1109.html" severity="7">
   <text>Parenthesis around object declaration.</text>
   <references>
      </references>
  </message>
  <message id="1110" level="QA_WARNING" help="doc-en_US/doc/messages/1110.html" severity="5">
   <text>Multiple '%1s' operators found in macro.</text>
   <references>
    <reference source="ISO C++ Language [16.3.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1111" level="QA_WARNING" help="doc-en_US/doc/messages/1111.html" severity="5">
   <text>Macro contains mixture of '#' and '##' operators.</text>
   <references>
    <reference source="ISO C++ Language [16.3.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1112" level="QA_WARNING" help="doc-en_US/doc/messages/1112.html" severity="5">
   <text>Filename '%1s' in include directive doesn't match case of filesystem name '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="1113" level="QA_WARNING" help="doc-en_US/doc/messages/1113.html" severity="5">
   <text>Function macro defined with ellipsis parameter.</text>
   <references>
      </references>
  </message>
  <message id="1114" level="QA_WARNING" help="doc-en_US/doc/messages/1114.html" severity="3">
   <text>Argument to ellipsis parameter is omitted.</text>
   <references>
      </references>
  </message>
  <message id="1115" level="QA_WARNING" help="doc-en_US/doc/messages/1115.html" severity="3">
   <text>Argument to ellipsis parameter is empty.</text>
   <references>
      </references>
  </message>
  <message id="1116" level="QA_WARNING" help="doc-en_US/doc/messages/1116.html" severity="5">
   <text>This macro argument '%1s' is an object macro which is both expanded and used with the '%2s' operator.</text>
   <references>
    <reference source="ISO C++ Language [16.3.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1117" level="QA_WARNING" help="doc-en_US/doc/messages/1117.html" severity="5">
   <text>This macro argument '%1s' is a function macro which is both expanded and used with the '%2s' operator.</text>
   <references>
    <reference source="ISO C++ Language [16.3.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1118" level="QA_WARNING" help="doc-en_US/doc/messages/1118.html" severity="5">
   <text>This macro argument '%1s' is used with both the stringification and concatenation operators.</text>
   <references>
    <reference source="ISO C++ Language [16.3.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1119" level="QA_WARNING" help="doc-en_US/doc/messages/1119.html" severity="5">
   <text>Macro parameter '%1s' is inconsistently subject to macro replacement.</text>
   <references>
    <reference source="ISO C++ Language [16.3.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1120" level="QA_WARNING" help="doc-en_US/doc/messages/1120.html" severity="2">
   <text>Scoped enumerations and the specification of the underlying type is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.enum]"/>
   </references>
  </message>
  <message id="1121" level="QA_WARNING" help="doc-en_US/doc/messages/1121.html" severity="2">
   <text>Auto used as a type specifier or the new function declarator syntax is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.spec.auto]"/>
   </references>
  </message>
  <message id="1122" level="QA_WARNING" help="doc-en_US/doc/messages/1122.html" severity="2">
   <text>The 'decltype' keyword is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.type.simple]"/>
   </references>
  </message>
  <message id="1123" level="QA_WARNING" help="doc-en_US/doc/messages/1123.html" severity="2">
   <text>A conversion operator declared as 'explicit' is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [class.conv.fct#2]"/>
   </references>
  </message>
  <message id="1124" level="QA_WARNING" help="doc-en_US/doc/messages/1124.html" severity="2">
   <text>Inline namespaces are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [namespace.def#8]"/>
   </references>
  </message>
  <message id="1125" level="QA_WARNING" help="doc-en_US/doc/messages/1125.html" severity="2">
   <text>Deleted functions are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.fct.def.delete]"/>
   </references>
  </message>
  <message id="1126" level="QA_WARNING" help="doc-en_US/doc/messages/1126.html" severity="2">
   <text>Defaulted functions are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.fct.def.default]"/>
   </references>
  </message>
  <message id="1127" level="QA_WARNING" help="doc-en_US/doc/messages/1127.html" severity="2">
   <text>Rvalue references are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.ref]"/>
   </references>
  </message>
  <message id="1128" level="QA_WARNING" help="doc-en_US/doc/messages/1128.html" severity="2">
   <text>Variadic templates are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [temp.variadic]"/>
   </references>
  </message>
  <message id="1129" level="QA_WARNING" help="doc-en_US/doc/messages/1129.html" severity="2">
   <text>Delegating constructors are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [class.base.init]"/>
   </references>
  </message>
  <message id="1130" level="QA_WARNING" help="doc-en_US/doc/messages/1130.html" severity="2">
   <text>Noexcept specifications are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [except.spec]"/>
   </references>
  </message>
  <message id="1131" level="QA_WARNING" help="doc-en_US/doc/messages/1131.html" severity="2">
   <text>The noexcept operator is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [expr.unary.noexcept]"/>
   </references>
  </message>
  <message id="1132" level="QA_WARNING" help="doc-en_US/doc/messages/1132.html" severity="2">
   <text>Alias declarations are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [temp.alias]"/>
   </references>
  </message>
  <message id="1133" level="QA_WARNING" help="doc-en_US/doc/messages/1133.html" severity="2">
   <text>Literal operators are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [lex.ext]"/>
   </references>
  </message>
  <message id="1134" level="QA_WARNING" help="doc-en_US/doc/messages/1134.html" severity="2">
   <text>User defined literals are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [lex.ext]"/>
   </references>
  </message>
  <message id="1135" level="QA_WARNING" help="doc-en_US/doc/messages/1135.html" severity="2">
   <text>Attributes are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.attr]"/>
   </references>
  </message>
  <message id="1136" level="QA_WARNING" help="doc-en_US/doc/messages/1136.html" severity="2">
   <text>alignof is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [expr.alignof]"/>
   </references>
  </message>
  <message id="1137" level="QA_WARNING" help="doc-en_US/doc/messages/1137.html" severity="2">
   <text>constexpr is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [expr.const]"/>
   </references>
  </message>
  <message id="1138" level="QA_WARNING" help="doc-en_US/doc/messages/1138.html" severity="2">
   <text>Inheriting constructors are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [class.inhctor]"/>
   </references>
  </message>
  <message id="1139" level="QA_WARNING" help="doc-en_US/doc/messages/1139.html" severity="2">
   <text>Range-based for statements are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [stmt.ranged]"/>
   </references>
  </message>
  <message id="1140" level="QA_WARNING" help="doc-en_US/doc/messages/1140.html" severity="2">
   <text>Template default arguments in function templates are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [temp.param#9]"/>
   </references>
  </message>
  <message id="1141" level="QA_WARNING" help="doc-en_US/doc/messages/1141.html" severity="2">
   <text>Using 'this' outside of a member function body is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [expr.prim#general-3]"/>
   </references>
  </message>
  <message id="1142" level="QA_WARNING" help="doc-en_US/doc/messages/1142.html" severity="2">
   <text>Initializer lists are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.init.list]"/>
   </references>
  </message>
  <message id="1143" level="QA_WARNING" help="doc-en_US/doc/messages/1143.html" severity="2">
   <text>Non static data member initializers are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [class.mem]"/>
   </references>
  </message>
  <message id="1144" level="QA_WARNING" help="doc-en_US/doc/messages/1144.html" severity="2">
   <text>Lambda expressions are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [expr.prim.lambda]"/>
   </references>
  </message>
  <message id="1145" level="QA_WARNING" help="doc-en_US/doc/messages/1145.html" severity="2">
   <text>Placeholder type 'decltype(auto)' is only supported from C++ '14.</text>
   <references>
    <reference source="ISO 2014 C++ Language [dcl.spec.auto]"/>
   </references>
  </message>
  <message id="1146" level="QA_WARNING" help="doc-en_US/doc/messages/1146.html" severity="2">
   <text>Deduction of function return types is only supported from C++ '14.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.spec.auto]"/>
   </references>
  </message>
  <message id="1147" level="QA_WARNING" help="doc-en_US/doc/messages/1147.html" severity="2">
   <text>The 'nullptr' keyword is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [lex.nullptr]"/>
   </references>
  </message>
  <message id="1148" level="QA_WARNING" help="doc-en_US/doc/messages/1148.html" severity="2">
   <text>Raw string literals are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [lex.string]"/>
   </references>
  </message>
  <message id="1149" level="QA_WARNING" help="doc-en_US/doc/messages/1149.html" severity="2">
   <text>UTF-8 string literals are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [lex.string]"/>
   </references>
  </message>
  <message id="1150" level="QA_WARNING" help="doc-en_US/doc/messages/1150.html" severity="2">
   <text>Unicode character types are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [lex.string]"/>
   </references>
  </message>
  <message id="1151" level="QA_WARNING" help="doc-en_US/doc/messages/1151.html" severity="2">
   <text>Binary literals are only supported from C++ '14.</text>
   <references>
    <reference source="ISO 2014 C++ Language [lex.icon]"/>
   </references>
  </message>
  <message id="1152" level="QA_WARNING" help="doc-en_US/doc/messages/1152.html" severity="2">
   <text>Digit separators are only supported from C++ '14.</text>
   <references>
    <reference source="ISO 2014 C++ Language [lex.literal]"/>
   </references>
  </message>
  <message id="1153" level="QA_WARNING" help="doc-en_US/doc/messages/1153.html" severity="2">
   <text>Generic lambda expressions are only supported from C++ '14.</text>
   <references>
    <reference source="ISO 2014 C++ Language [expr.prim.lambda]"/>
   </references>
  </message>
  <message id="1154" level="QA_WARNING" help="doc-en_US/doc/messages/1154.html" severity="2">
   <text>Variable templates are only supported from C++ '14.</text>
   <references>
    <reference source="ISO 2014 C++ Language [temp]"/>
   </references>
  </message>
  <message id="1155" level="QA_WARNING" help="doc-en_US/doc/messages/1155.html" severity="2">
   <text>'static_assert' declarations are only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.dcl]"/>
   </references>
  </message>
  <message id="1156" level="QA_WARNING" help="doc-en_US/doc/messages/1156.html" severity="2">
   <text>'static_assert' declarations without a string literal are only supported from C++ '17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [dcl.dcl]"/>
   </references>
  </message>
  <message id="1157" level="QA_WARNING" help="doc-en_US/doc/messages/1157.html" severity="2">
   <text>This is declaring a C++ '14 sized deallocation function.</text>
   <references>
    <reference source="ISO 2014 C++ Language [basic.stc.dynamic]"/>
   </references>
  </message>
  <message id="1158" level="QA_WARNING" help="doc-en_US/doc/messages/1158.html" severity="2">
   <text>This is declaring a C++ '11 unrestricted union.</text>
   <references>
    <reference source="ISO 2011 C++ Language [class.union]"/>
   </references>
  </message>
  <message id="1159" level="QA_WARNING" help="doc-en_US/doc/messages/1159.html" severity="2">
   <text>This is declaring a C++ '11 unrestricted union with a default member initializer.</text>
   <references>
    <reference source="ISO 2017 C++ Language [class.ctor]"/>
   </references>
  </message>
  <message id="1160" level="QA_WARNING" help="doc-en_US/doc/messages/1160.html" severity="2">
   <text>Support for register used as a storage class specifier was removed in C++ '17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [dcl.stc]"/>
   </references>
  </message>
  <message id="1161" level="QA_WARNING" help="doc-en_US/doc/messages/1161.html" severity="2">
   <text>The 'thread_local' keyword is only supported from C++ 11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [dcl.stc]"/>
   </references>
  </message>
  <message id="1162" level="QA_WARNING" help="doc-en_US/doc/messages/1162.html" severity="2">
   <text>Hexadecimal floating literals are only supported from C++ '17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [lex.fcon]"/>
   </references>
  </message>
  <message id="1163" level="QA_WARNING" help="doc-en_US/doc/messages/1163.html" severity="2">
   <text>Universal character names may not be supported by some compilers.</text>
   <references>
    <reference source="ISO 2003 C++ Language [2.10]"/>
   </references>
  </message>
  <message id="1164" level="QA_WARNING" help="doc-en_US/doc/messages/1164.html" severity="2">
   <text>Universal character names in literals may not be supported by some compilers.</text>
   <references>
    <reference source="ISO 2003 C++ Language [2.13.4]"/>
   </references>
  </message>
  <message id="1165" level="QA_WARNING" help="doc-en_US/doc/messages/1165.html" severity="2">
   <text>The '__has_include' operator is only supported from C++ '17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [cpp.cond]"/>
   </references>
  </message>
  <message id="1166" level="QA_WARNING" help="doc-en_US/doc/messages/1166.html" severity="2">
   <text>The '__has_include_next' operator is a non-standard extension.</text>
   <references>
    <reference source="ISO 2017 C++ Language [19.1]"/>
   </references>
  </message>
  <message id="1167" level="QA_WARNING" help="doc-en_US/doc/messages/1167.html" severity="3">
   <text>'_Pragma' is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [cpp.pragma.op]"/>
   </references>
  </message>
  <message id="1168" level="QA_WARNING" help="doc-en_US/doc/messages/1168.html" severity="6">
   <text>This is passing a prefixed string as the operand to '_Pragma'. The prefix '%s' will be ignored.</text>
   <references>
    <reference source="ISO 2011 C++ Language [16.9]"/>
   </references>
  </message>
  <message id="1169" level="QA_WARNING" help="doc-en_US/doc/messages/1169.html" severity="4">
   <text>Evaluating the '_Pragma' operator within a directive is not universally supported.</text>
   <references>
    <reference source="ISO 2011 C++ Language [16.9]"/>
   </references>
  </message>
  <message id="1170" level="QA_WARNING" help="doc-en_US/doc/messages/1170.html" severity="6">
   <text>This '_Pragma' operator expression is ill-formed.</text>
   <references>
      </references>
  </message>
  <message id="1171" level="QA_WARNING" help="doc-en_US/doc/messages/1171.html" severity="6">
   <text>Using the '_Pragma' operator with '#%1s'.</text>
   <references>
    <reference source="ISO 2011 C++ Language [16.9]"/>
   </references>
  </message>
  <message id="1172" level="QA_WARNING" help="doc-en_US/doc/messages/1172.html" severity="2">
   <text>'constexpr if' statements are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [stmt.if]"/>
   </references>
  </message>
  <message id="1173" level="QA_WARNING" help="doc-en_US/doc/messages/1173.html" severity="2">
   <text>Fold expressions are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [expr.prim.fold]"/>
   </references>
  </message>
  <message id="1174" level="QA_WARNING" help="doc-en_US/doc/messages/1174.html" severity="2">
   <text>Deduction guides are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [temp.deduct.guide]"/>
   </references>
  </message>
  <message id="1175" level="QA_WARNING" help="doc-en_US/doc/messages/1175.html" severity="2">
   <text>Class template argument deduction is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [dcl.type.class.deduct]"/>
   </references>
  </message>
  <message id="1176" level="QA_WARNING" help="doc-en_US/doc/messages/1176.html" severity="2">
   <text>Inline variables are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [dcl.inline]"/>
   </references>
  </message>
  <message id="1177" level="QA_WARNING" help="doc-en_US/doc/messages/1177.html" severity="2">
   <text>Nested namespace definitions are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [namespace.def]"/>
   </references>
  </message>
  <message id="1178" level="QA_WARNING" help="doc-en_US/doc/messages/1178.html" severity="2">
   <text>Nested inline namespace definitions are only supported from C++ 20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [namespace.def]"/>
   </references>
  </message>
  <message id="1179" level="QA_WARNING" help="doc-en_US/doc/messages/1179.html" severity="2">
   <text>Init statement in selection statement condition is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [stmt.select]"/>
   </references>
  </message>
  <message id="1180" level="QA_WARNING" help="doc-en_US/doc/messages/1180.html" severity="2">
   <text>Init statement in range-based for loop is only supported from C++ 20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [stmt.ranged]"/>
   </references>
  </message>
  <message id="1181" level="QA_WARNING" help="doc-en_US/doc/messages/1181.html" severity="2">
   <text>Structured binding declarations are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [dcl.struct.bind]"/>
   </references>
  </message>
  <message id="1182" level="QA_WARNING" help="doc-en_US/doc/messages/1182.html" severity="2">
   <text>Structured binding declarations with a storage class specifier are only supported from C++ 20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [dcl.struct.bind]"/>
   </references>
  </message>
  <message id="1183" level="QA_WARNING" help="doc-en_US/doc/messages/1183.html" severity="2">
   <text>Enum direct list initialization is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [dcl.enum]"/>
   </references>
  </message>
  <message id="1184" level="QA_WARNING" help="doc-en_US/doc/messages/1184.html" severity="2">
   <text>In-class explicit specializations are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [temp.expl.spec]"/>
   </references>
  </message>
  <message id="1185" level="QA_WARNING" help="doc-en_US/doc/messages/1185.html" severity="2">
   <text>UTF-8 character literals are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [lex.ccon]"/>
   </references>
  </message>
  <message id="1186" level="QA_WARNING" help="doc-en_US/doc/messages/1186.html" severity="2">
   <text>Non-type template parameters of placeholder type are only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [temp.param]"/>
   </references>
  </message>
  <message id="1187" level="QA_WARNING" help="doc-en_US/doc/messages/1187.html" severity="2">
   <text>The use of 'typename' in a template template parameter is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [temp.param]"/>
   </references>
  </message>
  <message id="1188" level="QA_WARNING" help="doc-en_US/doc/messages/1188.html" severity="2">
   <text>A using declaration with a declarator list is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [namespace.udecl]"/>
   </references>
  </message>
  <message id="1189" level="QA_WARNING" help="doc-en_US/doc/messages/1189.html" severity="2">
   <text>A using declaration with a pack expansion is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [namespace.udecl]"/>
   </references>
  </message>
  <message id="1190" level="QA_WARNING" help="doc-en_US/doc/messages/1190.html" severity="2">
   <text>Capturing '*this' is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [expr.prim.lambda.capture]"/>
   </references>
  </message>
  <message id="1191" level="QA_WARNING" help="doc-en_US/doc/messages/1191.html" severity="2">
   <text>Capturing 'this' with a default by-value capture is only supported from C++ 20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [expr.prim.lambda.capture]"/>
   </references>
  </message>
  <message id="1192" level="QA_WARNING" help="doc-en_US/doc/messages/1192.html" severity="2">
   <text>A constexpr lambda expression is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [expr.prim.lambda.closure]"/>
   </references>
  </message>
  <message id="1193" level="QA_WARNING" help="doc-en_US/doc/messages/1193.html" severity="2">
   <text>The '%1s' length modifier is only supported from C++ 11.</text>
   <references>
    <reference source="ISO 2011 C++ Language [c.files]"/>
   </references>
  </message>
  <message id="1194" level="QA_WARNING" help="doc-en_US/doc/messages/1194.html" severity="2">
   <text>Resolving a new-extended operator new from fundamentally aligned types is only supported from C++ 20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [expr.new]"/>
   </references>
  </message>
  <message id="1195" level="QA_WARNING" help="doc-en_US/doc/messages/1195.html" severity="2">
   <text>Dynamic allocation of over-aligned types is only supported from C++17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [expr.new]"/>
   </references>
  </message>
  <message id="1196" level="QA_WARNING" help="doc-en_US/doc/messages/1196.html" severity="2">
   <text>Guaranteed copy elision is only supported from C++ 17.</text>
   <references>
    <reference source="ISO 2017 C++ Language [class.temporary]"/>
   </references>
  </message>
  <message id="1197" level="QA_WARNING" help="doc-en_US/doc/messages/1197.html" severity="3">
   <text>'__VA_OPT__' is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [cpp.subst]"/>
   </references>
  </message>
  <message id="1198" level="QA_WARNING" help="doc-en_US/doc/messages/1198.html" severity="2">
   <text>std::is_constant_evaluated is only supported from C++ 20</text>
   <references>
    <reference source="ISO 2020 C++ Language [meta.const.eval]"/>
   </references>
  </message>
  <message id="1199" level="QA_WARNING" help="doc-en_US/doc/messages/1199.html" severity="2">
   <text>Feature-Test macros are only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [cpp.predefined]"/>
   </references>
  </message>
  <message id="1200" level="QA_WARNING" help="doc-en_US/doc/messages/1200.html" severity="8">
   <text>Feature for '%1s' at version '%2s', support: '%3s'</text>
   <references>
    <reference source="ISO 2020 C++ Language [15.11]"/>
   </references>
  </message>
  <message id="1201" level="QA_WARNING" help="doc-en_US/doc/messages/1201.html" severity="2">
   <text>consteval is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [dcl.constexpr]"/>
   </references>
  </message>
  <message id="1202" level="QA_WARNING" help="doc-en_US/doc/messages/1202.html" severity="2">
   <text>The three-way comparison operator (&lt;=&gt;) is only supported from C++ 20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [expr.spaceship]"/>
   </references>
  </message>
  <message id="1203" level="QA_WARNING" help="doc-en_US/doc/messages/1203.html" severity="2">
   <text>This using declaration is only valid from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [enum.udecl]"/>
    <reference source="ISO 2020 C++ Language [namespace.udecl#3]"/>
   </references>
  </message>
  <message id="1204" level="QA_WARNING" help="doc-en_US/doc/messages/1204.html" severity="2">
   <text>constinit is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [dcl.constinit]"/>
   </references>
  </message>
  <message id="1205" level="QA_WARNING" help="doc-en_US/doc/messages/1205.html" severity="2">
   <text>explicit(bool) is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [dcl.fct.spec#4]"/>
   </references>
  </message>
  <message id="1206" level="QA_WARNING" help="doc-en_US/doc/messages/1206.html" severity="2">
   <text>Defaulted comparison functions are only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [class.compare]"/>
   </references>
  </message>
  <message id="1207" level="QA_WARNING" help="doc-en_US/doc/messages/1207.html" severity="2">
   <text>Try block in a constexpr function is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [dcl.constexpr]"/>
   </references>
  </message>
  <message id="1208" level="QA_WARNING" help="doc-en_US/doc/messages/1208.html" severity="2">
   <text>Rewritten and Synthesized operators are only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [class.compare]"/>
   </references>
  </message>
  <message id="1209" level="QA_WARNING" help="doc-en_US/doc/messages/1209.html" severity="2">
   <text>The %1s directive is only supported from C++ '23.</text>
   <references>
    <reference source="ISO 2023 C++ Language [cpp.cond]"/>
   </references>
  </message>
  <message id="1210" level="QA_WARNING" help="doc-en_US/doc/messages/1210.html" severity="2">
   <text>'%1s' is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [expr.prim.req]"/>
   </references>
  </message>
  <message id="1211" level="QA_WARNING" help="doc-en_US/doc/messages/1211.html" severity="2">
   <text>Template parameter list for a lambda declaration is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [expr.prim.lambda]"/>
   </references>
  </message>
  <message id="1212" level="QA_WARNING" help="doc-en_US/doc/messages/1212.html" severity="1">
   <text>This is an #undef directive for a macro defined earlier in a different file.</text>
   <references>
      </references>
  </message>
  <message id="1213" level="QA_WARNING" help="doc-en_US/doc/messages/1213.html" severity="2">
   <text>Avoid macros.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Industrial Strength C++ [Rule.13.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1214" level="QA_WARNING" help="doc-en_US/doc/messages/1214.html" severity="2">
   <text>Avoid macros.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item1]"/>
    <reference source="Effective C++ 3rd Edition [Item2]"/>
    <reference source="Industrial Strength C++ [Rule.13.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1215" level="QA_WARNING" help="doc-en_US/doc/messages/1215.html" severity="2">
   <text>Use C++ 17 init statement.</text>
   <references>
    <reference source="ISO 2017 C++ Language [stmt.select]"/>
   </references>
  </message>
  <message id="1216" level="QA_WARNING" help="doc-en_US/doc/messages/1216.html" severity="2">
   <text>Abbreviated function template is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [dcl.fct]"/>
   </references>
  </message>
  <message id="1217" level="QA_WARNING" help="doc-en_US/doc/messages/1217.html" severity="6">
   <text>This cast followed by a braced-init-list is being interpreted as a compound literal.</text>
   <references>
      </references>
  </message>
  <message id="1218" level="QA_WARNING" help="doc-en_US/doc/messages/1218.html" severity="2">
   <text>Use of 'float' or literal class types as nontype template parameters is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [tmpl.param]"/>
   </references>
  </message>
  <message id="1219" level="QA_WARNING" help="doc-en_US/doc/messages/1219.html" severity="2">
   <text>Use of the qualified name '%1s' without the 'typename' keyword in this context is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [temp.res]"/>
   </references>
  </message>
  <message id="1220" level="QA_WARNING" help="doc-en_US/doc/messages/1220.html" severity="2">
   <text>Deduction of the value in a noexcept specification is only supported from C++ '23.</text>
   <references>
    <reference source="ISO 2023 C++ Language [temp.deduct.type]"/>
   </references>
  </message>
  <message id="1221" level="QA_WARNING" help="doc-en_US/doc/messages/1221.html" severity="2">
   <text>Use of __func__ to refer to the current function, %1s, is only supported from C++ '11.</text>
   <references>
    <reference source="ISO 2020 C++ Language [tmpl.param]"/>
   </references>
  </message>
  <message id="1222" level="QA_WARNING" help="doc-en_US/doc/messages/1222.html" severity="6">
   <text>Referring to the "pretty name" of the current function, %1s, is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1223" level="QA_WARNING" help="doc-en_US/doc/messages/1223.html" severity="2">
   <text>char8_t is only supported from C++ '20.</text>
   <references>
    <reference source="ISO 2020 C++ Language [lex.string]"/>
   </references>
  </message>
  <message id="1224" level="QA_WARNING" help="doc-en_US/doc/messages/1224.html" severity="2">
   <text>This attribute syntax is an extension.</text>
   <references>
      </references>
  </message>
  <message id="1225" level="QA_WARNING" help="doc-en_US/doc/messages/1225.html" severity="2">
   <text>The '#embed' directive is a language extension.</text>
   <references>
    <reference source="ISO 2023 C++ Language [cpp.cond]"/>
   </references>
  </message>
  <message id="1226" level="QA_WARNING" help="doc-en_US/doc/messages/1226.html" severity="2">
   <text>The '__has_embed' operator is a language extension.</text>
   <references>
    <reference source="ISO 2023 C++ Language [cpp.cond]"/>
   </references>
  </message>
  <message id="1490" level="QA_INFORMATION" help="doc-en_US/doc/messages/1490.html" severity="0">
   <text>Class '%1s' not used in this header.</text>
   <references>
      </references>
  </message>
  <message id="1491" level="QA_INFORMATION" help="doc-en_US/doc/messages/1491.html" severity="0">
   <text>Declaration of class '%1s' used here.</text>
   <references>
      </references>
  </message>
  <message id="1492" level="QA_INFORMATION" help="doc-en_US/doc/messages/1492.html" severity="0">
   <text>Definition of class '%1s' used here.</text>
   <references>
      </references>
  </message>
  <message id="1561" level="QA_INFORMATION" help="" severity="0">
   <text>Lambda stored here.</text>
   <references>
      </references>
  </message>
  <message id="1562" level="QA_INFORMATION" help="" severity="0">
   <text>Offending type '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1563" level="QA_INFORMATION" help="" severity="0">
   <text>Entity '%1s' accessed or called here.</text>
   <references>
      </references>
  </message>
  <message id="1564" level="QA_INFORMATION" help="" severity="0">
   <text>Statement stops function returning normally to caller.</text>
   <references>
      </references>
  </message>
  <message id="1565" level="QA_INFORMATION" help="" severity="0">
   <text>Resource was orphaned here.</text>
   <references>
      </references>
  </message>
  <message id="1566" level="QA_INFORMATION" help="" severity="0">
   <text>Thread '%1s' created here'%3s' by thread '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="1567" level="QA_INFORMATION" help="" severity="0">
   <text>Macro '%1s' expanded here.</text>
   <references>
      </references>
  </message>
  <message id="1568" level="QA_INFORMATION" help="" severity="0">
   <text>Thread '%1s' holds lock '%2s' and attempts to lock '%3s'.</text>
   <references>
      </references>
  </message>
  <message id="1570" level="QA_INFORMATION" help="" severity="0">
   <text>Called from here.</text>
   <references>
      </references>
  </message>
  <message id="1571" level="QA_INFORMATION" help="" severity="0">
   <text>Occurs on %1s iteration.</text>
   <references>
      </references>
  </message>
  <message id="1572" level="QA_INFORMATION" help="" severity="0">
   <text>Return statement here.</text>
   <references>
      </references>
  </message>
  <message id="1573" level="QA_INFORMATION" help="" severity="0">
   <text>Last unreachable statement.</text>
   <references>
      </references>
  </message>
  <message id="1574" level="QA_INFORMATION" help="" severity="0">
   <text>Viable path.</text>
   <references>
      </references>
  </message>
  <message id="1575" level="QA_INFORMATION" help="" severity="0">
   <text>Variable '%1s' previously seen here. (Specimen value: '%2s').</text>
   <references>
      </references>
  </message>
  <message id="1576" level="QA_INFORMATION" help="" severity="0">
   <text>Label statement here.</text>
   <references>
      </references>
  </message>
  <message id="1577" level="QA_INFORMATION" help="" severity="0">
   <text>Next seen here.</text>
   <references>
      </references>
  </message>
  <message id="1578" level="QA_INFORMATION" help="" severity="0">
   <text>Found in directory: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1579" level="QA_INFORMATION" help="" severity="0">
   <text>Referenced here.</text>
   <references>
      </references>
  </message>
  <message id="1580" level="QA_INFORMATION" help="" severity="0">
   <text>Function '%1s' calls '%2s' here.</text>
   <references>
      </references>
  </message>
  <message id="1581" level="QA_INFORMATION" help="" severity="0">
   <text>%1s %2s here.</text>
   <references>
      </references>
  </message>
  <message id="1582" level="QA_INFORMATION" help="" severity="0">
   <text>Previously seen here.</text>
   <references>
      </references>
  </message>
  <message id="1583" level="QA_INFORMATION" help="" severity="0">
   <text>Caught here.</text>
   <references>
      </references>
  </message>
  <message id="1584" level="QA_INFORMATION" help="" severity="0">
   <text>Next modified here.</text>
   <references>
      </references>
  </message>
  <message id="1585" level="QA_INFORMATION" help="" severity="0">
   <text>Next set here.</text>
   <references>
      </references>
  </message>
  <message id="1586" level="QA_INFORMATION" help="" severity="0">
   <text>Previously set here.</text>
   <references>
      </references>
  </message>
  <message id="1587" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' modified here.</text>
   <references>
      </references>
  </message>
  <message id="1588" level="QA_INFORMATION" help="" severity="0">
   <text>Initialized here.</text>
   <references>
      </references>
  </message>
  <message id="1589" level="QA_INFORMATION" help="" severity="0">
   <text>Exception specification for '%1s' declared here.</text>
   <references>
      </references>
  </message>
  <message id="1590" level="QA_INFORMATION" help="" severity="0">
   <text>Offending operand.</text>
   <references>
      </references>
  </message>
  <message id="1591" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' is derived from base '%2s' here.</text>
   <references>
      </references>
  </message>
  <message id="1592" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' declared in %2s '%3s'.</text>
   <references>
      </references>
  </message>
  <message id="1593" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' defined here.</text>
   <references>
      </references>
  </message>
  <message id="1594" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' declared here.</text>
   <references>
      </references>
  </message>
  <message id="1595" level="QA_INFORMATION" help="" severity="0">
   <text>Previously defined here.</text>
   <references>
      </references>
  </message>
  <message id="1596" level="QA_INFORMATION" help="" severity="0">
   <text>Previously declared here.</text>
   <references>
      </references>
  </message>
  <message id="1597" level="QA_INFORMATION" help="" severity="0">
   <text>Instantiated from here, with arguments '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1598" level="QA_INFORMATION" help="" severity="0">
   <text>Expanded from macro '%1s' here.</text>
   <references>
      </references>
  </message>
  <message id="1599" level="QA_INFORMATION" help="" severity="0">
   <text>Included from here.</text>
   <references>
      </references>
  </message>
  <message id="1800" level="QA_WARNING" help="doc-en_US/doc/messages/1800.html" severity="2">
   <text>This indentation is not consistent with previous statements.</text>
   <references>
      </references>
  </message>
  <message id="1801" level="QA_WARNING" help="doc-en_US/doc/messages/1801.html" severity="2">
   <text>The left brace '{' of a compound block has not been indented beyond its owning statement.</text>
   <references>
      </references>
  </message>
  <message id="1802" level="QA_WARNING" help="doc-en_US/doc/messages/1802.html" severity="2">
   <text>The right brace '}' has not been indented between the statement owning the compound block and the left brace '{'.</text>
   <references>
      </references>
  </message>
  <message id="1803" level="QA_WARNING" help="doc-en_US/doc/messages/1803.html" severity="2">
   <text>The sub-statement has not been indented further than the %1s.</text>
   <references>
      </references>
  </message>
  <message id="1804" level="QA_WARNING" help="doc-en_US/doc/messages/1804.html" severity="2">
   <text>The 'if' and 'else' keywords are not in the same column.</text>
   <references>
      </references>
  </message>
  <message id="1805" level="QA_WARNING" help="doc-en_US/doc/messages/1805.html" severity="2">
   <text>This statement is not level with, or beyond, the '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1806" level="QA_WARNING" help="doc-en_US/doc/messages/1806.html" severity="2">
   <text>The 'while' has not been indented level with, or past, the 'do'.</text>
   <references>
      </references>
  </message>
  <message id="1807" level="QA_WARNING" help="doc-en_US/doc/messages/1807.html" severity="2">
   <text>The colon is not on the same line as the label '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1808" level="QA_WARNING" help="doc-en_US/doc/messages/1808.html" severity="2">
   <text>Statements should appear on separate lines.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1850" level="QA_WARNING" help="doc-en_US/doc/messages/1850.html" severity="2">
   <text>'%2s' should be '%1s' spaces to the left.</text>
   <references>
      </references>
  </message>
  <message id="1851" level="QA_WARNING" help="doc-en_US/doc/messages/1851.html" severity="2">
   <text>'%2s' should be '%1s' spaces to the right.</text>
   <references>
      </references>
  </message>
  <message id="1852" level="QA_WARNING" help="doc-en_US/doc/messages/1852.html" severity="2">
   <text>There should be at least one space before '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1853" level="QA_WARNING" help="doc-en_US/doc/messages/1853.html" severity="2">
   <text>'%1s' should be on line '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="1854" level="QA_WARNING" help="doc-en_US/doc/messages/1854.html" severity="2">
   <text>There should be at least '%1s' line breaks before '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="1855" level="QA_WARNING" help="doc-en_US/doc/messages/1855.html" severity="2">
   <text>There should be no line break before '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1856" level="QA_WARNING" help="doc-en_US/doc/messages/1856.html" severity="2">
   <text>'%1s' should start a line, indented by '%2s' spaces.</text>
   <references>
      </references>
  </message>
  <message id="1857" level="QA_WARNING" help="doc-en_US/doc/messages/1857.html" severity="2">
   <text>'%1s' should be on the same line as '%2s', separated by '%3s' spaces.</text>
   <references>
      </references>
  </message>
  <message id="1950" level="QA_WARNING" help="doc-en_US/doc/messages/1950.html" severity="1">
   <text>'%1s' Rule match failure.</text>
   <references>
      </references>
  </message>
  <message id="1951" level="QA_WARNING" help="doc-en_US/doc/messages/1951.html" severity="1">
   <text>This node cannot be analyzed.</text>
   <references>
      </references>
  </message>
  <message id="1962" level="QA_WARNING" help="doc-en_US/doc/messages/1962.html" severity="1">
   <text>Layout needs a definition for the '%1s' checker.</text>
   <references>
      </references>
  </message>
  <message id="1963" level="QA_WARNING" help="doc-en_US/doc/messages/1963.html" severity="1">
   <text>'%1s' is declared in more than one category.</text>
   <references>
      </references>
  </message>
  <message id="1964" level="QA_WARNING" help="doc-en_US/doc/messages/1964.html" severity="1">
   <text>The newline decoration only makes sense if it precedes other decorations.</text>
   <references>
      </references>
  </message>
  <message id="1965" level="QA_WARNING" help="doc-en_US/doc/messages/1965.html" severity="1">
   <text>A space decoration cannot follow here.</text>
   <references>
      </references>
  </message>
  <message id="1966" level="QA_WARNING" help="doc-en_US/doc/messages/1966.html" severity="1">
   <text>An indent decoration must be preceded by a newline decoration.</text>
   <references>
      </references>
  </message>
  <message id="1967" level="QA_WARNING" help="doc-en_US/doc/messages/1967.html" severity="1">
   <text>A column decoration must be preceded by a newline decoration.</text>
   <references>
      </references>
  </message>
  <message id="1968" level="QA_WARNING" help="doc-en_US/doc/messages/1968.html" severity="1">
   <text>There are two sequential decorations of the same type.</text>
   <references>
      </references>
  </message>
  <message id="1969" level="QA_WARNING" help="doc-en_US/doc/messages/1969.html" severity="1">
   <text>This rule is equivalent to its category and so constitutes illegal recursion.</text>
   <references>
      </references>
  </message>
  <message id="1970" level="QA_WARNING" help="doc-en_US/doc/messages/1970.html" severity="1">
   <text>This rule is equivalent to itself and so constitutes illegal recursion.</text>
   <references>
      </references>
  </message>
  <message id="1971" level="QA_WARNING" help="doc-en_US/doc/messages/1971.html" severity="1">
   <text>You cannot nest rule branches.</text>
   <references>
      </references>
  </message>
  <message id="1972" level="QA_WARNING" help="doc-en_US/doc/messages/1972.html" severity="1">
   <text>The message number is invalid.</text>
   <references>
      </references>
  </message>
  <message id="1973" level="QA_WARNING" help="doc-en_US/doc/messages/1973.html" severity="1">
   <text>This category is not declared and is therefore being ignored.</text>
   <references>
      </references>
  </message>
  <message id="1974" level="QA_WARNING" help="doc-en_US/doc/messages/1974.html" severity="1">
   <text>This rule name has been used to declare a rule category.</text>
   <references>
      </references>
  </message>
  <message id="1975" level="QA_WARNING" help="doc-en_US/doc/messages/1975.html" severity="1">
   <text>This rule is already defined.</text>
   <references>
      </references>
  </message>
  <message id="1976" level="QA_WARNING" help="doc-en_US/doc/messages/1976.html" severity="1">
   <text>This category is already declared.</text>
   <references>
      </references>
  </message>
  <message id="1977" level="QA_WARNING" help="doc-en_US/doc/messages/1977.html" severity="1">
   <text>This is an invalid parameter to the decoration.</text>
   <references>
      </references>
  </message>
  <message id="1978" level="QA_WARNING" help="doc-en_US/doc/messages/1978.html" severity="1">
   <text>This is an invalid decoration. Have you used the correct decoration symbol?</text>
   <references>
      </references>
  </message>
  <message id="1979" level="QA_WARNING" help="doc-en_US/doc/messages/1979.html" severity="1">
   <text>You cannot have nested decoration sequences.</text>
   <references>
      </references>
  </message>
  <message id="1980" level="QA_WARNING" help="doc-en_US/doc/messages/1980.html" severity="1">
   <text>Rule referenced but not defined.  A definition for '%1s' is required.</text>
   <references>
      </references>
  </message>
  <message id="1982" level="QA_WARNING" help="doc-en_US/doc/messages/1982.html" severity="1">
   <text>The indent width value, set via -layoutindentwidth on the command line, is not valid.</text>
   <references>
      </references>
  </message>
  <message id="1984" level="QA_WARNING" help="doc-en_US/doc/messages/1984.html" severity="1">
   <text>No definition for layout rule '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1985" level="QA_WARNING" help="doc-en_US/doc/messages/1985.html" severity="1">
   <text>The dummy rule '%1s' has a definition or equivalent nodes - use the special '@' lexeme to indicate that the rule is a dummy.</text>
   <references>
      </references>
  </message>
  <message id="1986" level="QA_WARNING" help="doc-en_US/doc/messages/1986.html" severity="1">
   <text>Could not open layout file.</text>
   <references>
      </references>
  </message>
  <message id="1987" level="QA_WARNING" help="doc-en_US/doc/messages/1987.html" severity="1">
   <text>No line break decorations must appear alone in a sequence.</text>
   <references>
      </references>
  </message>
  <message id="1989" level="QA_WARNING" help="doc-en_US/doc/messages/1989.html" severity="1">
   <text>There should not be a rule '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1990" level="QA_WARNING" help="doc-en_US/doc/messages/1990.html" severity="1">
   <text>You can only specify no line break decoration (that is, '/n0') once in a decoration prefix.</text>
   <references>
      </references>
  </message>
  <message id="1991" level="QA_WARNING" help="doc-en_US/doc/messages/1991.html" severity="1">
   <text>You cannot have a no line break decoration (that is, '/n0') in the same prefix as line breaking decorations.</text>
   <references>
      </references>
  </message>
  <message id="2000" level="QA_WARNING" help="doc-en_US/doc/messages/2000.html" severity="1">
   <text>The function '%1s' is in the global scope.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item28]"/>
    <reference source="Industrial Strength C++ [Rules.1.4]"/>
   </references>
  </message>
  <message id="2001" level="QA_WARNING" help="doc-en_US/doc/messages/2001.html" severity="2">
   <text>This is a raw pointer member.</text>
   <references>
    <reference source="More Effective C++ [Item10]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2002" level="QA_WARNING" help="doc-en_US/doc/messages/2002.html" severity="1">
   <text>This is an integer object of type 'short' or 'unsigned short'.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.9]"/>
   </references>
  </message>
  <message id="2003" level="QA_WARNING" help="doc-en_US/doc/messages/2003.html" severity="1">
   <text>This is an integer object of type 'long' or 'unsigned long'.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.9]"/>
   </references>
  </message>
  <message id="2004" level="QA_WARNING" help="doc-en_US/doc/messages/2004.html" severity="1">
   <text>This function has an integer parameter of type 'short' or 'unsigned short'.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.9]"/>
   </references>
  </message>
  <message id="2005" level="QA_WARNING" help="doc-en_US/doc/messages/2005.html" severity="3">
   <text>This function has an integer parameter of type 'long' or 'unsigned long'.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.9]"/>
   </references>
  </message>
  <message id="2006" level="QA_WARNING" help="doc-en_US/doc/messages/2006.html" severity="1">
   <text>This function has a 'short' or 'unsigned short' integer return type.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.9]"/>
   </references>
  </message>
  <message id="2007" level="QA_WARNING" help="doc-en_US/doc/messages/2007.html" severity="1">
   <text>This function has a 'long' or 'unsigned long' integer return type.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.15.9]"/>
   </references>
  </message>
  <message id="2008" level="QA_WARNING" help="doc-en_US/doc/messages/2008.html" severity="2">
   <text>This function parameter exceeds the maximum size allowed for the "being passed by" value (%1s bytes).</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item22]"/>
    <reference source="Effective C++ 3rd Edition [Item20]"/>
   </references>
  </message>
  <message id="2009" level="QA_WARNING" help="doc-en_US/doc/messages/2009.html" severity="2">
   <text>This function parameter exceeds the maximum size allowed for the "being passed by" value (%1s bytes).  Consider declaring it as const reference.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.7.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item22]"/>
    <reference source="Effective C++ 3rd Edition [Item20]"/>
   </references>
  </message>
  <message id="2010" level="QA_WARNING" help="doc-en_US/doc/messages/2010.html" severity="2">
   <text>This function parameter is passed by value.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.7.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item22]"/>
    <reference source="Effective C++ 3rd Edition [Item20]"/>
   </references>
  </message>
  <message id="2011" level="QA_WARNING" help="doc-en_US/doc/messages/2011.html" severity="6">
   <text>Function '%1s' returns a reference or pointer to non-const data.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item21]"/>
    <reference source="Effective C++ 3rd Edition [Item3]"/>
   </references>
  </message>
  <message id="2012" level="QA_WARNING" help="doc-en_US/doc/messages/2012.html" severity="2">
   <text>This function accepts an unlimited number of parameters.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.13.4]"/>
   </references>
  </message>
  <message id="2013" level="QA_WARNING" help="doc-en_US/doc/messages/2013.html" severity="6">
   <text>Parameter %1s is a potential base class passed by value.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.6]"/>
   </references>
  </message>
  <message id="2014" level="QA_WARNING" help="doc-en_US/doc/messages/2014.html" severity="6">
   <text>This qualified template member function is not declared inline.</text>
   <references>
      </references>
  </message>
  <message id="2015" level="QA_WARNING" help="doc-en_US/doc/messages/2015.html" severity="1">
   <text>This function may be called with default arguments.</text>
   <references>
      </references>
  </message>
  <message id="2016" level="QA_WARNING" help="doc-en_US/doc/messages/2016.html" severity="2">
   <text>This function redeclaration defines default arguments.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.17]"/>
   </references>
  </message>
  <message id="2017" level="QA_WARNING" help="doc-en_US/doc/messages/2017.html" severity="2">
   <text>This function redeclaration declares parameter names that are different from those in the original declaration.</text>
   <references>
      </references>
  </message>
  <message id="2018" level="QA_WARNING" help="doc-en_US/doc/messages/2018.html" severity="8">
   <text>The default value is different from the overridden function.</text>
   <references>
    <reference source="C++ FAQs [144]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item38]"/>
    <reference source="Effective C++ 3rd Edition [Item37]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2019" level="QA_WARNING" help="doc-en_US/doc/messages/2019.html" severity="3">
   <text>This virtual function in the derived class does not have a default argument.</text>
   <references>
    <reference source="C++ FAQs [144]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item38]"/>
    <reference source="Effective C++ 3rd Edition [Item37]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2020" level="QA_WARNING" help="doc-en_US/doc/messages/2020.html" severity="6">
   <text>Function '%1s' has overloaded functions for a pointer and an integral type argument.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item25]"/>
   </references>
  </message>
  <message id="2021" level="QA_WARNING" help="doc-en_US/doc/messages/2021.html" severity="6">
   <text>Literal operator '%1s' has overloaded functions for numeric and string type arguments.</text>
   <references>
    <reference source="ISO 2011 C++ Language [2.14.8]"/>
   </references>
  </message>
  <message id="2022" level="QA_WARNING" help="doc-en_US/doc/messages/2022.html" severity="8">
   <text>Literal operator '%1s' is declared as a raw literal operator and a literal operator template.</text>
   <references>
    <reference source="ISO 2011 C++ Language [2.14.8]"/>
   </references>
  </message>
  <message id="2023" level="QA_WARNING" help="doc-en_US/doc/messages/2023.html" severity="6">
   <text>Function '%1s' overloads a function with a forwarding reference parameter.</text>
   <references>
      </references>
  </message>
  <message id="2024" level="QA_WARNING" help="doc-en_US/doc/messages/2024.html" severity="3">
   <text>Function '%1s' does not have an identifiable documentation comment.</text>
   <references>
      </references>
  </message>
  <message id="2025" level="QA_WARNING" help="doc-en_US/doc/messages/2025.html" severity="3">
   <text>Type '%1s' does not have an identifiable documentation comment.</text>
   <references>
      </references>
  </message>
  <message id="2026" level="QA_WARNING" help="doc-en_US/doc/messages/2026.html" severity="3">
   <text>Data member '%1s' does not have an identifiable documentation comment.</text>
   <references>
      </references>
  </message>
  <message id="2027" level="QA_WARNING" help="doc-en_US/doc/messages/2027.html" severity="3">
   <text>The '@name' field in the documentation comment for %1s does not match.</text>
   <references>
      </references>
  </message>
  <message id="2028" level="QA_WARNING" help="doc-en_US/doc/messages/2028.html" severity="3">
   <text>The '@param' fields in the documentation comment for %1s do not match the declared parameter list.</text>
   <references>
      </references>
  </message>
  <message id="2029" level="QA_WARNING" help="doc-en_US/doc/messages/2029.html" severity="3">
   <text>The documentation comment for '%1s' is missing a '%2s' field.</text>
   <references>
      </references>
  </message>
  <message id="2030" level="QA_WARNING" help="doc-en_US/doc/messages/2030.html" severity="1">
   <text>This function does not have an exception specification.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.12.16]"/>
   </references>
  </message>
  <message id="2031" level="QA_WARNING" help="doc-en_US/doc/messages/2031.html" severity="5">
   <text>This function has a dependent type in the exception specification.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.12.16]"/>
   </references>
  </message>
  <message id="2032" level="QA_WARNING" help="doc-en_US/doc/messages/2032.html" severity="5">
   <text>The base class '%1s' makes specifying '%2s' redundant.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [15.4/6]"/>
   </references>
  </message>
  <message id="2033" level="QA_WARNING" help="doc-en_US/doc/messages/2033.html" severity="5">
   <text>'%1s' appears more than once in the exception specification.</text>
   <references>
    <reference source="ISO C++ Language [15.4/6]"/>
   </references>
  </message>
  <message id="2034" level="QA_WARNING" help="doc-en_US/doc/messages/2034.html" severity="7">
   <text>An empty throw specification has been used.</text>
   <references>
    <reference source="ISO C++ Language [15.4]"/>
   </references>
  </message>
  <message id="2035" level="QA_WARNING" help="doc-en_US/doc/messages/2035.html" severity="7">
   <text>A non-empty throw specification has been used.</text>
   <references>
    <reference source="ISO C++ Language [15.4]"/>
   </references>
  </message>
  <message id="2036" level="QA_WARNING" help="doc-en_US/doc/messages/2036.html" severity="7">
   <text>An empty throw specification has been used in a virtual or dependent function.</text>
   <references>
    <reference source="ISO C++ Language [15.4]"/>
   </references>
  </message>
  <message id="2037" level="QA_WARNING" help="doc-en_US/doc/messages/2037.html" severity="7">
   <text>A non-empty throw specification has been used in a virtual or dependent function.</text>
   <references>
    <reference source="ISO C++ Language [15.4]"/>
   </references>
  </message>
  <message id="2038" level="QA_WARNING" help="doc-en_US/doc/messages/2038.html" severity="7">
   <text>This move constructor or move assignment operator does not have an explicit exception specification.</text>
   <references>
      </references>
  </message>
  <message id="2039" level="QA_WARNING" help="doc-en_US/doc/messages/2039.html" severity="7">
   <text>This move constructor or move assignment operator has not been declared as "nothrow".</text>
   <references>
      </references>
  </message>
  <message id="2040" level="QA_WARNING" help="doc-en_US/doc/messages/2040.html" severity="6">
   <text>'main' used for function other than '::main'.</text>
   <references>
      </references>
  </message>
  <message id="2041" level="QA_WARNING" help="doc-en_US/doc/messages/2041.html" severity="6">
   <text>'main' used for member function.</text>
   <references>
      </references>
  </message>
  <message id="2042" level="QA_WARNING" help="doc-en_US/doc/messages/2042.html" severity="7">
   <text>This redeclaration mixes noexcept exception specifications with dynamic exception specifications.</text>
   <references>
      </references>
  </message>
  <message id="2043" level="QA_WARNING" help="doc-en_US/doc/messages/2043.html" severity="7">
   <text>This override mixes noexcept exception specifications with dynamic exception specifications.</text>
   <references>
      </references>
  </message>
  <message id="2044" level="QA_WARNING" help="doc-en_US/doc/messages/2044.html" severity="7">
   <text>This destructor does not have an explicit exception specification.</text>
   <references>
      </references>
  </message>
  <message id="2045" level="QA_WARNING" help="doc-en_US/doc/messages/2045.html" severity="7">
   <text>This destructor has not been declared as non-throwing.</text>
   <references>
      </references>
  </message>
  <message id="2046" level="QA_WARNING" help="doc-en_US/doc/messages/2046.html" severity="7">
   <text>This class deallocation function does not have an explicit exception specification.</text>
   <references>
      </references>
  </message>
  <message id="2047" level="QA_WARNING" help="doc-en_US/doc/messages/2047.html" severity="7">
   <text>This deallocation function has not been declared as non-throwing.</text>
   <references>
      </references>
  </message>
  <message id="2048" level="QA_WARNING" help="doc-en_US/doc/messages/2048.html" severity="7">
   <text>This 'swap' function has not been declared as non-throwing.</text>
   <references>
      </references>
  </message>
  <message id="2049" level="QA_WARNING" help="doc-en_US/doc/messages/2049.html" severity="4">
   <text>Entry point name '%1s' immediately followed by '(' token.</text>
   <references>
      </references>
  </message>
  <message id="2050" level="QA_WARNING" help="doc-en_US/doc/messages/2050.html" severity="5">
   <text>Function '%1s' is implicitly static.</text>
   <references>
    <reference source="ISO C++ Language [3.5]"/>
   </references>
  </message>
  <message id="2051" level="QA_WARNING" help="doc-en_US/doc/messages/2051.html" severity="6">
   <text>Assignment operator '%1s' does not have an explicit lvalue reference qualifier.</text>
   <references>
      </references>
  </message>
  <message id="2052" level="QA_WARNING" help="doc-en_US/doc/messages/2052.html" severity="7">
   <text>Constructor used to create a namespace scope object has not been declared as non-throwing.</text>
   <references>
      </references>
  </message>
  <message id="2066" level="QA_WARNING" help="doc-en_US/doc/messages/2066.html" severity="6">
   <text>Relational operator '%1s' is a member.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item19]"/>
    <reference source="Effective C++ 3rd Edition [Item24]"/>
   </references>
  </message>
  <message id="2067" level="QA_WARNING" help="doc-en_US/doc/messages/2067.html" severity="6">
   <text>This operator '%1s' is not noexcept.</text>
   <references>
      </references>
  </message>
  <message id="2068" level="QA_WARNING" help="doc-en_US/doc/messages/2068.html" severity="6">
   <text>This operator '%1s' does not have identical parameter types.</text>
   <references>
      </references>
  </message>
  <message id="2069" level="QA_WARNING" help="doc-en_US/doc/messages/2069.html" severity="6">
   <text>This operator '%1s' does not have a matching overload.</text>
   <references>
      </references>
  </message>
  <message id="2070" level="QA_WARNING" help="doc-en_US/doc/messages/2070.html" severity="6">
   <text>Binary operator '%1s' is a member.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item19]"/>
    <reference source="Effective C++ 3rd Edition [Item24]"/>
   </references>
  </message>
  <message id="2071" level="QA_WARNING" help="doc-en_US/doc/messages/2071.html" severity="6">
   <text>Binary operator '%1s' does not return a const object.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item21]"/>
    <reference source="Effective C++ 3rd Edition [Item3]"/>
   </references>
  </message>
  <message id="2072" level="QA_WARNING" help="doc-en_US/doc/messages/2072.html" severity="5">
   <text>Binary operator '%1s' should not return a reference.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item23]"/>
    <reference source="Effective C++ 3rd Edition [Item21]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2073" level="QA_WARNING" help="doc-en_US/doc/messages/2073.html" severity="6">
   <text>Logical operator '%1s' does not return a 'bool'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2074" level="QA_WARNING" help="doc-en_US/doc/messages/2074.html" severity="6">
   <text>Assignment operator '%1s' does not return an lvalue reference to the class in which it is defined.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2075" level="QA_WARNING" help="doc-en_US/doc/messages/2075.html" severity="4">
   <text>Avoid overloading the pointer to member operator (-&gt;*).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2076" level="QA_WARNING" help="doc-en_US/doc/messages/2076.html" severity="4">
   <text>Avoid overloading the pointer operator (-&gt;).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2077" level="QA_WARNING" help="doc-en_US/doc/messages/2077.html" severity="3">
   <text>Avoid overloading the comma operator (,).</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="More Effective C++ [Item7]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2078" level="QA_WARNING" help="doc-en_US/doc/messages/2078.html" severity="3">
   <text>Avoid overloading the 'and' operator (&amp;&amp;).</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="More Effective C++ [Item7]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2079" level="QA_WARNING" help="doc-en_US/doc/messages/2079.html" severity="3">
   <text>Avoid overloading the 'or' operator (||).</text>
   <references>
    <reference source="More Effective C++ [Item7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2080" level="QA_WARNING" help="doc-en_US/doc/messages/2080.html" severity="3">
   <text>This is an abstract base class with a public copy/move assignment operator.</text>
   <references>
    <reference source="More Effective C++ [Item33]"/>
   </references>
  </message>
  <message id="2081" level="QA_WARNING" help="doc-en_US/doc/messages/2081.html" severity="1">
   <text>This copy assignment operator has a non-const reference parameter.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2082" level="QA_WARNING" help="doc-en_US/doc/messages/2082.html" severity="1">
   <text>This copy assignment operator has a non-reference parameter.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2083" level="QA_WARNING" help="doc-en_US/doc/messages/2083.html" severity="1">
   <text>This declaration overloads an operator.</text>
   <references>
      </references>
  </message>
  <message id="2085" level="QA_WARNING" help="doc-en_US/doc/messages/2085.html" severity="4">
   <text>Declaration of '%1s' in for loop header hides an existing declaration.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2086" level="QA_WARNING" help="doc-en_US/doc/messages/2086.html" severity="6">
   <text>'%1s' was found after delayed lookup.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item43]"/>
   </references>
  </message>
  <message id="2087" level="QA_WARNING" help="doc-en_US/doc/messages/2087.html" severity="6">
   <text>This template may be used unexpectedly by argument-dependent lookup.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2088" level="QA_WARNING" help="doc-en_US/doc/messages/2088.html" severity="6">
   <text>This calls a function found with argument-dependent lookup that is declared after the function call.</text>
   <references>
      </references>
  </message>
  <message id="2089" level="QA_WARNING" help="doc-en_US/doc/messages/2089.html" severity="2">
   <text>Default argument on postfix increment or decrement operator ignored.</text>
   <references>
      </references>
  </message>
  <message id="2090" level="QA_WARNING" help="doc-en_US/doc/messages/2090.html" severity="1">
   <text>Named parameter used for argument on postfix increment or decrement operator.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2091" level="QA_WARNING" help="doc-en_US/doc/messages/2091.html" severity="5">
   <text>'int' not used explicitly as argument to postfix increment or decrement operator.</text>
   <references>
      </references>
  </message>
  <message id="2092" level="QA_WARNING" help="doc-en_US/doc/messages/2092.html" severity="6">
   <text>Avoid overloading the address-of operator.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2093" level="QA_WARNING" help="doc-en_US/doc/messages/2093.html" severity="6">
   <text>Assignment operator '%1s' returns a constant reference to the class in which it is defined.</text>
   <references>
      </references>
  </message>
  <message id="2094" level="QA_WARNING" help="doc-en_US/doc/messages/2094.html" severity="5">
   <text>Operator '%1s' implemented but not '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="2095" level="QA_WARNING" help="doc-en_US/doc/messages/2095.html" severity="5">
   <text>Operators '==' and '!=' are not implemented in terms of each other.</text>
   <references>
      </references>
  </message>
  <message id="2096" level="QA_WARNING" help="doc-en_US/doc/messages/2096.html" severity="5">
   <text>The 'operator !=' is not implemented. However, the type is "EqualityComparable" and "LessThanComparable".</text>
   <references>
      </references>
  </message>
  <message id="2097" level="QA_WARNING" help="doc-en_US/doc/messages/2097.html" severity="1">
   <text>This move assignment operator has a const reference parameter.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2098" level="QA_WARNING" help="doc-en_US/doc/messages/2098.html" severity="4">
   <text>This translation unit only defines one version of a usual deallocation function.</text>
   <references>
    <reference source="ISO 2014 C++ Language [18.6.2.1]"/>
   </references>
  </message>
  <message id="2099" level="QA_WARNING" help="doc-en_US/doc/messages/2099.html" severity="4">
   <text>The return type of this relational operator is not 'bool'.</text>
   <references>
      </references>
  </message>
  <message id="2100" level="QA_WARNING" help="doc-en_US/doc/messages/2100.html" severity="2">
   <text>'%1s' is public.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item20]"/>
    <reference source="Effective C++ 3rd Edition [Item22]"/>
    <reference source="Industrial Strength C++ [Rules.10.1]"/>
   </references>
  </message>
  <message id="2101" level="QA_WARNING" help="doc-en_US/doc/messages/2101.html" severity="1">
   <text>'%1s' is protected.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.10.1]"/>
   </references>
  </message>
  <message id="2104" level="QA_WARNING" help="doc-en_US/doc/messages/2104.html" severity="2">
   <text>This is a friend declaration of a relational operator.</text>
   <references>
      </references>
  </message>
  <message id="2105" level="QA_WARNING" help="doc-en_US/doc/messages/2105.html" severity="2">
   <text>This class does not have a name.</text>
   <references>
      </references>
  </message>
  <message id="2106" level="QA_WARNING" help="doc-en_US/doc/messages/2106.html" severity="1">
   <text>This function, defined inside a class definition, is implicitly inline.</text>
   <references>
    <reference source="Industrial Strength C++ [Style.A.15]"/>
   </references>
  </message>
  <message id="2107" level="QA_WARNING" help="doc-en_US/doc/messages/2107.html" severity="2">
   <text>This is a friend declaration.</text>
   <references>
      </references>
  </message>
  <message id="2108" level="QA_WARNING" help="doc-en_US/doc/messages/2108.html" severity="1">
   <text>The member access specifiers are not in order.</text>
   <references>
    <reference source="Industrial Strength C++ [Style.A.13]"/>
   </references>
  </message>
  <message id="2109" level="QA_WARNING" help="doc-en_US/doc/messages/2109.html" severity="1">
   <text>Member access specifiers used more than once.</text>
   <references>
      </references>
  </message>
  <message id="2110" level="QA_WARNING" help="doc-en_US/doc/messages/2110.html" severity="8">
   <text>'%1s' has member pointers but no copy constructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item11]"/>
    <reference source="Effective C++ 3rd Edition [Item14]"/>
    <reference source="Industrial Strength C++ [Recommendations.5.11]"/>
   </references>
  </message>
  <message id="2111" level="QA_WARNING" help="doc-en_US/doc/messages/2111.html" severity="7">
   <text>'%1s' has member pointers but no destructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.5.11]"/>
   </references>
  </message>
  <message id="2112" level="QA_WARNING" help="doc-en_US/doc/messages/2112.html" severity="8">
   <text>'%1s' has member pointers but no copy assignment operator.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item11]"/>
    <reference source="Effective C++ 3rd Edition [Item14]"/>
    <reference source="Industrial Strength C++ [Recommendations.5.11]"/>
   </references>
  </message>
  <message id="2113" level="QA_WARNING" help="doc-en_US/doc/messages/2113.html" severity="7">
   <text>'%1s' will perform shallow copy on its pointer members.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item11]"/>
    <reference source="Effective C++ 3rd Edition [Item14]"/>
    <reference source="Industrial Strength C++ [Recommendations.5.11]"/>
   </references>
  </message>
  <message id="2114" level="QA_WARNING" help="doc-en_US/doc/messages/2114.html" severity="4">
   <text>The destructor is declared virtual by parent classes but is not declared or defined in this derived class.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.14.2]"/>
   </references>
  </message>
  <message id="2115" level="QA_WARNING" help="doc-en_US/doc/messages/2115.html" severity="6">
   <text>'%1s' has virtual functions but lacks a virtual destructor.</text>
   <references>
    <reference source="C++ FAQs [97]"/>
    <reference source="Industrial Strength C++ [Rules.10.4]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item14]"/>
    <reference source="Effective C++ 3rd Edition [Item7]"/>
   </references>
  </message>
  <message id="2116" level="QA_WARNING" help="doc-en_US/doc/messages/2116.html" severity="6">
   <text>Base class '%1s' has a public non-virtual destructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.10.4]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item14]"/>
    <reference source="Effective C++ 3rd Edition [Item7]"/>
   </references>
  </message>
  <message id="2117" level="QA_WARNING" help="doc-en_US/doc/messages/2117.html" severity="4">
   <text>This constructor will not suppress the implicitly generated copy/move constructor.</text>
   <references>
    <reference source="ISO C++ Language [12.8/4]"/>
   </references>
  </message>
  <message id="2118" level="QA_WARNING" help="doc-en_US/doc/messages/2118.html" severity="8">
   <text>'%1s' has defined a non-empty destructor but does not declare both a copy constructor and an assignment operator.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item11]"/>
    <reference source="Effective C++ 3rd Edition [Item14]"/>
    <reference source="Industrial Strength C++ [Recommendations.5.11]"/>
   </references>
  </message>
  <message id="2119" level="QA_WARNING" help="doc-en_US/doc/messages/2119.html" severity="2">
   <text>'%1s' is a base class with a virtual, but protected, destructor.</text>
   <references>
      </references>
  </message>
  <message id="2120" level="QA_WARNING" help="doc-en_US/doc/messages/2120.html" severity="6">
   <text>The overloaded virtual function '%1s' is hidden in this class.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.7.16]"/>
    <reference source="C++ FAQs [142]"/>
    <reference source="C++ FAQs [143]"/>
   </references>
  </message>
  <message id="2121" level="QA_WARNING" help="doc-en_US/doc/messages/2121.html" severity="6">
   <text>This function hides the non-virtual function '%1s'.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rule.7.16]"/>
    <reference source="C++ FAQs [141]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item37]"/>
    <reference source="Effective C++ 3rd Edition [Item36]"/>
   </references>
  </message>
  <message id="2122" level="QA_WARNING" help="doc-en_US/doc/messages/2122.html" severity="1">
   <text>Class contains public static methods.</text>
   <references>
      </references>
  </message>
  <message id="2123" level="QA_WARNING" help="doc-en_US/doc/messages/2123.html" severity="7">
   <text>This function hides the virtual function '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="2124" level="QA_WARNING" help="doc-en_US/doc/messages/2124.html" severity="6">
   <text>The overloaded virtual function '%1s' is hidden in this class but is private or protected.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.16]"/>
    <reference source="C++ FAQs [142]"/>
    <reference source="C++ FAQs [143]"/>
   </references>
  </message>
  <message id="2125" level="QA_WARNING" help="doc-en_US/doc/messages/2125.html" severity="4">
   <text>Exceeding minimum number of final overriders in a class: '%1s'.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [Annex.B.2]"/>
   </references>
  </message>
  <message id="2126" level="QA_WARNING" help="doc-en_US/doc/messages/2126.html" severity="5">
   <text>This pure virtual function overrides a non-pure virtual function.</text>
   <references>
      </references>
  </message>
  <message id="2127" level="QA_WARNING" help="doc-en_US/doc/messages/2127.html" severity="5">
   <text>Introducing virtual function without the pure specifier.</text>
   <references>
      </references>
  </message>
  <message id="2128" level="QA_WARNING" help="doc-en_US/doc/messages/2128.html" severity="5">
   <text>Overriding non-pure base class virtual function.</text>
   <references>
      </references>
  </message>
  <message id="2129" level="QA_WARNING" help="doc-en_US/doc/messages/2129.html" severity="5">
   <text>Overriding non-pure base class virtual functions from multiple base classes.</text>
   <references>
      </references>
  </message>
  <message id="2130" level="QA_WARNING" help="doc-en_US/doc/messages/2130.html" severity="2">
   <text>Class has implicit virtual function '%1s' which, if defined, will be inline.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.2]"/>
    <reference source="More Effective C++ [Item24]"/>
   </references>
  </message>
  <message id="2131" level="QA_WARNING" help="doc-en_US/doc/messages/2131.html" severity="2">
   <text>This function is virtual and inline.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.2]"/>
    <reference source="More Effective C++ [Item24]"/>
   </references>
  </message>
  <message id="2132" level="QA_WARNING" help="doc-en_US/doc/messages/2132.html" severity="5">
   <text>This virtual function is not declared with the keyword 'virtual'.</text>
   <references>
      </references>
  </message>
  <message id="2133" level="QA_WARNING" help="doc-en_US/doc/messages/2133.html" severity="1">
   <text>This function is defined outside a class definition and is declared inline.</text>
   <references>
      </references>
  </message>
  <message id="2134" level="QA_WARNING" help="doc-en_US/doc/messages/2134.html" severity="1">
   <text>This function is an inline function.</text>
   <references>
      </references>
  </message>
  <message id="2135" level="QA_WARNING" help="doc-en_US/doc/messages/2135.html" severity="6">
   <text>This function is implicitly overriding a base-class function.</text>
   <references>
      </references>
  </message>
  <message id="2136" level="QA_WARNING" help="doc-en_US/doc/messages/2136.html" severity="4">
   <text>Using both 'virtual' and 'override'.</text>
   <references>
      </references>
  </message>
  <message id="2137" level="QA_WARNING" help="doc-en_US/doc/messages/2137.html" severity="1">
   <text>Make non-static data members either all public or all private.</text>
   <references>
      </references>
  </message>
  <message id="2138" level="QA_WARNING" help="doc-en_US/doc/messages/2138.html" severity="2">
   <text>Definition of a pure virtual function.</text>
   <references>
    <reference source="C++ FAQs [102]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item36]"/>
    <reference source="Effective C++ 3rd Edition [Item34]"/>
   </references>
  </message>
  <message id="2139" level="QA_WARNING" help="doc-en_US/doc/messages/2139.html" severity="4">
   <text>The return type of this function is different from the return of the virtual function(s) it overrides.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2140" level="QA_WARNING" help="doc-en_US/doc/messages/2140.html" severity="6">
   <text>The subscript operator '%1s' is not available in a const version.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item18]"/>
   </references>
  </message>
  <message id="2141" level="QA_WARNING" help="doc-en_US/doc/messages/2141.html" severity="6">
   <text>The subscript operator '%1s' is not available in a non-const version.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item18]"/>
   </references>
  </message>
  <message id="2142" level="QA_WARNING" help="doc-en_US/doc/messages/2142.html" severity="2">
   <text>Prefer to have copy constructors and copy assignments with reference to the const class.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.9]"/>
    <reference source="Effective C++ 3rd Edition [Item3]"/>
   </references>
  </message>
  <message id="2143" level="QA_WARNING" help="doc-en_US/doc/messages/2143.html" severity="6">
   <text>Copy constructor delegates to non copy constructor.</text>
   <references>
    <reference source="ISO 2011 C++ Language [12.6.2]"/>
   </references>
  </message>
  <message id="2144" level="QA_WARNING" help="doc-en_US/doc/messages/2144.html" severity="6">
   <text>Move constructor delegates to non-move constructor.</text>
   <references>
    <reference source="ISO 2011 C++ Language [12.6.2]"/>
   </references>
  </message>
  <message id="2150" level="QA_WARNING" help="doc-en_US/doc/messages/2150.html" severity="6">
   <text>This accessible name is reused for a different entity elsewhere in the hierarchy.</text>
   <references>
      </references>
  </message>
  <message id="2151" level="QA_WARNING" help="doc-en_US/doc/messages/2151.html" severity="6">
   <text>Class '%1s' is the common ancestor of two or more derived base classes and is not declared virtual in all inheritance paths.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.10.5]"/>
   </references>
  </message>
  <message id="2152" level="QA_WARNING" help="doc-en_US/doc/messages/2152.html" severity="6">
   <text>This class is used as a virtual base class and has data members.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item43]"/>
    <reference source="Effective C++ 3rd Edition [Item40]"/>
   </references>
  </message>
  <message id="2153" level="QA_WARNING" help="doc-en_US/doc/messages/2153.html" severity="2">
   <text>This class is publicly derived from a concrete (non-abstract) base class '%1s'.</text>
   <references>
    <reference source="More Effective C++ [Item33]"/>
   </references>
  </message>
  <message id="2154" level="QA_WARNING" help="doc-en_US/doc/messages/2154.html" severity="2">
   <text>This abstract class contains private members that cannot be accessed by derived classes.</text>
   <references>
    <reference source="More Effective C++ [Item33]"/>
   </references>
  </message>
  <message id="2155" level="QA_WARNING" help="doc-en_US/doc/messages/2155.html" severity="2">
   <text>Class inherits from multiple classes.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item40]"/>
   </references>
  </message>
  <message id="2156" level="QA_WARNING" help="doc-en_US/doc/messages/2156.html" severity="2">
   <text>This class has a non-interface base class.</text>
   <references>
      </references>
  </message>
  <message id="2157" level="QA_WARNING" help="doc-en_US/doc/messages/2157.html" severity="1">
   <text>This class inherits from more than one protected base class.</text>
   <references>
      </references>
  </message>
  <message id="2158" level="QA_WARNING" help="doc-en_US/doc/messages/2158.html" severity="3">
   <text>The stateful virtual base class '%1s' does not appear in the base-specifier list of this derived class.</text>
   <references>
      </references>
  </message>
  <message id="2159" level="QA_WARNING" help="doc-en_US/doc/messages/2159.html" severity="6">
   <text>This accessible name is reused for a different inaccessible entity elsewhere in the hierarchy.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2160" level="QA_WARNING" help="doc-en_US/doc/messages/2160.html" severity="8">
   <text>There is no corresponding operator delete for this operator new.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.8.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item10]"/>
    <reference source="Effective C++ 3rd Edition [Item50]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2161" level="QA_WARNING" help="doc-en_US/doc/messages/2161.html" severity="4">
   <text>This delete operator has different access to its corresponding new operator.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2162" level="QA_WARNING" help="doc-en_US/doc/messages/2162.html" severity="5">
   <text>This allocation/deallocation function is implicitly static.</text>
   <references>
      </references>
  </message>
  <message id="2163" level="QA_WARNING" help="doc-en_US/doc/messages/2163.html" severity="4">
   <text>This will hide the usual forms of new.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item9]"/>
    <reference source="Effective C++ 3rd Edition [Item52]"/>
   </references>
  </message>
  <message id="2164" level="QA_WARNING" help="doc-en_US/doc/messages/2164.html" severity="4">
   <text>This will hide the usual form of non-placement new.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item9]"/>
    <reference source="Effective C++ 3rd Edition [Item52]"/>
   </references>
  </message>
  <message id="2165" level="QA_WARNING" help="doc-en_US/doc/messages/2165.html" severity="4">
   <text>This will hide the usual form of placement new.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item9]"/>
    <reference source="Effective C++ 3rd Edition [Item52]"/>
   </references>
  </message>
  <message id="2166" level="QA_WARNING" help="doc-en_US/doc/messages/2166.html" severity="4">
   <text>This sized deallocation function will not be used as the unsized deallocation function will always be selected.</text>
   <references>
    <reference source="ISO 2011 C++ Language [5.3.5]"/>
   </references>
  </message>
  <message id="2170" level="QA_WARNING" help="doc-en_US/doc/messages/2170.html" severity="2">
   <text>The union '%1s' has access specifiers.</text>
   <references>
      </references>
  </message>
  <message id="2171" level="QA_WARNING" help="doc-en_US/doc/messages/2171.html" severity="1">
   <text>The struct '%1s' has access specifiers.</text>
   <references>
      </references>
  </message>
  <message id="2172" level="QA_WARNING" help="doc-en_US/doc/messages/2172.html" severity="2">
   <text>The union '%1s' has constructors and/or destructor.</text>
   <references>
      </references>
  </message>
  <message id="2173" level="QA_WARNING" help="doc-en_US/doc/messages/2173.html" severity="2">
   <text>The struct '%1s' has constructors and/or destructor.</text>
   <references>
      </references>
  </message>
  <message id="2174" level="QA_WARNING" help="doc-en_US/doc/messages/2174.html" severity="2">
   <text>This struct is not an aggregate type.</text>
   <references>
    <reference source="ISO 2014 C++ Language [8.5.1]"/>
   </references>
  </message>
  <message id="2175" level="QA_WARNING" help="doc-en_US/doc/messages/2175.html" severity="2">
   <text>This struct is not a POD type.</text>
   <references>
    <reference source="Industrial Strength C++ [Style.A.14]"/>
   </references>
  </message>
  <message id="2176" level="QA_WARNING" help="doc-en_US/doc/messages/2176.html" severity="1">
   <text>This is an untagged union.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.13.7]"/>
   </references>
  </message>
  <message id="2177" level="QA_WARNING" help="doc-en_US/doc/messages/2177.html" severity="5">
   <text>Avoid using anonymous unions.</text>
   <references>
      </references>
  </message>
  <message id="2178" level="QA_WARNING" help="doc-en_US/doc/messages/2178.html" severity="4">
   <text>This class was previously declared with a different class-key: class/struct/union.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2179" level="QA_WARNING" help="doc-en_US/doc/messages/2179.html" severity="5">
   <text>The union '%1s' has a default member initializer, but no user declared constructors.</text>
   <references>
      </references>
  </message>
  <message id="2180" level="QA_WARNING" help="doc-en_US/doc/messages/2180.html" severity="6">
   <text>This constructor could be used when implicit conversions from fundamental types are required.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.7.18]"/>
   </references>
  </message>
  <message id="2181" level="QA_WARNING" help="doc-en_US/doc/messages/2181.html" severity="6">
   <text>This is a conversion operator.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="More Effective C++ [Item5]"/>
    <reference source="Industrial Strength C++ [Recommendations.7.19]"/>
   </references>
  </message>
  <message id="2182" level="QA_WARNING" help="doc-en_US/doc/messages/2182.html" severity="1">
   <text>This constructor accepts arguments and this class is used as a virtual base class.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item43]"/>
    <reference source="Effective C++ 3rd Edition [Item40]"/>
   </references>
  </message>
  <message id="2183" level="QA_WARNING" help="doc-en_US/doc/messages/2183.html" severity="6">
   <text>Implicit conversion from template class to single fixed type.</text>
   <references>
    <reference source="More Effective C++ [Item28]"/>
   </references>
  </message>
  <message id="2184" level="QA_WARNING" help="doc-en_US/doc/messages/2184.html" severity="2">
   <text>This is an explicit conversion operator.</text>
   <references>
    <reference source="More Effective C++ [Item5]"/>
    <reference source="Industrial Strength C++ [Recommendations.7.19]"/>
   </references>
  </message>
  <message id="2185" level="QA_WARNING" help="doc-en_US/doc/messages/2185.html" severity="6">
   <text>This class does not declare a default constructor.</text>
   <references>
      </references>
  </message>
  <message id="2186" level="QA_WARNING" help="doc-en_US/doc/messages/2186.html" severity="8">
   <text>This class has non-static data members of POD type and no user declared constructors.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2187" level="QA_WARNING" help="doc-en_US/doc/messages/2187.html" severity="6">
   <text>This class has an unusable user declared copy constructor with a usable user declared copy assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2188" level="QA_WARNING" help="doc-en_US/doc/messages/2188.html" severity="6">
   <text>This class has an unusable user declared copy constructor with a usable implicitly declared copy assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2189" level="QA_WARNING" help="doc-en_US/doc/messages/2189.html" severity="6">
   <text>This class has an unusable implicitly declared copy constructor with a usable copy assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2190" level="QA_WARNING" help="doc-en_US/doc/messages/2190.html" severity="2">
   <text>This class is implicitly declaring its base classes as having private access.</text>
   <references>
    <reference source="Industrial Strength C++ [Styles.A.12]"/>
    <reference source="Effective C++ 3rd Edition [Item39]"/>
   </references>
  </message>
  <message id="2191" level="QA_WARNING" help="doc-en_US/doc/messages/2191.html" severity="2">
   <text>This class has implicitly declared access to member functions as private.</text>
   <references>
    <reference source="Industrial Strength C++ [Styles.A.12]"/>
   </references>
  </message>
  <message id="2192" level="QA_WARNING" help="doc-en_US/doc/messages/2192.html" severity="2">
   <text>This class has implicitly declared access to member data as private.</text>
   <references>
    <reference source="Industrial Strength C++ [Styles.A.12]"/>
   </references>
  </message>
  <message id="2193" level="QA_WARNING" help="doc-en_US/doc/messages/2193.html" severity="2">
   <text>Class has private base classes.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item39]"/>
   </references>
  </message>
  <message id="2194" level="QA_WARNING" help="doc-en_US/doc/messages/2194.html" severity="2">
   <text>Class has protected base classes. Avoid declaring base classes protected.</text>
   <references>
      </references>
  </message>
  <message id="2195" level="QA_WARNING" help="doc-en_US/doc/messages/2195.html" severity="1">
   <text>Class does not start with an explicit 'public:'.</text>
   <references>
    <reference source="C++ FAQs [69]"/>
   </references>
  </message>
  <message id="2196" level="QA_WARNING" help="doc-en_US/doc/messages/2196.html" severity="2">
   <text>This struct has implicitly declared access to base classes as public.</text>
   <references>
    <reference source="Industrial Strength C++ [Styles.A.12]"/>
   </references>
  </message>
  <message id="2197" level="QA_WARNING" help="doc-en_US/doc/messages/2197.html" severity="2">
   <text>This type is using a struct as a base class.</text>
   <references>
    <reference source="Industrial Strength C++ [Styles.A.12]"/>
   </references>
  </message>
  <message id="2198" level="QA_WARNING" help="doc-en_US/doc/messages/2198.html" severity="2">
   <text>This struct explicitly defines member functions.</text>
   <references>
    <reference source="Industrial Strength C++ [Styles.A.12]"/>
   </references>
  </message>
  <message id="2199" level="QA_WARNING" help="doc-en_US/doc/messages/2199.html" severity="2">
   <text>This class has both list and non-list constructors.</text>
   <references>
      </references>
  </message>
  <message id="2200" level="QA_WARNING" help="doc-en_US/doc/messages/2200.html" severity="4">
   <text>Avoid nesting struct declarations in structs, unions or classes.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2201" level="QA_WARNING" help="doc-en_US/doc/messages/2201.html" severity="4">
   <text>Avoid nesting union declarations in structs, unions or classes.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2202" level="QA_WARNING" help="doc-en_US/doc/messages/2202.html" severity="4">
   <text>Avoid nesting class declarations in structs, unions or classes.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2203" level="QA_WARNING" help="doc-en_US/doc/messages/2203.html" severity="6">
   <text>This constructor could be used when implicit conversions from non-fundamental types are required.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.7.18]"/>
   </references>
  </message>
  <message id="2204" level="QA_WARNING" help="doc-en_US/doc/messages/2204.html" severity="2">
   <text>Use of volatile on function parameters is deprecated in C++20.</text>
   <references>
      </references>
  </message>
  <message id="2205" level="QA_WARNING" help="doc-en_US/doc/messages/2205.html" severity="2">
   <text>Use of volatile on function return type is deprecated in C++20.</text>
   <references>
      </references>
  </message>
  <message id="2206" level="QA_WARNING" help="doc-en_US/doc/messages/2206.html" severity="2">
   <text>Use of volatile on structured bindings is deprecated in C++20.</text>
   <references>
      </references>
  </message>
  <message id="2207" level="QA_WARNING" help="doc-en_US/doc/messages/2207.html" severity="2">
   <text>Postfix ++ and -- expressions and prefix ++ and -- expressions of volatile-qualified arithmetic and pointer types are deprecated in C++20.</text>
   <references>
      </references>
  </message>
  <message id="2208" level="QA_WARNING" help="doc-en_US/doc/messages/2208.html" severity="2">
   <text>Assignment to volatile-qualified operand is deprecated in C++20.</text>
   <references>
      </references>
  </message>
  <message id="2209" level="QA_WARNING" help="doc-en_US/doc/messages/2209.html" severity="1">
   <text>This is a tagged union.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.13.7]"/>
   </references>
  </message>
  <message id="2210" level="QA_WARNING" help="doc-en_US/doc/messages/2210.html" severity="6">
   <text>This class has an unusable move constructor with a usable move assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2211" level="QA_WARNING" help="doc-en_US/doc/messages/2211.html" severity="6">
   <text>This class has an unusable move constructor with a usable copy constructor.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2212" level="QA_WARNING" help="doc-en_US/doc/messages/2212.html" severity="6">
   <text>This class has an unusable copy constructor with a usable copy assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2213" level="QA_WARNING" help="doc-en_US/doc/messages/2213.html" severity="6">
   <text>This class has an unusable move assignment operator with a usable copy assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2214" level="QA_WARNING" help="doc-en_US/doc/messages/2214.html" severity="6">
   <text>This class has an unusable copy assignment operator with a usable copy constructor and a usable move assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2215" level="QA_WARNING" help="doc-en_US/doc/messages/2215.html" severity="6">
   <text>This class has a customized destructor and a usable move constructor that is not customized.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2216" level="QA_WARNING" help="doc-en_US/doc/messages/2216.html" severity="6">
   <text>This class has a customized destructor and a usable copy constructor that is not customized.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2217" level="QA_WARNING" help="doc-en_US/doc/messages/2217.html" severity="6">
   <text>This class has a customized destructor and a usable move assignment operator that is not customized.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2218" level="QA_WARNING" help="doc-en_US/doc/messages/2218.html" severity="6">
   <text>This class has a customized destructor and a usable copy assignment operator that is not customized.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2219" level="QA_WARNING" help="doc-en_US/doc/messages/2219.html" severity="6">
   <text>This class is a non-aggregate public base class with a public destructor and a usable move constructor.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2220" level="QA_WARNING" help="doc-en_US/doc/messages/2220.html" severity="6">
   <text>This class is a non-aggregate public base class with a public destructor that is not virtual.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2221" level="QA_WARNING" help="doc-en_US/doc/messages/2221.html" severity="6">
   <text>This class is a non-aggregate public base class with a protected virtual destructor.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2222" level="QA_WARNING" help="doc-en_US/doc/messages/2222.html" severity="6">
   <text>This class is a non-aggregate public base class with a private destructor.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2223" level="QA_WARNING" help="doc-en_US/doc/messages/2223.html" severity="6">
   <text>This class is an aggregate public base class with a user declared destructor.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2300" level="QA_WARNING" help="doc-en_US/doc/messages/2300.html" severity="2">
   <text>The object '%1s' is in the global scope.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item28]"/>
    <reference source="Industrial Strength C++ [Rules.1.4]"/>
   </references>
  </message>
  <message id="2301" level="QA_WARNING" help="doc-en_US/doc/messages/2301.html" severity="1">
   <text>This is a bitfield.</text>
   <references>
      </references>
  </message>
  <message id="2302" level="QA_WARNING" help="doc-en_US/doc/messages/2302.html" severity="3">
   <text>This signed bitfield has a limited and unintuitive value range.</text>
   <references>
      </references>
  </message>
  <message id="2303" level="QA_WARNING" help="doc-en_US/doc/messages/2303.html" severity="2">
   <text>This is an unnamed bitfield of size other than zero.</text>
   <references>
      </references>
  </message>
  <message id="2304" level="QA_WARNING" help="doc-en_US/doc/messages/2304.html" severity="7">
   <text>Bitfield not declared explicitly as unsigned or signed, configured as '%1s'.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2305" level="QA_WARNING" help="doc-en_US/doc/messages/2305.html" severity="3">
   <text>Bitfield declared with signed integral type.</text>
   <references>
      </references>
  </message>
  <message id="2306" level="QA_WARNING" help="doc-en_US/doc/messages/2306.html" severity="2">
   <text>Bitfield declared with bool type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2307" level="QA_WARNING" help="doc-en_US/doc/messages/2307.html" severity="4">
   <text>Bitfield declared with enumeration type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2308" level="QA_WARNING" help="doc-en_US/doc/messages/2308.html" severity="4">
   <text>Bitfield declared with wchar_t type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2309" level="QA_WARNING" help="doc-en_US/doc/messages/2309.html" severity="4">
   <text>Bitfield has dependent type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2310" level="QA_WARNING" help="doc-en_US/doc/messages/2310.html" severity="6">
   <text>This non-local object will be initialized at runtime.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Effective C++ 1st/2nd Edition [Item47]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
   </references>
  </message>
  <message id="2311" level="QA_WARNING" help="doc-en_US/doc/messages/2311.html" severity="2">
   <text>This namespace or global object can be modified from other source files.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.9.1]"/>
   </references>
  </message>
  <message id="2312" level="QA_WARNING" help="doc-en_US/doc/messages/2312.html" severity="1">
   <text>This class contains static data members.</text>
   <references>
      </references>
  </message>
  <message id="2313" level="QA_WARNING" help="doc-en_US/doc/messages/2313.html" severity="1">
   <text>This namespace object is declared with the static declaration specifier.</text>
   <references>
    <reference source="ISO 2011 C++ Language [depr.register]"/>
   </references>
  </message>
  <message id="2314" level="QA_WARNING" help="doc-en_US/doc/messages/2314.html" severity="1">
   <text>This namespace function is declared with the static declaration specifier.</text>
   <references>
      </references>
  </message>
  <message id="2315" level="QA_WARNING" help="doc-en_US/doc/messages/2315.html" severity="6">
   <text>This non-local object of POD or fundamental type does not have an explicit initialization value.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item47]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
   </references>
  </message>
  <message id="2316" level="QA_WARNING" help="doc-en_US/doc/messages/2316.html" severity="1">
   <text>Superfluous 'static' keyword in declaration of object in unnamed namespace.</text>
   <references>
      </references>
  </message>
  <message id="2317" level="QA_WARNING" help="doc-en_US/doc/messages/2317.html" severity="1">
   <text>Superfluous 'static' keyword function declaration in unnamed namespace.</text>
   <references>
      </references>
  </message>
  <message id="2318" level="QA_WARNING" help="doc-en_US/doc/messages/2318.html" severity="2">
   <text>This POD class contains static data members.</text>
   <references>
      </references>
  </message>
  <message id="2319" level="QA_WARNING" help="doc-en_US/doc/messages/2319.html" severity="2">
   <text>This template class contains static data members.</text>
   <references>
      </references>
  </message>
  <message id="2320" level="QA_WARNING" help="doc-en_US/doc/messages/2320.html" severity="7">
   <text>The specialization for '%1s' has not yet been declared at this point.</text>
   <references>
    <reference source="ISO C++ Language [14.7.1]"/>
   </references>
  </message>
  <message id="2321" level="QA_WARNING" help="doc-en_US/doc/messages/2321.html" severity="4">
   <text>Bitfield declared with enumeration type without an explicitly unsigned underlying type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2322" level="QA_WARNING" help="doc-en_US/doc/messages/2322.html" severity="4">
   <text>The object '%1s' is not initialized using direct list initialization syntax.</text>
   <references>
      </references>
  </message>
  <message id="2323" level="QA_WARNING" help="doc-en_US/doc/messages/2323.html" severity="4">
   <text>The member initializer for '%1s' is not using direct list initialization syntax.</text>
   <references>
      </references>
  </message>
  <message id="2324" level="QA_WARNING" help="doc-en_US/doc/messages/2324.html" severity="4">
   <text>The default member initializer for '%1s' is not using direct list initialization syntax.</text>
   <references>
      </references>
  </message>
  <message id="2325" level="QA_WARNING" help="doc-en_US/doc/messages/2325.html" severity="4">
   <text>The object '%1s' with a declared type of 'auto' is initialized using list initialization syntax.</text>
   <references>
      </references>
  </message>
  <message id="2326" level="QA_WARNING" help="doc-en_US/doc/messages/2326.html" severity="4">
   <text>This constructor for a class with default member initializers uses a member object initializer.</text>
   <references>
      </references>
  </message>
  <message id="2327" level="QA_WARNING" help="doc-en_US/doc/messages/2327.html" severity="4">
   <text>The object '%1s' with a declared type of 'auto' is not initialized using direct list initialization syntax.</text>
   <references>
      </references>
  </message>
  <message id="2328" level="QA_WARNING" help="doc-en_US/doc/messages/2328.html" severity="6">
   <text>This block-scope object with static or thread storage duration will be initialized at runtime.</text>
   <references>
      </references>
  </message>
  <message id="2329" level="QA_WARNING" help="doc-en_US/doc/messages/2329.html" severity="6">
   <text>This block-scope object of POD or fundamental type with static or thread storage duration does not have an explicit initialization value.</text>
   <references>
      </references>
  </message>
  <message id="2330" level="QA_WARNING" help="doc-en_US/doc/messages/2330.html" severity="2">
   <text>The use of constinit for object declarations is inconsistent.</text>
   <references>
    <reference source="ISO 2020 C++ Language [9.2.6]"/>
   </references>
  </message>
  <message id="2331" level="QA_WARNING" help="doc-en_US/doc/messages/2331.html" severity="4">
   <text>Bit-field declared with 'character' type: plain char, char16_t or char32_t.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2332" level="QA_WARNING" help="doc-en_US/doc/messages/2332.html" severity="4">
   <text>Bit-field declared with enumeration type without a fixed type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2333" level="QA_WARNING" help="doc-en_US/doc/messages/2333.html" severity="4">
   <text>Bit-field declared with enumeration type with a fixed type of 'bool'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2334" level="QA_WARNING" help="doc-en_US/doc/messages/2334.html" severity="4">
   <text>Bit-field declared with enumeration type with a fixed type of 'character' type: plain char, wchar_t, char16_t or char32_t.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2335" level="QA_WARNING" help="doc-en_US/doc/messages/2335.html" severity="4">
   <text>Bit-field declared with enumeration as the underlying type and size too small to store all values of the enumeration type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2336" level="QA_WARNING" help="doc-en_US/doc/messages/2336.html" severity="4">
   <text>Local variables shall not have static storage duration.</text>
   <references>
      </references>
  </message>
  <message id="2400" level="QA_WARNING" help="doc-en_US/doc/messages/2400.html" severity="1">
   <text>The type name '%1s' is in the global scope.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item28]"/>
    <reference source="Industrial Strength C++ [Rules.1.4]"/>
   </references>
  </message>
  <message id="2401" level="QA_WARNING" help="doc-en_US/doc/messages/2401.html" severity="1">
   <text>Typedef of a class/struct/union.</text>
   <references>
      </references>
  </message>
  <message id="2402" level="QA_WARNING" help="doc-en_US/doc/messages/2402.html" severity="2">
   <text>Typedef of an unnamed class/struct/union.</text>
   <references>
      </references>
  </message>
  <message id="2403" level="QA_WARNING" help="doc-en_US/doc/messages/2403.html" severity="1">
   <text>Avoid declaring a class type in local scope.</text>
   <references>
      </references>
  </message>
  <message id="2404" level="QA_WARNING" help="doc-en_US/doc/messages/2404.html" severity="1">
   <text>Avoid declaring a typedef in local scope.</text>
   <references>
      </references>
  </message>
  <message id="2405" level="QA_WARNING" help="doc-en_US/doc/messages/2405.html" severity="1">
   <text>Avoid declaring an enum type in local scope.</text>
   <references>
      </references>
  </message>
  <message id="2406" level="QA_WARNING" help="doc-en_US/doc/messages/2406.html" severity="4">
   <text>This union allows for manipulation of the bits in a floating point type object through its integral member.</text>
   <references>
      </references>
  </message>
  <message id="2407" level="QA_WARNING" help="doc-en_US/doc/messages/2407.html" severity="4">
   <text>This union allows for manipulation of the bits in a floating point type object through its POD class or array member.</text>
   <references>
      </references>
  </message>
  <message id="2408" level="QA_WARNING" help="doc-en_US/doc/messages/2408.html" severity="4">
   <text>In this unqualified usage, the typedef or class '%1s' from a dependent base class would be a candidate had the base class not been dependent.</text>
   <references>
      </references>
  </message>
  <message id="2409" level="QA_WARNING" help="doc-en_US/doc/messages/2409.html" severity="4">
   <text>'%1s' will not be found using ISO lookup rules.</text>
   <references>
      </references>
  </message>
  <message id="2410" level="QA_WARNING" help="doc-en_US/doc/messages/2410.html" severity="2">
   <text>This object is an array type.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.13.6]"/>
    <reference source="C++ FAQs [137]"/>
   </references>
  </message>
  <message id="2411" level="QA_WARNING" help="doc-en_US/doc/messages/2411.html" severity="2">
   <text>This typedef is an array type.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.13.6]"/>
    <reference source="C++ FAQs [137]"/>
   </references>
  </message>
  <message id="2412" level="QA_WARNING" help="doc-en_US/doc/messages/2412.html" severity="5">
   <text>Array has fewer initializers than its declared size.</text>
   <references>
      </references>
  </message>
  <message id="2413" level="QA_WARNING" help="doc-en_US/doc/messages/2413.html" severity="4">
   <text>Include system header &lt;new&gt; before using std :: bad_alloc</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2414" level="QA_WARNING" help="doc-en_US/doc/messages/2414.html" severity="5">
   <text>Use {} to document that the array should be 'value-initialized'.</text>
   <references>
      </references>
  </message>
  <message id="2415" level="QA_WARNING" help="doc-en_US/doc/messages/2415.html" severity="5">
   <text>The members of this array will be 'value-initialized'.</text>
   <references>
      </references>
  </message>
  <message id="2416" level="QA_WARNING" help="doc-en_US/doc/messages/2416.html" severity="5">
   <text>String literal is smaller than declared size of array.</text>
   <references>
      </references>
  </message>
  <message id="2417" level="QA_WARNING" help="doc-en_US/doc/messages/2417.html" severity="5">
   <text>Aggregate has fewer initializers than members.</text>
   <references>
      </references>
  </message>
  <message id="2418" level="QA_WARNING" help="doc-en_US/doc/messages/2418.html" severity="5">
   <text>Use {} to document that the aggregate object is to be 'value-initialized'.</text>
   <references>
      </references>
  </message>
  <message id="2419" level="QA_WARNING" help="doc-en_US/doc/messages/2419.html" severity="5">
   <text>The members of this aggregate will be 'value-initialized'.</text>
   <references>
      </references>
  </message>
  <message id="2420" level="QA_WARNING" help="doc-en_US/doc/messages/2420.html" severity="5">
   <text>Incorrect bracing in this array initializer.</text>
   <references>
      </references>
  </message>
  <message id="2421" level="QA_WARNING" help="doc-en_US/doc/messages/2421.html" severity="5">
   <text>Incorrect bracing in this aggregate initializer.</text>
   <references>
      </references>
  </message>
  <message id="2422" level="QA_WARNING" help="doc-en_US/doc/messages/2422.html" severity="5">
   <text>Initialise none, the first only or all enumerators in an enumeration.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2423" level="QA_WARNING" help="doc-en_US/doc/messages/2423.html" severity="5">
   <text>The enumerators in this enumeration are intended to index arrays.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2424" level="QA_WARNING" help="doc-en_US/doc/messages/2424.html" severity="5">
   <text>This is using more than two levels of pointer indirection.</text>
   <references>
      </references>
  </message>
  <message id="2425" level="QA_WARNING" help="doc-en_US/doc/messages/2425.html" severity="5">
   <text>This is using two levels of pointer indirection.</text>
   <references>
      </references>
  </message>
  <message id="2426" level="QA_WARNING" help="doc-en_US/doc/messages/2426.html" severity="5">
   <text>Pointer to function type not declared with typedef.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2427" level="QA_WARNING" help="doc-en_US/doc/messages/2427.html" severity="4">
   <text>Direct use of fundamental type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2428" level="QA_WARNING" help="doc-en_US/doc/messages/2428.html" severity="4">
   <text>Direct use of character type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2429" level="QA_WARNING" help="doc-en_US/doc/messages/2429.html" severity="3">
   <text>Underlying type of 'int' is used for scoped enumeration.</text>
   <references>
      </references>
  </message>
  <message id="2430" level="QA_WARNING" help="doc-en_US/doc/messages/2430.html" severity="7">
   <text>This array object does not have a dimension in this translation unit.</text>
   <references>
      </references>
  </message>
  <message id="2431" level="QA_WARNING" help="doc-en_US/doc/messages/2431.html" severity="7">
   <text>The first declaration of this array object does not have a dimension.</text>
   <references>
      </references>
  </message>
  <message id="2432" level="QA_WARNING" help="doc-en_US/doc/messages/2432.html" severity="7">
   <text>This member array object is declared without a dimension.</text>
   <references>
      </references>
  </message>
  <message id="2433" level="QA_WARNING" help="doc-en_US/doc/messages/2433.html" severity="7">
   <text>This array with a dependent type does not have a dimension.</text>
   <references>
      </references>
  </message>
  <message id="2434" level="QA_WARNING" help="doc-en_US/doc/messages/2434.html" severity="4">
   <text>The type of this object is rvalue reference to 'std::array'.</text>
   <references>
      </references>
  </message>
  <message id="2435" level="QA_WARNING" help="doc-en_US/doc/messages/2435.html" severity="4">
   <text>The type of this object is rvalue reference to 'std::array' for this instantiation.</text>
   <references>
      </references>
  </message>
  <message id="2436" level="QA_WARNING" help="doc-en_US/doc/messages/2436.html" severity="4">
   <text>Enum declared without an underlying type.</text>
   <references>
      </references>
  </message>
  <message id="2437" level="QA_WARNING" help="doc-en_US/doc/messages/2437.html" severity="4">
   <text>Scoped enum declared without an underlying type.</text>
   <references>
      </references>
  </message>
  <message id="2438" level="QA_WARNING" help="doc-en_US/doc/messages/2438.html" severity="4">
   <text>Declaring an unscoped enum.</text>
   <references>
      </references>
  </message>
  <message id="2439" level="QA_WARNING" help="doc-en_US/doc/messages/2439.html" severity="5">
   <text>The implicit enumerator '%1s' in this enumeration is not unique.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2440" level="QA_WARNING" help="doc-en_US/doc/messages/2440.html" severity="3">
   <text>Using type wchar_t.</text>
   <references>
    <reference source="ISO 2014 C++ Language [5.3.3]"/>
   </references>
  </message>
  <message id="2441" level="QA_WARNING" help="doc-en_US/doc/messages/2441.html" severity="3">
   <text>Using type long double.</text>
   <references>
    <reference source="ISO 2014 C++ Language [3.9.1]"/>
   </references>
  </message>
  <message id="2442" level="QA_WARNING" help="doc-en_US/doc/messages/2442.html" severity="3">
   <text>This lambda expression does have a deduced non-void return type.</text>
   <references>
      </references>
  </message>
  <message id="2443" level="QA_WARNING" help="doc-en_US/doc/messages/2443.html" severity="2">
   <text>This lambda expression with an explicitly specified placeholder return type does have a deduced non-void return type.</text>
   <references>
      </references>
  </message>
  <message id="2444" level="QA_WARNING" help="doc-en_US/doc/messages/2444.html" severity="2">
   <text>This lambda expression with an explicitly specified placeholder return type does have a deduced 'void' return type.</text>
   <references>
      </references>
  </message>
  <message id="2445" level="QA_WARNING" help="doc-en_US/doc/messages/2445.html" severity="5">
   <text>Braces elided in this array initializer.</text>
   <references>
      </references>
  </message>
  <message id="2446" level="QA_WARNING" help="doc-en_US/doc/messages/2446.html" severity="2">
   <text>Direct use of float fundamental type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2500" level="QA_WARNING" help="doc-en_US/doc/messages/2500.html" severity="4">
   <text>The name of this type will be hidden by a previous object/function name.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item33]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2501" level="QA_WARNING" help="doc-en_US/doc/messages/2501.html" severity="4">
   <text>The name of this object/function will hide a previous type name.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item33]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2502" level="QA_WARNING" help="doc-en_US/doc/messages/2502.html" severity="7">
   <text>This name hides a similar kind of declaration.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item33]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2503" level="QA_WARNING" help="doc-en_US/doc/messages/2503.html" severity="7">
   <text>Class member not template parameter found by lookup for '%1s'.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item33]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2504" level="QA_WARNING" help="doc-en_US/doc/messages/2504.html" severity="4">
   <text>This name hides a different kind of declaration.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item33]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2505" level="QA_WARNING" help="doc-en_US/doc/messages/2505.html" severity="5">
   <text>This name hides a similar kind of member declaration.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item33]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2506" level="QA_WARNING" help="doc-en_US/doc/messages/2506.html" severity="5">
   <text>This name prevents access to a name in an enclosing scope.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item33]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2510" level="QA_WARNING" help="doc-en_US/doc/messages/2510.html" severity="5">
   <text>This function first declared here in block scope is not explicitly declared in the innermost enclosing namespace.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2511" level="QA_WARNING" help="doc-en_US/doc/messages/2511.html" severity="5">
   <text>This function first declared here in block scope is later explicitly redeclared in the innermost enclosing namespace.</text>
   <references>
      </references>
  </message>
  <message id="2512" level="QA_WARNING" help="doc-en_US/doc/messages/2512.html" severity="5">
   <text>This is redeclaring a function in block scope.</text>
   <references>
      </references>
  </message>
  <message id="2513" level="QA_WARNING" help="doc-en_US/doc/messages/2513.html" severity="5">
   <text>This friend function is not explicitly declared in the innermost enclosing namespace.</text>
   <references>
      </references>
  </message>
  <message id="2514" level="QA_WARNING" help="doc-en_US/doc/messages/2514.html" severity="5">
   <text>This friend function is later explicitly redeclared in the innermost enclosing namespace.</text>
   <references>
      </references>
  </message>
  <message id="2515" level="QA_WARNING" help="doc-en_US/doc/messages/2515.html" severity="6">
   <text>This is assigning the address of an object to a pointer that has a greater lifetime.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2516" level="QA_WARNING" help="doc-en_US/doc/messages/2516.html" severity="3">
   <text>This is assigning the address of an object to a pointer that may have a greater lifetime.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2517" level="QA_WARNING" help="doc-en_US/doc/messages/2517.html" severity="5">
   <text>This namespace is nested more than '%1s' levels deep.</text>
   <references>
      </references>
  </message>
  <message id="2518" level="QA_WARNING" help="doc-en_US/doc/messages/2518.html" severity="5">
   <text>This is an unnamed namespace in a header file.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2519" level="QA_WARNING" help="doc-en_US/doc/messages/2519.html" severity="5">
   <text>This is a using directive.</text>
   <references>
      </references>
  </message>
  <message id="2520" level="QA_WARNING" help="doc-en_US/doc/messages/2520.html" severity="5">
   <text>This is a using directive in a function body.</text>
   <references>
      </references>
  </message>
  <message id="2521" level="QA_WARNING" help="doc-en_US/doc/messages/2521.html" severity="5">
   <text>This using directive is in the global namespace in a header file.</text>
   <references>
      </references>
  </message>
  <message id="2522" level="QA_WARNING" help="doc-en_US/doc/messages/2522.html" severity="5">
   <text>This using directive is in a header file.</text>
   <references>
      </references>
  </message>
  <message id="2523" level="QA_WARNING" help="doc-en_US/doc/messages/2523.html" severity="5">
   <text>This using declaration is in the global namespace in a header file.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2524" level="QA_WARNING" help="doc-en_US/doc/messages/2524.html" severity="5">
   <text>This using declaration is in a header file.</text>
   <references>
      </references>
  </message>
  <message id="2525" level="QA_WARNING" help="doc-en_US/doc/messages/2525.html" severity="5">
   <text>This declaration will not be found by the previous using declaration.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2526" level="QA_WARNING" help="doc-en_US/doc/messages/2526.html" severity="5">
   <text>This declaration will not be found by the previous using declaration in block scope.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2527" level="QA_WARNING" help="doc-en_US/doc/messages/2527.html" severity="8">
   <text>This is initializing a reference with an object that has a shorter lifetime.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2528" level="QA_WARNING" help="doc-en_US/doc/messages/2528.html" severity="5">
   <text>This is initializing a reference with an object that may have a shorter lifetime.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2529" level="QA_WARNING" help="doc-en_US/doc/messages/2529.html" severity="8">
   <text>This temporary object is referenced in an object with a greater lifetime.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2530" level="QA_WARNING" help="doc-en_US/doc/messages/2530.html" severity="5">
   <text>This temporary object is potentially referenced in an object with a greater lifetime.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2531" level="QA_WARNING" help="doc-en_US/doc/messages/2531.html" severity="8">
   <text>This object with automatic storage duration is referenced in an object with a greater lifetime.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2532" level="QA_WARNING" help="doc-en_US/doc/messages/2532.html" severity="5">
   <text>This object with automatic storage duration is potentially referenced in an object with a greater lifetime.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2533" level="QA_WARNING" help="doc-en_US/doc/messages/2533.html" severity="8">
   <text>This object with automatic storage duration is referenced by a thread with a greater lifetime.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2534" level="QA_WARNING" help="doc-en_US/doc/messages/2534.html" severity="8">
   <text>This initialization is storing the address of temporary object in a reference.</text>
   <references>
      </references>
  </message>
  <message id="2535" level="QA_WARNING" help="doc-en_US/doc/messages/2535.html" severity="8">
   <text>This initialization is storing the address of temporary object in a pointer.</text>
   <references>
      </references>
  </message>
  <message id="2540" level="QA_WARNING" help="doc-en_US/doc/messages/2540.html" severity="2">
   <text>This user constructor has the same behavior as '%1s' in '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="2541" level="QA_WARNING" help="doc-en_US/doc/messages/2541.html" severity="2">
   <text>The user constructors of %1s have the same behavior as the constructors in the base class '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="2598" level="QA_WARNING" help="doc-en_US/doc/messages/2598.html" severity="2">
   <text>This argument of an overriding virtual function has a non-const default expression.</text>
   <references>
      </references>
  </message>
  <message id="2599" level="QA_WARNING" help="doc-en_US/doc/messages/2599.html" severity="2">
   <text>The corresponding parameter in the overridden function has no default argument.</text>
   <references>
      </references>
  </message>
  <message id="2600" level="QA_WARNING" help="doc-en_US/doc/messages/2600.html" severity="3">
   <text>This function call operator for an explicit specialization of std::hash is not declared noexcept.</text>
   <references>
    <reference source="ISO 2011 C++ Language [20.8.12]"/>
   </references>
  </message>
  <message id="2601" level="QA_WARNING" help="doc-en_US/doc/messages/2601.html" severity="1">
   <text>This function can be declared 'noexcept'.</text>
   <references>
      </references>
  </message>
  <message id="2602" level="QA_WARNING" help="doc-en_US/doc/messages/2602.html" severity="5">
   <text>This function's noexcept behavior should be explicitly specified using noexcept(&lt;condition&gt;) specifier.</text>
   <references>
      </references>
  </message>
  <message id="2603" level="QA_WARNING" help="doc-en_US/doc/messages/2603.html" severity="1">
   <text>This function can be declared 'noexcept' by using an explicit noexcept(&lt;condition&gt;) specifier.</text>
   <references>
      </references>
  </message>
  <message id="2608" level="QA_WARNING" help="doc-en_US/doc/messages/2608.html" severity="3">
   <text>This class has a deleted copy/move special member function, and is not canonically move-only nor non-movable/non-copyable.</text>
   <references>
      </references>
  </message>
  <message id="2609" level="QA_WARNING" help="doc-en_US/doc/messages/2609.html" severity="3">
   <text>This class has declared default or deleted special members but no destructor.</text>
   <references>
      </references>
  </message>
  <message id="2610" level="QA_WARNING" help="doc-en_US/doc/messages/2610.html" severity="6">
   <text>This class has declared a copy constructor and a copy assignment operator but no destructor.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
   </references>
  </message>
  <message id="2611" level="QA_WARNING" help="doc-en_US/doc/messages/2611.html" severity="6">
   <text>This class has declared a copy constructor but no destructor.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
   </references>
  </message>
  <message id="2612" level="QA_WARNING" help="doc-en_US/doc/messages/2612.html" severity="6">
   <text>This class has declared a copy assignment operator but no destructor.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
   </references>
  </message>
  <message id="2613" level="QA_WARNING" help="doc-en_US/doc/messages/2613.html" severity="7">
   <text>This class has declared a copy assignment operator and a destructor but no copy constructor.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2614" level="QA_WARNING" help="doc-en_US/doc/messages/2614.html" severity="6">
   <text>This class has declared a destructor but no copy constructor.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
   </references>
  </message>
  <message id="2615" level="QA_WARNING" help="doc-en_US/doc/messages/2615.html" severity="7">
   <text>This class has declared a copy assignment operator but no copy constructor.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
   </references>
  </message>
  <message id="2616" level="QA_WARNING" help="doc-en_US/doc/messages/2616.html" severity="7">
   <text>This class has declared a copy constructor and a destructor but no copy assignment operator.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2617" level="QA_WARNING" help="doc-en_US/doc/messages/2617.html" severity="6">
   <text>This class has declared a destructor but no copy assignment operator.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
   </references>
  </message>
  <message id="2618" level="QA_WARNING" help="doc-en_US/doc/messages/2618.html" severity="7">
   <text>This class has declared a copy constructor but no copy assignment operator.</text>
   <references>
    <reference source="C++ FAQs [199]"/>
   </references>
  </message>
  <message id="2619" level="QA_WARNING" help="doc-en_US/doc/messages/2619.html" severity="7">
   <text>This class has declared a move assignment operator but no move constructor.</text>
   <references>
      </references>
  </message>
  <message id="2620" level="QA_WARNING" help="doc-en_US/doc/messages/2620.html" severity="2">
   <text>This built-in input parameter is not passed by value.</text>
   <references>
      </references>
  </message>
  <message id="2621" level="QA_WARNING" help="doc-en_US/doc/messages/2621.html" severity="2">
   <text>This small input parameter is not passed by value.</text>
   <references>
      </references>
  </message>
  <message id="2622" level="QA_WARNING" help="doc-en_US/doc/messages/2622.html" severity="6">
   <text>This prefix operator does not return a non-const reference to the class or enum for which it has been defined.</text>
   <references>
      </references>
  </message>
  <message id="2623" level="QA_WARNING" help="doc-en_US/doc/messages/2623.html" severity="2">
   <text>This argument has a non-const default expression.</text>
   <references>
      </references>
  </message>
  <message id="2624" level="QA_WARNING" help="doc-en_US/doc/messages/2624.html" severity="2">
   <text>This virtual function has a default argument.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2625" level="QA_WARNING" help="doc-en_US/doc/messages/2625.html" severity="2">
   <text>This function with non-C++ linkage accepts an unlimited number of parameters.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.13.4]"/>
   </references>
  </message>
  <message id="2626" level="QA_WARNING" help="doc-en_US/doc/messages/2626.html" severity="2">
   <text>This built-in input parameter is not passed by value in this virtual function.</text>
   <references>
      </references>
  </message>
  <message id="2627" level="QA_WARNING" help="doc-en_US/doc/messages/2627.html" severity="2">
   <text>This small input parameter is not passed by value in this virtual function.</text>
   <references>
      </references>
  </message>
  <message id="2628" level="QA_WARNING" help="doc-en_US/doc/messages/2628.html" severity="2">
   <text>This constructor definition can be replaced with '=default'.</text>
   <references>
      </references>
  </message>
  <message id="2629" level="QA_WARNING" help="doc-en_US/doc/messages/2629.html" severity="2">
   <text>This constructor definition can possibly be replaced with '=default' and NSDMI(s).</text>
   <references>
      </references>
  </message>
  <message id="2630" level="QA_WARNING" help="doc-en_US/doc/messages/2630.html" severity="2">
   <text>This class has an implicitly defined default constructor that is non-trivial.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item33]"/>
    <reference source="Effective C++ 3rd Edition [Item30]"/>
   </references>
  </message>
  <message id="2631" level="QA_WARNING" help="doc-en_US/doc/messages/2631.html" severity="2">
   <text>This class has an implicitly defined destructor that is non-trivial.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item33]"/>
    <reference source="Effective C++ 3rd Edition [Item30]"/>
   </references>
  </message>
  <message id="2632" level="QA_WARNING" help="doc-en_US/doc/messages/2632.html" severity="2">
   <text>This class has an implicitly defined copy constructor that is non-trivial.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item33]"/>
    <reference source="Effective C++ 3rd Edition [Item30]"/>
   </references>
  </message>
  <message id="2633" level="QA_WARNING" help="doc-en_US/doc/messages/2633.html" severity="2">
   <text>This class has an implicitly defined copy assignment operator that is non-trivial.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item33]"/>
    <reference source="Effective C++ 3rd Edition [Item30]"/>
   </references>
  </message>
  <message id="2634" level="QA_WARNING" help="doc-en_US/doc/messages/2634.html" severity="2">
   <text>This move/copy constructor definition can be replaced with '=default'.</text>
   <references>
      </references>
  </message>
  <message id="2635" level="QA_WARNING" help="doc-en_US/doc/messages/2635.html" severity="2">
   <text>This destructor definition can be replaced with '=default'.</text>
   <references>
      </references>
  </message>
  <message id="2636" level="QA_WARNING" help="doc-en_US/doc/messages/2636.html" severity="2">
   <text>This move/copy constructor definition can possibly be replaced with '=default'.</text>
   <references>
      </references>
  </message>
  <message id="2637" level="QA_WARNING" help="doc-en_US/doc/messages/2637.html" severity="2">
   <text>The corresponding constructor for this move/copy assignment operator is '=default'.</text>
   <references>
      </references>
  </message>
  <message id="2638" level="QA_WARNING" help="doc-en_US/doc/messages/2638.html" severity="8">
   <text>Implicit copy/move constructor generation not suppressed by this constructor template.</text>
   <references>
    <reference source="ISO C++ Language [12.8/2]"/>
   </references>
  </message>
  <message id="2639" level="QA_WARNING" help="doc-en_US/doc/messages/2639.html" severity="8">
   <text>Implicit copy/move assignment operator generation not suppressed by this template assignment operator.</text>
   <references>
    <reference source="ISO C++ Language [12.8/9]"/>
   </references>
  </message>
  <message id="2640" level="QA_WARNING" help="doc-en_US/doc/messages/2640.html" severity="4">
   <text>This template class has a static object.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2641" level="QA_WARNING" help="doc-en_US/doc/messages/2641.html" severity="5">
   <text>Object with external linkage declared first in the source file.</text>
   <references>
      </references>
  </message>
  <message id="2642" level="QA_WARNING" help="doc-en_US/doc/messages/2642.html" severity="5">
   <text>Function with external linkage declared first in the source file.</text>
   <references>
      </references>
  </message>
  <message id="2643" level="QA_WARNING" help="doc-en_US/doc/messages/2643.html" severity="5">
   <text>This template class can be replaced with a C++ '11 alias template.</text>
   <references>
      </references>
  </message>
  <message id="2644" level="QA_WARNING" help="doc-en_US/doc/messages/2644.html" severity="5">
   <text>This template class can be replaced with multiple C++ '11 alias templates.</text>
   <references>
      </references>
  </message>
  <message id="2645" level="QA_WARNING" help="doc-en_US/doc/messages/2645.html" severity="5">
   <text>Defined function is not used in this translation unit and does not have external linkage.</text>
   <references>
      </references>
  </message>
  <message id="2646" level="QA_WARNING" help="doc-en_US/doc/messages/2646.html" severity="5">
   <text>Declared function is not used in this translation unit and does not have external linkage.</text>
   <references>
      </references>
  </message>
  <message id="2647" level="QA_WARNING" help="doc-en_US/doc/messages/2647.html" severity="1">
   <text>This class declares some special member functions, but doesn't explicitly declare a move constructor/assignment operator.</text>
   <references>
      </references>
  </message>
  <message id="2648" level="QA_WARNING" help="doc-en_US/doc/messages/2648.html" severity="7">
   <text>This class declares a move constructor, but doesn't declare a copy constructor.</text>
   <references>
      </references>
  </message>
  <message id="2649" level="QA_WARNING" help="doc-en_US/doc/messages/2649.html" severity="2">
   <text>This move/copy assignment operator can possibly be changed to be defined '=default'.</text>
   <references>
      </references>
  </message>
  <message id="2650" level="QA_WARNING" help="doc-en_US/doc/messages/2650.html" severity="2">
   <text>Base class '%1s' derived virtually.</text>
   <references>
      </references>
  </message>
  <message id="2651" level="QA_WARNING" help="doc-en_US/doc/messages/2651.html" severity="6">
   <text>No constructors are inherited by this using declaration.</text>
   <references>
      </references>
  </message>
  <message id="2652" level="QA_WARNING" help="doc-en_US/doc/messages/2652.html" severity="6">
   <text>The inherited constructors for this class cannot be called.</text>
   <references>
      </references>
  </message>
  <message id="2653" level="QA_WARNING" help="doc-en_US/doc/messages/2653.html" severity="4">
   <text>Using both 'final' and 'virtual'.</text>
   <references>
      </references>
  </message>
  <message id="2654" level="QA_WARNING" help="doc-en_US/doc/messages/2654.html" severity="4">
   <text>Using both 'final' and 'override'.</text>
   <references>
      </references>
  </message>
  <message id="2655" level="QA_WARNING" help="doc-en_US/doc/messages/2655.html" severity="4">
   <text>This virtual function is introduced in a final class.</text>
   <references>
      </references>
  </message>
  <message id="2656" level="QA_WARNING" help="doc-en_US/doc/messages/2656.html" severity="4">
   <text>This inherited virtual function in a final class is not declared as 'final'.</text>
   <references>
      </references>
  </message>
  <message id="2657" level="QA_WARNING" help="doc-en_US/doc/messages/2657.html" severity="4">
   <text>This assignment operator is declared 'virtual'.</text>
   <references>
      </references>
  </message>
  <message id="2658" level="QA_WARNING" help="doc-en_US/doc/messages/2658.html" severity="4">
   <text>This non-final class has a public non-virtual destructor.</text>
   <references>
      </references>
  </message>
  <message id="2659" level="QA_WARNING" help="doc-en_US/doc/messages/2659.html" severity="6">
   <text>Base class '%1s' has non-deleted public copy/move special member functions.</text>
   <references>
      </references>
  </message>
  <message id="2660" level="QA_WARNING" help="doc-en_US/doc/messages/2660.html" severity="2">
   <text>This explicit specialization declares parameter names that are different from those in the primary template.</text>
   <references>
      </references>
  </message>
  <message id="2661" level="QA_WARNING" help="doc-en_US/doc/messages/2661.html" severity="2">
   <text>Return type of function definition refers to class template member.</text>
   <references>
      </references>
  </message>
  <message id="2662" level="QA_WARNING" help="doc-en_US/doc/messages/2662.html" severity="4">
   <text>This 'std::unique_ptr' is passed by reference to const.</text>
   <references>
      </references>
  </message>
  <message id="2663" level="QA_WARNING" help="doc-en_US/doc/messages/2663.html" severity="2">
   <text>This 'std::unique_ptr' is passed by reference to const for this instantiation.</text>
   <references>
      </references>
  </message>
  <message id="2664" level="QA_WARNING" help="doc-en_US/doc/messages/2664.html" severity="2">
   <text>The name used for the type in this parameter redeclaration is different.</text>
   <references>
      </references>
  </message>
  <message id="2665" level="QA_WARNING" help="doc-en_US/doc/messages/2665.html" severity="2">
   <text>This parameter redeclaration matches as a result of an array-to-pointer or function-to-pointer conversion.</text>
   <references>
      </references>
  </message>
  <message id="2666" level="QA_WARNING" help="doc-en_US/doc/messages/2666.html" severity="2">
   <text>This parameter redeclaration has different top level cv-qualifiers.</text>
   <references>
      </references>
  </message>
  <message id="2667" level="QA_WARNING" help="doc-en_US/doc/messages/2667.html" severity="1">
   <text>This function, defined inside a class definition, is explicitly inline.</text>
   <references>
    <reference source="Industrial Strength C++ [Style.A.15]"/>
   </references>
  </message>
  <message id="2670" level="QA_WARNING" help="doc-en_US/doc/messages/2670.html" severity="2">
   <text>The name used for the type in this object redeclaration is different.</text>
   <references>
      </references>
  </message>
  <message id="2671" level="QA_WARNING" help="doc-en_US/doc/messages/2671.html" severity="2">
   <text>Definite: The value being compared with macro EOF does not originate from an EOF returning function.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2674" level="QA_WARNING" help="doc-en_US/doc/messages/2674.html" severity="2">
   <text>Possible: The value being compared with macro EOF does not originate from an EOF returning function.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2676" level="QA_WARNING" help="doc-en_US/doc/messages/2676.html" severity="2">
   <text>Definite: The value originating from an EOF returning function was modified before being compared with macro EOF.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2678" level="QA_WARNING" help="doc-en_US/doc/messages/2678.html" severity="2">
   <text>Suspicious: The value originating from an EOF returning function was modified before being compared with macro EOF.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2743" level="QA_WARNING" help="doc-en_US/doc/messages/2743.html" severity="2">
   <text>This 'do - while' loop controlling expression is a constant expression and its value is 'false'. The loop will only be executed once.</text>
   <references>
      </references>
  </message>
  <message id="2750" level="QA_WARNING" help="doc-en_US/doc/messages/2750.html" severity="9">
   <text>Internal dataflow problem. Dataflow analysis continues with the next function. Please inform Programming Research.</text>
   <references>
      </references>
  </message>
  <message id="2751" level="QA_WARNING" help="doc-en_US/doc/messages/2751.html" severity="7">
   <text>This function is too complex. Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2752" level="QA_WARNING" help="doc-en_US/doc/messages/2752.html" severity="7">
   <text>This '%1s' results in the function being too complex. Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2755" level="QA_WARNING" help="doc-en_US/doc/messages/2755.html" severity="7">
   <text>Analysis time of function '%1s' has exceeded the configured maximum: '%2sms'.  Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2757" level="QA_WARNING" help="doc-en_US/doc/messages/2757.html" severity="0">
   <text>Could not analyze function '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="2759" level="QA_WARNING" help="doc-en_US/doc/messages/2759.html" severity="7">
   <text>ODR violation for definition of '%1s'. Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2790" level="QA_WARNING" help="doc-en_US/doc/messages/2790.html" severity="6">
   <text>Constant: Right hand operand of shift operator is negative or too large.</text>
   <references>
    <reference source="ISO C++ Language [5.8/1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2800" level="QA_WARNING" help="doc-en_US/doc/messages/2800.html" severity="8">
   <text>Constant: Overflow in signed arithmetic operation.</text>
   <references>
    <reference source="ISO C++ Language [5/5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2830" level="QA_WARNING" help="doc-en_US/doc/messages/2830.html" severity="8">
   <text>Constant: Division by zero.</text>
   <references>
    <reference source="ISO C++ Language [5.6/4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2850" level="QA_WARNING" help="doc-en_US/doc/messages/2850.html" severity="6">
   <text>Constant: Implicit conversion to a signed integer type of insufficient size.</text>
   <references>
    <reference source="ISO C++ Language [4.7/3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2855" level="QA_WARNING" help="doc-en_US/doc/messages/2855.html" severity="6">
   <text>Constant: Casting to a signed integer type of insufficient size.</text>
   <references>
    <reference source="ISO C++ Language [4.7/3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2860" level="QA_WARNING" help="doc-en_US/doc/messages/2860.html" severity="5">
   <text>Constant: Implementation-defined value resulting from left shift operation on expression of signed type.</text>
   <references>
    <reference source="ISO C++ Language [5.8/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2877" level="QA_WARNING" help="doc-en_US/doc/messages/2877.html" severity="6">
   <text>This loop will never be executed more than once.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2880" level="QA_WARNING" help="doc-en_US/doc/messages/2880.html" severity="6">
   <text>This code is unreachable.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2881" level="QA_WARNING" help="doc-en_US/doc/messages/2881.html" severity="2">
   <text>The code in this 'default' clause is unreachable.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2882" level="QA_WARNING" help="doc-en_US/doc/messages/2882.html" severity="7">
   <text>This 'switch' statement will bypass the initialization of local variables.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2883" level="QA_WARNING" help="doc-en_US/doc/messages/2883.html" severity="7">
   <text>This 'goto' statement will always bypass the initialization of local variables.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2890" level="QA_WARNING" help="doc-en_US/doc/messages/2890.html" severity="6">
   <text>Constant: Negative value implicitly converted to an unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2895" level="QA_WARNING" help="doc-en_US/doc/messages/2895.html" severity="5">
   <text>Constant: Negative value cast to an unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2900" level="QA_WARNING" help="doc-en_US/doc/messages/2900.html" severity="6">
   <text>Constant: Positive integer value truncated by implicit conversion to a smaller unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2905" level="QA_WARNING" help="doc-en_US/doc/messages/2905.html" severity="2">
   <text>Constant: Positive integer value truncated by cast to a smaller unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2910" level="QA_WARNING" help="doc-en_US/doc/messages/2910.html" severity="4">
   <text>Constant: Wraparound in unsigned arithmetic operation.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2920" level="QA_WARNING" help="doc-en_US/doc/messages/2920.html" severity="4">
   <text>Constant: Left shift operation on expression of unsigned type results in loss of high order bits.</text>
   <references>
    <reference source="ISO C++ Language [5.8]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2940" level="QA_WARNING" help="doc-en_US/doc/messages/2940.html" severity="2">
   <text>Constant: Result of implicit conversion is only representable in a two's complement implementation.</text>
   <references>
    <reference source="ISO C Language [5.2.4.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2945" level="QA_WARNING" help="doc-en_US/doc/messages/2945.html" severity="2">
   <text>Constant: Result of cast is only representable in a two's complement implementation.</text>
   <references>
    <reference source="ISO C Language [5.2.4.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2990" level="QA_WARNING" help="doc-en_US/doc/messages/2990.html" severity="6">
   <text>The value of this loop controlling expression is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2991" level="QA_WARNING" help="doc-en_US/doc/messages/2991.html" severity="6">
   <text>The value of this 'if' controlling expression is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2992" level="QA_WARNING" help="doc-en_US/doc/messages/2992.html" severity="6">
   <text>The value of this 'if' controlling expression is always 'false'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2993" level="QA_WARNING" help="doc-en_US/doc/messages/2993.html" severity="6">
   <text>The value of this 'do - while' loop controlling expression is always 'false'. The loop will only be executed once.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2994" level="QA_WARNING" help="doc-en_US/doc/messages/2994.html" severity="6">
   <text>The value of this 'while' or 'for' loop controlling expression is always 'false'. The loop will not be entered.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2995" level="QA_WARNING" help="doc-en_US/doc/messages/2995.html" severity="6">
   <text>The result of this logical operation is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2996" level="QA_WARNING" help="doc-en_US/doc/messages/2996.html" severity="6">
   <text>The result of this logical operation is always 'false'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2997" level="QA_WARNING" help="doc-en_US/doc/messages/2997.html" severity="6">
   <text>The first operand of this conditional operator is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2998" level="QA_WARNING" help="doc-en_US/doc/messages/2998.html" severity="6">
   <text>The first operand of this conditional operator is always 'false'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3000" level="QA_WARNING" help="doc-en_US/doc/messages/3000.html" severity="6">
   <text>This is an implicit conversion between signed and unsigned integer types.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3001" level="QA_WARNING" help="doc-en_US/doc/messages/3001.html" severity="5">
   <text>This is an implicit conversion between a signed or unsigned integer type and char.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3002" level="QA_WARNING" help="doc-en_US/doc/messages/3002.html" severity="7">
   <text>This unary minus operator is being applied to an unsigned type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3003" level="QA_WARNING" help="doc-en_US/doc/messages/3003.html" severity="6">
   <text>Bitwise operator is being applied to a signed type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3004" level="QA_WARNING" help="doc-en_US/doc/messages/3004.html" severity="4">
   <text>Bitwise operator is being applied to an enumerator value which is potentially negative.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3005" level="QA_WARNING" help="doc-en_US/doc/messages/3005.html" severity="7">
   <text>This unary minus operator is being applied to a type that is unsigned before promotion.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3006" level="QA_WARNING" help="doc-en_US/doc/messages/3006.html" severity="5">
   <text>Bitwise operator is being applied to a constant value which is negative.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3007" level="QA_WARNING" help="doc-en_US/doc/messages/3007.html" severity="5">
   <text>Bitwise operator is being applied to a signed type that is unsigned before promotion.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3008" level="QA_WARNING" help="doc-en_US/doc/messages/3008.html" severity="3">
   <text>Bitwise operator is being applied to a constant expression of signed type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3010" level="QA_WARNING" help="doc-en_US/doc/messages/3010.html" severity="6">
   <text>This is an implicit conversion from a larger integer to a smaller integer.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3011" level="QA_WARNING" help="doc-en_US/doc/messages/3011.html" severity="5">
   <text>This is an implicit conversion between floating and integer types.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3012" level="QA_WARNING" help="doc-en_US/doc/messages/3012.html" severity="7">
   <text>This is an implicit conversion from a larger floating type to a smaller floating type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3013" level="QA_WARNING" help="doc-en_US/doc/messages/3013.html" severity="6">
   <text>This is a cast of an integer to an enum.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3014" level="QA_WARNING" help="doc-en_US/doc/messages/3014.html" severity="8">
   <text>This is a loss making implicit integral conversion.</text>
   <references>
      </references>
  </message>
  <message id="3015" level="QA_WARNING" help="doc-en_US/doc/messages/3015.html" severity="3">
   <text>This is an implicit conversion of a constant between floating and integer types.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3016" level="QA_WARNING" help="doc-en_US/doc/messages/3016.html" severity="7">
   <text>This is a cast from a floating point number to an integer type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3017" level="QA_WARNING" help="doc-en_US/doc/messages/3017.html" severity="4">
   <text>This cast allows manipulation of the bits in an object of floating point type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3018" level="QA_WARNING" help="doc-en_US/doc/messages/3018.html" severity="7">
   <text>This may have an unexpected value on some platforms.</text>
   <references>
      </references>
  </message>
  <message id="3019" level="QA_WARNING" help="doc-en_US/doc/messages/3019.html" severity="6">
   <text>The result of this string compare function is being implicitly converted to bool.</text>
   <references>
      </references>
  </message>
  <message id="3020" level="QA_WARNING" help="doc-en_US/doc/messages/3020.html" severity="4">
   <text>This expression casts to a pointer from an enumeration whose underlying type is not implementation-defined.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3029" level="QA_WARNING" help="doc-en_US/doc/messages/3029.html" severity="6">
   <text>This conversion uses a converting constructor.</text>
   <references>
      </references>
  </message>
  <message id="3030" level="QA_WARNING" help="doc-en_US/doc/messages/3030.html" severity="4">
   <text>This expression casts between two pointer types.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3031" level="QA_WARNING" help="doc-en_US/doc/messages/3031.html" severity="4">
   <text>This expression is a cast to a reference type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3032" level="QA_WARNING" help="doc-en_US/doc/messages/3032.html" severity="4">
   <text>This is a pointer cast to an integral type other than std::(u)intptr_t from a pointer.</text>
   <references>
      </references>
  </message>
  <message id="3033" level="QA_WARNING" help="doc-en_US/doc/messages/3033.html" severity="4">
   <text>This is casting a pointer to a fundamental to a pointer to a more restrictively aligned fundamental.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3034" level="QA_WARNING" help="doc-en_US/doc/messages/3034.html" severity="4">
   <text>This is casting a pointer to a fundamental to/from a pointer to 'bool'.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3035" level="QA_WARNING" help="doc-en_US/doc/messages/3035.html" severity="4">
   <text>This is casting a pointer to a fundamental to/from a pointer to 'wchar_t'.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3036" level="QA_WARNING" help="doc-en_US/doc/messages/3036.html" severity="6">
   <text>This expression casts from a pointer type to a fundamental type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3037" level="QA_WARNING" help="doc-en_US/doc/messages/3037.html" severity="6">
   <text>This expression casts a fundamental type to a pointer type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3038" level="QA_WARNING" help="doc-en_US/doc/messages/3038.html" severity="4">
   <text>This is casting a pointer to void to a pointer to a more restrictively aligned fundamental.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3039" level="QA_WARNING" help="doc-en_US/doc/messages/3039.html" severity="6">
   <text>This expression is a pointer cast from a literal or constant value.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3040" level="QA_WARNING" help="doc-en_US/doc/messages/3040.html" severity="8">
   <text>This expression casts from a pointer type to a smaller integral type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3041" level="QA_WARNING" help="doc-en_US/doc/messages/3041.html" severity="8">
   <text>This expression casts to a pointer type from a smaller integral type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3042" level="QA_WARNING" help="doc-en_US/doc/messages/3042.html" severity="6">
   <text>This expression casts from a pointer type to a signed integral type of the same size.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3043" level="QA_WARNING" help="doc-en_US/doc/messages/3043.html" severity="6">
   <text>This expression casts to a pointer type from a signed integral type of the same size.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3044" level="QA_WARNING" help="doc-en_US/doc/messages/3044.html" severity="4">
   <text>This expression casts from a pointer type to an integral type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3045" level="QA_WARNING" help="doc-en_US/doc/messages/3045.html" severity="4">
   <text>This expression casts to a pointer from an integral type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3046" level="QA_WARNING" help="doc-en_US/doc/messages/3046.html" severity="8">
   <text>This expression casts from a pointer type to an integral type with implementation defined size.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3047" level="QA_WARNING" help="doc-en_US/doc/messages/3047.html" severity="8">
   <text>This expression casts to a pointer type from an integral type or enumeration underlying type with implementation defined size.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3048" level="QA_WARNING" help="doc-en_US/doc/messages/3048.html" severity="6">
   <text>This expression is a cast to or from a pointer to function type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3049" level="QA_WARNING" help="doc-en_US/doc/messages/3049.html" severity="4">
   <text>This expression uses reinterpret_cast, bypassing type safety.</text>
   <references>
    <reference source="ISO 2014 C++ Language [5.2.10]"/>
   </references>
  </message>
  <message id="3050" level="QA_WARNING" help="doc-en_US/doc/messages/3050.html" severity="6">
   <text>This conversion uses a non-explicit conversion operator.</text>
   <references>
      </references>
  </message>
  <message id="3051" level="QA_WARNING" help="doc-en_US/doc/messages/3051.html" severity="5">
   <text>Be aware that an implicit conversion from '%1s' to '%2s' takes place.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3052" level="QA_WARNING" help="doc-en_US/doc/messages/3052.html" severity="4">
   <text>The literal 1 is used instead of true in a boolean context.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="3053" level="QA_WARNING" help="doc-en_US/doc/messages/3053.html" severity="4">
   <text>The literal 0 is used instead of false in a boolean context.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="3054" level="QA_WARNING" help="doc-en_US/doc/messages/3054.html" severity="5">
   <text>Be aware that an implicit conversion from '%1s' to bool takes place.</text>
   <references>
      </references>
  </message>
  <message id="3055" level="QA_WARNING" help="doc-en_US/doc/messages/3055.html" severity="5">
   <text>Be aware that an implicit conversion from pointer '%1s' to bool takes place.</text>
   <references>
      </references>
  </message>
  <message id="3056" level="QA_WARNING" help="doc-en_US/doc/messages/3056.html" severity="4">
   <text>This conversion to a pointer-to-member is non standard.</text>
   <references>
    <reference source="ISO C++ Language [5.3.1/2]"/>
   </references>
  </message>
  <message id="3057" level="QA_WARNING" help="doc-en_US/doc/messages/3057.html" severity="4">
   <text>Invalid conversion in template non type argument.</text>
   <references>
    <reference source="ISO C++ Language [14.3.2]"/>
   </references>
  </message>
  <message id="3058" level="QA_WARNING" help="doc-en_US/doc/messages/3058.html" severity="5">
   <text>Function not used in call and not preceded by '&amp;' operator.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3059" level="QA_WARNING" help="doc-en_US/doc/messages/3059.html" severity="5">
   <text>Reference to function not used in call and not preceded by '&amp;' operator.</text>
   <references>
      </references>
  </message>
  <message id="3060" level="QA_WARNING" help="doc-en_US/doc/messages/3060.html" severity="7">
   <text>This expression strips away a 'const' qualifier.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3061" level="QA_WARNING" help="doc-en_US/doc/messages/3061.html" severity="7">
   <text>This expression strips away a 'volatile' qualifier.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3062" level="QA_WARNING" help="doc-en_US/doc/messages/3062.html" severity="8">
   <text>This expression inserts a qualifier but the expression cannot be implicitly converted.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3063" level="QA_WARNING" help="doc-en_US/doc/messages/3063.html" severity="3">
   <text>String literal to char * conversions are deprecated.</text>
   <references>
    <reference source="ISO C++ Language [4.2]"/>
    <reference source="ISO C++ Language [Annex.D.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3064" level="QA_WARNING" help="doc-en_US/doc/messages/3064.html" severity="3">
   <text>Wide string literal to wchar_t * conversions are deprecated.</text>
   <references>
    <reference source="ISO C++ Language [4.2]"/>
    <reference source="ISO C++ Language [Annex.D.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3065" level="QA_WARNING" help="doc-en_US/doc/messages/3065.html" severity="2">
   <text>This conversion uses an explicit conversion operator.</text>
   <references>
      </references>
  </message>
  <message id="3066" level="QA_WARNING" help="doc-en_US/doc/messages/3066.html" severity="6">
   <text>This is a 'const_cast' expression that strips away a 'const' or 'volatile' qualifier.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3067" level="QA_WARNING" help="doc-en_US/doc/messages/3067.html" severity="3">
   <text>Use of the underlying type of an unscoped enumeration that does not have a fixed underlying type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3068" level="QA_WARNING" help="doc-en_US/doc/messages/3068.html" severity="5">
   <text>Explicit conversion to bool from a non-bool type.</text>
   <references>
      </references>
  </message>
  <message id="3069" level="QA_WARNING" help="doc-en_US/doc/messages/3069.html" severity="4">
   <text>Template conversion operator not included in overload set.</text>
   <references>
    <reference source="ISO 2017 C++ Language [over.call.object]"/>
   </references>
  </message>
  <message id="3070" level="QA_WARNING" help="doc-en_US/doc/messages/3070.html" severity="6">
   <text>This expression is a downcast, a base class is cast to a derived class.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3071" level="QA_WARNING" help="doc-en_US/doc/messages/3071.html" severity="7">
   <text>This expression is an upcast to a virtual base class.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3072" level="QA_WARNING" help="doc-en_US/doc/messages/3072.html" severity="7">
   <text>This is an implicit conversion from an object of a derived type to an object of a base type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3073" level="QA_WARNING" help="doc-en_US/doc/messages/3073.html" severity="8">
   <text>This is an implicit conversion from an array of derived to pointer to base.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3074" level="QA_WARNING" help="doc-en_US/doc/messages/3074.html" severity="8">
   <text>Avoid passing a non POD object as an ellipsis argument.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3075" level="QA_WARNING" help="doc-en_US/doc/messages/3075.html" severity="2">
   <text>Downcast requires polymorphic information.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3076" level="QA_WARNING" help="doc-en_US/doc/messages/3076.html" severity="3">
   <text>This expression is a downcast, a polymorphic base class is cast to a derived class.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3077" level="QA_WARNING" help="doc-en_US/doc/messages/3077.html" severity="1">
   <text>This expression is a checked downcast, a base class is cast to a derived class.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3078" level="QA_WARNING" help="doc-en_US/doc/messages/3078.html" severity="6">
   <text>The non-const iterator returned by '%1s' is immediately converted to a const iterator.</text>
   <references>
      </references>
  </message>
  <message id="3079" level="QA_WARNING" help="doc-en_US/doc/messages/3079.html" severity="4">
   <text>Non-const iterator converted to a const iterator.</text>
   <references>
      </references>
  </message>
  <message id="3080" level="QA_WARNING" help="doc-en_US/doc/messages/3080.html" severity="2">
   <text>This expression uses old style casts.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="More Effective C++ [Item2]"/>
    <reference source="Industrial Strength C++ [Rules.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3081" level="QA_WARNING" help="doc-en_US/doc/messages/3081.html" severity="6">
   <text>This is a cast expression.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3082" level="QA_WARNING" help="doc-en_US/doc/messages/3082.html" severity="2">
   <text>This expression uses function-style casts.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="More Effective C++ [Item2]"/>
    <reference source="Industrial Strength C++ [Rules.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3083" level="QA_WARNING" help="doc-en_US/doc/messages/3083.html" severity="2">
   <text>This is a 'const_cast' expression that does not strip away a 'const' or 'volatile' qualifier.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3084" level="QA_WARNING" help="doc-en_US/doc/messages/3084.html" severity="5">
   <text>This is using unsigned arithmetic.</text>
   <references>
      </references>
  </message>
  <message id="3085" level="QA_WARNING" help="doc-en_US/doc/messages/3085.html" severity="7">
   <text>Cast involving type(s) with data members declared across an access label.</text>
   <references>
    <reference source="ISO C++ Language [11.1/2]"/>
   </references>
  </message>
  <message id="3086" level="QA_WARNING" help="doc-en_US/doc/messages/3086.html" severity="7">
   <text>Memcpy/fread/fwrite involving type(s) with data members declared across an access label.</text>
   <references>
    <reference source="ISO C++ Language [11.1/2]"/>
   </references>
  </message>
  <message id="3087" level="QA_WARNING" help="doc-en_US/doc/messages/3087.html" severity="7">
   <text>Call to placement new involving type(s) with data members declared across an access label.</text>
   <references>
    <reference source="ISO C++ Language [11.1/2]"/>
   </references>
  </message>
  <message id="3088" level="QA_WARNING" help="doc-en_US/doc/messages/3088.html" severity="7">
   <text>Conversion to 'void*' from type with data members declared across an access label.</text>
   <references>
    <reference source="ISO C++ Language [11.1/2]"/>
   </references>
  </message>
  <message id="3089" level="QA_WARNING" help="doc-en_US/doc/messages/3089.html" severity="7">
   <text>Nested struct in union has data members declared across an access label.</text>
   <references>
    <reference source="ISO C++ Language [11.1/2]"/>
   </references>
  </message>
  <message id="3090" level="QA_WARNING" help="doc-en_US/doc/messages/3090.html" severity="7">
   <text>Cast involving type(s) with multiple base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3091" level="QA_WARNING" help="doc-en_US/doc/messages/3091.html" severity="7">
   <text>Memcpy/fread/fwrite involving type(s) with multiple base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3092" level="QA_WARNING" help="doc-en_US/doc/messages/3092.html" severity="7">
   <text>Conversion to 'void*' from type with multiple base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3093" level="QA_WARNING" help="doc-en_US/doc/messages/3093.html" severity="7">
   <text>Call to placement new involving type(s) with multiple base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3094" level="QA_WARNING" help="doc-en_US/doc/messages/3094.html" severity="7">
   <text>Nested struct in union has multiple base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3095" level="QA_WARNING" help="doc-en_US/doc/messages/3095.html" severity="6">
   <text>This is an illegal downcast from virtual base.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3096" level="QA_WARNING" help="doc-en_US/doc/messages/3096.html" severity="8">
   <text>This is a dangerous downcast from virtual base.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3097" level="QA_WARNING" help="doc-en_US/doc/messages/3097.html" severity="5">
   <text>This is using unsigned arithmetic with implicitly promoted operand(s).</text>
   <references>
      </references>
  </message>
  <message id="3098" level="QA_WARNING" help="doc-en_US/doc/messages/3098.html" severity="1">
   <text>This function-style cast calls a constructor.</text>
   <references>
      </references>
  </message>
  <message id="3099" level="QA_WARNING" help="doc-en_US/doc/messages/3099.html" severity="5">
   <text>This cast is redundant.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3100" level="QA_WARNING" help="doc-en_US/doc/messages/3100.html" severity="5">
   <text>This cast is redundant for this instantiation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3101" level="QA_WARNING" help="doc-en_US/doc/messages/3101.html" severity="5">
   <text>This cast is redundant because its result is converted back to the original type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3102" level="QA_WARNING" help="doc-en_US/doc/messages/3102.html" severity="5">
   <text>This cast is redundant because its result is converted back to the original type for this instantiation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3103" level="QA_WARNING" help="doc-en_US/doc/messages/3103.html" severity="7">
   <text>Cast involving type(s) with base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3104" level="QA_WARNING" help="doc-en_US/doc/messages/3104.html" severity="9">
   <text>#pragma '%1s' has invalid arguments.</text>
   <references>
      </references>
  </message>
  <message id="3105" level="QA_WARNING" help="doc-en_US/doc/messages/3105.html" severity="7">
   <text>Memcpy/fread/fwrite involving type(s) with base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3106" level="QA_WARNING" help="doc-en_US/doc/messages/3106.html" severity="7">
   <text>Conversion to 'void*' from type with base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3107" level="QA_WARNING" help="doc-en_US/doc/messages/3107.html" severity="7">
   <text>Call to placement new involving type(s) with base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3108" level="QA_WARNING" help="doc-en_US/doc/messages/3108.html" severity="7">
   <text>Nested struct in union has base classes.</text>
   <references>
    <reference source="ISO C++ Language [10/3]"/>
   </references>
  </message>
  <message id="3109" level="QA_WARNING" help="doc-en_US/doc/messages/3109.html" severity="4">
   <text>Cast used to ignore result of call to function.</text>
   <references>
      </references>
  </message>
  <message id="3110" level="QA_WARNING" help="doc-en_US/doc/messages/3110.html" severity="5">
   <text>This is a cast expression that creates a temporary of a type that is trivially destructible.</text>
   <references>
      </references>
  </message>
  <message id="3111" level="QA_WARNING" help="doc-en_US/doc/messages/3111.html" severity="5">
   <text>This is a cast expression that creates a temporary of a type that is not trivially destructible.</text>
   <references>
      </references>
  </message>
  <message id="3112" level="QA_WARNING" help="doc-en_US/doc/messages/3112.html" severity="5">
   <text>This is a reinterpret cast to or from an incomplete type.</text>
   <references>
      </references>
  </message>
  <message id="3113" level="QA_WARNING" help="doc-en_US/doc/messages/3113.html" severity="5">
   <text>A pointer to a FILE object is dereferenced.</text>
   <references>
      </references>
  </message>
  <message id="3114" level="QA_WARNING" help="doc-en_US/doc/messages/3114.html" severity="5">
   <text>A pointer to a FILE object is converted to a different type.</text>
   <references>
      </references>
  </message>
  <message id="3115" level="QA_WARNING" help="doc-en_US/doc/messages/3115.html" severity="5">
   <text>Calculates the number of bits in the object representation not that of the value representation.</text>
   <references>
      </references>
  </message>
  <message id="3116" level="QA_WARNING" help="doc-en_US/doc/messages/3116.html" severity="5">
   <text>Function implicitly converting to type compatible to pointer to function.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3117" level="QA_WARNING" help="doc-en_US/doc/messages/3117.html" severity="5">
   <text>Reference to function implicitly converting to type compatible to pointer to function.</text>
   <references>
      </references>
  </message>
  <message id="3118" level="QA_WARNING" help="doc-en_US/doc/messages/3118.html" severity="5">
   <text>memcmp being used to compare objects with floating point type.</text>
   <references>
      </references>
  </message>
  <message id="3119" level="QA_WARNING" help="doc-en_US/doc/messages/3119.html" severity="7">
   <text>'%1s' alignment requirements are more restrictive than '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="3120" level="QA_WARNING" help="doc-en_US/doc/messages/3120.html" severity="4">
   <text>This expression is a cast from 'void*' to a different pointer type.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3121" level="QA_WARNING" help="doc-en_US/doc/messages/3121.html" severity="4">
   <text>This expression is a cast to 'void*'.</text>
   <references>
    <reference source="ISO C++ Language [5.2.[3,7-11]]"/>
   </references>
  </message>
  <message id="3122" level="QA_WARNING" help="doc-en_US/doc/messages/3122.html" severity="5">
   <text>'NULL' macro being used for an integral expression.</text>
   <references>
      </references>
  </message>
  <message id="3123" level="QA_WARNING" help="doc-en_US/doc/messages/3123.html" severity="5">
   <text>Do not throw 'NULL'.</text>
   <references>
      </references>
  </message>
  <message id="3124" level="QA_WARNING" help="doc-en_US/doc/messages/3124.html" severity="5">
   <text>Literal 0 being used for the null-pointer-constant.</text>
   <references>
      </references>
  </message>
  <message id="3125" level="QA_WARNING" help="doc-en_US/doc/messages/3125.html" severity="5">
   <text>This is a cast from a pointer-to-member to a base class pointer-to-member type.</text>
   <references>
      </references>
  </message>
  <message id="3126" level="QA_WARNING" help="doc-en_US/doc/messages/3126.html" severity="5">
   <text>This is a cast from a pointer-to-member to an unrelated pointer-to-member type.</text>
   <references>
      </references>
  </message>
  <message id="3127" level="QA_WARNING" help="doc-en_US/doc/messages/3127.html" severity="6">
   <text>Misuse of predefined identifier '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="3128" level="QA_WARNING" help="doc-en_US/doc/messages/3128.html" severity="7">
   <text>'%1s' alignment requirements may be more restrictive than '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="3129" level="QA_WARNING" help="doc-en_US/doc/messages/3129.html" severity="4">
   <text>Default operator new called for over-aligned type %1s.</text>
   <references>
      </references>
  </message>
  <message id="3130" level="QA_WARNING" help="doc-en_US/doc/messages/3130.html" severity="6">
   <text>This complex expression is implicitly converted to a different essential type.</text>
   <references>
      </references>
  </message>
  <message id="3131" level="QA_WARNING" help="doc-en_US/doc/messages/3131.html" severity="7">
   <text>This cast is converting a complex integral expression to a floating point type.</text>
   <references>
      </references>
  </message>
  <message id="3132" level="QA_WARNING" help="doc-en_US/doc/messages/3132.html" severity="7">
   <text>This cast is converting a complex floating point expression to an integral type.</text>
   <references>
      </references>
  </message>
  <message id="3133" level="QA_WARNING" help="doc-en_US/doc/messages/3133.html" severity="7">
   <text>This cast of a complex integral expression is increasing the size of the essential type.</text>
   <references>
      </references>
  </message>
  <message id="3134" level="QA_WARNING" help="doc-en_US/doc/messages/3134.html" severity="7">
   <text>This cast of a complex floating point expression is increasing the size of the essential type.</text>
   <references>
      </references>
  </message>
  <message id="3135" level="QA_WARNING" help="doc-en_US/doc/messages/3135.html" severity="5">
   <text>This cast of a complex expression changes the signedness of the essential type.</text>
   <references>
      </references>
  </message>
  <message id="3136" level="QA_WARNING" help="doc-en_US/doc/messages/3136.html" severity="7">
   <text>This bitwise operand of ~ or &lt;&lt; with an essential small integer type is not immediately cast back to the essential type.</text>
   <references>
      </references>
  </message>
  <message id="3137" level="QA_WARNING" help="doc-en_US/doc/messages/3137.html" severity="6">
   <text>This plain char type is used for non char values.</text>
   <references>
      </references>
  </message>
  <message id="3138" level="QA_WARNING" help="doc-en_US/doc/messages/3138.html" severity="6">
   <text>The non-constant operands to this binary bitwise operator have different essential types.</text>
   <references>
      </references>
  </message>
  <message id="3139" level="QA_WARNING" help="doc-en_US/doc/messages/3139.html" severity="6">
   <text>This is an implicit conversion from an unsigned to a larger signed integer type.</text>
   <references>
      </references>
  </message>
  <message id="3140" level="QA_WARNING" help="doc-en_US/doc/messages/3140.html" severity="6">
   <text>This is an implicit integral promotion conversion between signed and unsigned integer types.</text>
   <references>
      </references>
  </message>
  <message id="3141" level="QA_WARNING" help="doc-en_US/doc/messages/3141.html" severity="6">
   <text>This implicit conversion of a complex integral expression is increasing the size of the essential type.</text>
   <references>
      </references>
  </message>
  <message id="3142" level="QA_WARNING" help="doc-en_US/doc/messages/3142.html" severity="6">
   <text>This implicit conversion of a complex floating point expression is increasing the size of the essential type.</text>
   <references>
      </references>
  </message>
  <message id="3143" level="QA_WARNING" help="doc-en_US/doc/messages/3143.html" severity="6">
   <text>This constant expression is implicitly converted between essentially signed and unsigned integer types.</text>
   <references>
      </references>
  </message>
  <message id="3144" level="QA_WARNING" help="doc-en_US/doc/messages/3144.html" severity="6">
   <text>The first operand of the conditional operator is converted implicitly to bool.</text>
   <references>
      </references>
  </message>
  <message id="3145" level="QA_WARNING" help="doc-en_US/doc/messages/3145.html" severity="6">
   <text>The operand of the logical operator is converted implicitly to bool.</text>
   <references>
      </references>
  </message>
  <message id="3146" level="QA_WARNING" help="doc-en_US/doc/messages/3146.html" severity="8">
   <text>This va_list is not initialized with va_start before use.</text>
   <references>
      </references>
  </message>
  <message id="3147" level="QA_WARNING" help="doc-en_US/doc/messages/3147.html" severity="7">
   <text>This va_list is not closed with va_end after use.</text>
   <references>
      </references>
  </message>
  <message id="3148" level="QA_WARNING" help="doc-en_US/doc/messages/3148.html" severity="7">
   <text>Calling va_start on a va_list which is already open is undefined.</text>
   <references>
      </references>
  </message>
  <message id="3149" level="QA_WARNING" help="doc-en_US/doc/messages/3149.html" severity="6">
   <text>Directly accessing a va_list without using a standard library macro.</text>
   <references>
      </references>
  </message>
  <message id="3150" level="QA_WARNING" help="doc-en_US/doc/messages/3150.html" severity="7">
   <text>Unknown length modifier used with '%2s' conversion specifier, number %1s.</text>
   <references>
      </references>
  </message>
  <message id="3151" level="QA_WARNING" help="doc-en_US/doc/messages/3151.html" severity="7">
   <text>Argument type does not match conversion specifier number %1s.</text>
   <references>
      </references>
  </message>
  <message id="3152" level="QA_WARNING" help="doc-en_US/doc/messages/3152.html" severity="7">
   <text>Using unsupported conversion specifier number %1s.</text>
   <references>
      </references>
  </message>
  <message id="3153" level="QA_WARNING" help="doc-en_US/doc/messages/3153.html" severity="7">
   <text>Incomplete conversion specifier, number %1s.</text>
   <references>
      </references>
  </message>
  <message id="3154" level="QA_WARNING" help="doc-en_US/doc/messages/3154.html" severity="7">
   <text>Call contains mismatching number of arguments and conversion specifiers.</text>
   <references>
      </references>
  </message>
  <message id="3155" level="QA_WARNING" help="doc-en_US/doc/messages/3155.html" severity="7">
   <text>'scanf' expects address of objects being stored into.</text>
   <references>
      </references>
  </message>
  <message id="3156" level="QA_WARNING" help="doc-en_US/doc/messages/3156.html" severity="7">
   <text>'-' character in '[]' conversion specification is implementation defined.</text>
   <references>
      </references>
  </message>
  <message id="3157" level="QA_WARNING" help="doc-en_US/doc/messages/3157.html" severity="7">
   <text>Value of character prior to '-' in '[]' is greater than following character.</text>
   <references>
      </references>
  </message>
  <message id="3158" level="QA_WARNING" help="doc-en_US/doc/messages/3158.html" severity="7">
   <text>Same character occurs in scanset more than once.</text>
   <references>
      </references>
  </message>
  <message id="3159" level="QA_WARNING" help="doc-en_US/doc/messages/3159.html" severity="7">
   <text>This call to a formatted i/o function is using a dynamic format string.</text>
   <references>
      </references>
  </message>
  <message id="3160" level="QA_WARNING" help="doc-en_US/doc/messages/3160.html" severity="4">
   <text>Do not use C style casts for ignoring function call returns.</text>
   <references>
      </references>
  </message>
  <message id="3161" level="QA_WARNING" help="doc-en_US/doc/messages/3161.html" severity="5">
   <text>Use of formatted input stream operation without check for success.</text>
   <references>
      </references>
  </message>
  <message id="3162" level="QA_WARNING" help="doc-en_US/doc/messages/3162.html" severity="3">
   <text>%1s may have been called without checking if string is empty.</text>
   <references>
      </references>
  </message>
  <message id="3163" level="QA_WARNING" help="doc-en_US/doc/messages/3163.html" severity="4">
   <text>%1s was called without checking if string is empty.</text>
   <references>
      </references>
  </message>
  <message id="3164" level="QA_WARNING" help="doc-en_US/doc/messages/3164.html" severity="3">
   <text>std::string::operator[] may have been called without checking if requested position is in range.</text>
   <references>
      </references>
  </message>
  <message id="3165" level="QA_WARNING" help="doc-en_US/doc/messages/3165.html" severity="4">
   <text>std::string::operator[] called without checking if requested position is in range.</text>
   <references>
      </references>
  </message>
  <message id="3166" level="QA_WARNING" help="doc-en_US/doc/messages/3166.html" severity="5">
   <text>Do not delete an array object through a static pointer type that differs from the dynamic pointer type of the object.</text>
   <references>
      </references>
  </message>
  <message id="3167" level="QA_WARNING" help="doc-en_US/doc/messages/3167.html" severity="6">
   <text>Declaring an object of type va_list with static or thread local storage duration.</text>
   <references>
      </references>
  </message>
  <message id="3168" level="QA_WARNING" help="doc-en_US/doc/messages/3168.html" severity="4">
   <text>This numeric function argument is implicitly converted to another type.</text>
   <references>
      </references>
  </message>
  <message id="3169" level="QA_WARNING" help="doc-en_US/doc/messages/3169.html" severity="3">
   <text>This numeric member function argument is implicitly converted to another type.</text>
   <references>
      </references>
  </message>
  <message id="3170" level="QA_WARNING" help="doc-en_US/doc/messages/3170.html" severity="3">
   <text>This aggregate constructor argument is implicitly converted to another type.</text>
   <references>
      </references>
  </message>
  <message id="3171" level="QA_WARNING" help="doc-en_US/doc/messages/3171.html" severity="5">
   <text>This atomic variable is referenced twice in the same expression.</text>
   <references>
      </references>
  </message>
  <message id="3172" level="QA_WARNING" help="doc-en_US/doc/messages/3172.html" severity="7">
   <text>Call to '%1s' is not immediately preceded by the zero-ing of 'errno'.</text>
   <references>
      </references>
  </message>
  <message id="3173" level="QA_WARNING" help="doc-en_US/doc/messages/3173.html" severity="7">
   <text>Call to '%1s' is not immediately followed by the testing of 'errno'.</text>
   <references>
      </references>
  </message>
  <message id="3174" level="QA_WARNING" help="doc-en_US/doc/messages/3174.html" severity="7">
   <text>Zero-ing of 'errno' is not immediately followed by a call to an 'errno' setting function.</text>
   <references>
      </references>
  </message>
  <message id="3175" level="QA_WARNING" help="doc-en_US/doc/messages/3175.html" severity="7">
   <text>Testing of 'errno' is not immediately preceded by a call to an 'errno' setting function.</text>
   <references>
      </references>
  </message>
  <message id="3176" level="QA_WARNING" help="doc-en_US/doc/messages/3176.html" severity="7">
   <text>Call to '%1s' is not immediately followed by comparison of return value with expected out-of-band error status.</text>
   <references>
      </references>
  </message>
  <message id="3177" level="QA_WARNING" help="doc-en_US/doc/messages/3177.html" severity="7">
   <text>Testing of 'errno' is not immediately preceded by comparison of status value with expected out-of-band value for '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="3178" level="QA_WARNING" help="doc-en_US/doc/messages/3178.html" severity="7">
   <text>Testing of status value returned from '%1s' is not immediately followed by testing of 'errno'.</text>
   <references>
      </references>
  </message>
  <message id="3179" level="QA_WARNING" help="doc-en_US/doc/messages/3179.html" severity="7">
   <text>Testing of status value returned from '%1s' is not immediately preceded by call to '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="3180" level="QA_WARNING" help="doc-en_US/doc/messages/3180.html" severity="5">
   <text>Declaration for '%1s' is extending standard namespace.</text>
   <references>
      </references>
  </message>
  <message id="3181" level="QA_WARNING" help="doc-en_US/doc/messages/3181.html" severity="5">
   <text>Adding specialization '%1s' is explicitly undefined behaviour.</text>
   <references>
      </references>
  </message>
  <message id="3182" level="QA_WARNING" help="doc-en_US/doc/messages/3182.html" severity="5">
   <text>Adding specialization '%1s' is possibly not well defined behaviour.</text>
   <references>
      </references>
  </message>
  <message id="3183" level="QA_WARNING" help="doc-en_US/doc/messages/3183.html" severity="7">
   <text>Call to '%1s' is not immediately followed by the testing of the return value.</text>
   <references>
      </references>
  </message>
  <message id="3184" level="QA_WARNING" help="doc-en_US/doc/messages/3184.html" severity="7">
   <text>Testing of 'errno' is not immediately preceded by comparison of returned status value.</text>
   <references>
      </references>
  </message>
  <message id="3185" level="QA_WARNING" help="doc-en_US/doc/messages/3185.html" severity="5">
   <text>The argument value to this integer constant macro is not a valid integer literal.</text>
   <references>
      </references>
  </message>
  <message id="3186" level="QA_WARNING" help="doc-en_US/doc/messages/3186.html" severity="5">
   <text>The argument value to this integer constant macro is out of range.</text>
   <references>
      </references>
  </message>
  <message id="3187" level="QA_WARNING" help="doc-en_US/doc/messages/3187.html" severity="5">
   <text>This integer constant macro is for a type smaller than int.</text>
   <references>
      </references>
  </message>
  <message id="3200" level="QA_WARNING" help="doc-en_US/doc/messages/3200.html" severity="8">
   <text>Functor passed to this algorithm might modify the iterated container.</text>
   <references>
      </references>
  </message>
  <message id="3215" level="QA_WARNING" help="doc-en_US/doc/messages/3215.html" severity="5">
   <text>Errno assigned to something other than literal zero.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3220" level="QA_WARNING" help="doc-en_US/doc/messages/3220.html" severity="8">
   <text>Builtin object '%1s' is modified and accessed between sequence points.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.13.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3221" level="QA_WARNING" help="doc-en_US/doc/messages/3221.html" severity="8">
   <text>Builtin argument '%1s' is modified and accessed between sequence points.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.13.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3222" level="QA_WARNING" help="doc-en_US/doc/messages/3222.html" severity="3">
   <text>Class type operand '%1s' is modified and accessed between sequence points.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.13.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3223" level="QA_WARNING" help="doc-en_US/doc/messages/3223.html" severity="3">
   <text>Class type argument '%1s' is modified and accessed between sequence points.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.13.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3224" level="QA_WARNING" help="doc-en_US/doc/messages/3224.html" severity="5">
   <text>This is using errno.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3225" level="QA_WARNING" help="doc-en_US/doc/messages/3225.html" severity="5">
   <text>This full expression has too many side effects.</text>
   <references>
      </references>
  </message>
  <message id="3226" level="QA_WARNING" help="doc-en_US/doc/messages/3226.html" severity="5">
   <text>This full expression has a single side effect with one or more non constant expressions.</text>
   <references>
      </references>
  </message>
  <message id="3227" level="QA_WARNING" help="doc-en_US/doc/messages/3227.html" severity="5">
   <text>This full expression has a single side effect with one or more constant expressions.</text>
   <references>
      </references>
  </message>
  <message id="3228" level="QA_WARNING" help="doc-en_US/doc/messages/3228.html" severity="5">
   <text>The call to this function has a single argument with a side effect and one or more non constant arguments.</text>
   <references>
      </references>
  </message>
  <message id="3229" level="QA_WARNING" help="doc-en_US/doc/messages/3229.html" severity="5">
   <text>This full expression may have too many side effects.</text>
   <references>
      </references>
  </message>
  <message id="3230" level="QA_WARNING" help="doc-en_US/doc/messages/3230.html" severity="7">
   <text>The right hand side of this operator has side effects.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3231" level="QA_WARNING" help="doc-en_US/doc/messages/3231.html" severity="3">
   <text>The right hand side of this operator calls a function.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3232" level="QA_WARNING" help="doc-en_US/doc/messages/3232.html" severity="5">
   <text>This full expression has a single potential side effect with one or more non constant expressions.</text>
   <references>
      </references>
  </message>
  <message id="3233" level="QA_WARNING" help="doc-en_US/doc/messages/3233.html" severity="5">
   <text>This full expression has a single potential side effect with one or more constant expressions.</text>
   <references>
      </references>
  </message>
  <message id="3234" level="QA_WARNING" help="doc-en_US/doc/messages/3234.html" severity="5">
   <text>The call to this function has a single argument with a potential side effect and one or more non constant arguments.</text>
   <references>
      </references>
  </message>
  <message id="3235" level="QA_WARNING" help="doc-en_US/doc/messages/3235.html" severity="5">
   <text>The right hand operand of this logical operator is a function call that may have persistent side effects.</text>
   <references>
      </references>
  </message>
  <message id="3236" level="QA_WARNING" help="doc-en_US/doc/messages/3236.html" severity="5">
   <text>The right hand operand of this logical operator is a call of a pointer to function that may have persistent side effects.</text>
   <references>
      </references>
  </message>
  <message id="3240" level="QA_WARNING" help="doc-en_US/doc/messages/3240.html" severity="6">
   <text>The operand of 'sizeof' has side effects that will not be performed at run-time.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [5.3.3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3241" level="QA_WARNING" help="doc-en_US/doc/messages/3241.html" severity="6">
   <text>The operand of 'typeid' has side effects that will not be performed at run-time.</text>
   <references>
    <reference source="ISO C++ Language [5.2.8]"/>
   </references>
  </message>
  <message id="3242" level="QA_WARNING" help="doc-en_US/doc/messages/3242.html" severity="5">
   <text>This statement has no side effects.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3243" level="QA_WARNING" help="doc-en_US/doc/messages/3243.html" severity="5">
   <text>The expression left of this comma does not have any side effects.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3244" level="QA_WARNING" help="doc-en_US/doc/messages/3244.html" severity="5">
   <text>This expression has no side effects.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3245" level="QA_WARNING" help="doc-en_US/doc/messages/3245.html" severity="5">
   <text>This expression has no side effects.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3246" level="QA_WARNING" help="doc-en_US/doc/messages/3246.html" severity="4">
   <text>The operand of 'typeid' is an expression of polymorphic class type.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [5.2.8]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3247" level="QA_WARNING" help="doc-en_US/doc/messages/3247.html" severity="4">
   <text>The operand of 'typeid' has side effects that will be performed at run-time.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [5.2.8]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3248" level="QA_WARNING" help="doc-en_US/doc/messages/3248.html" severity="2">
   <text>The operand of this 'sizeof' is a function call without side effects.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [5.3.3]"/>
   </references>
  </message>
  <message id="3249" level="QA_WARNING" help="doc-en_US/doc/messages/3249.html" severity="4">
   <text>The operand of this 'sizeof' is a function call with possible side effects that will not be performed at run-time.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [5.3.3]"/>
   </references>
  </message>
  <message id="3250" level="QA_WARNING" help="doc-en_US/doc/messages/3250.html" severity="4">
   <text>The operand of this 'sizeof' will lead to a call to a virtual function that will not be performed at run-time.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [5.3.3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3251" level="QA_WARNING" help="doc-en_US/doc/messages/3251.html" severity="7">
   <text>The operand of 'assert' has side effects that will not be performed if NDEBUG is defined.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO 2003 C++ Language [17.4.2.1]"/>
    <reference source="ISO 2017 C++ Language [17.5.2.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3252" level="QA_WARNING" help="doc-en_US/doc/messages/3252.html" severity="4">
   <text>The predicate to 'condition_variable::wait' calls a function that possibly has side effects.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO 2017 C++ Language [13.5.1]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3253" level="QA_WARNING" help="doc-en_US/doc/messages/3253.html" severity="6">
   <text>The predicate to 'condition_variable::wait' calls a function that has side effects.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO 2017 C++ Language [13.5.1]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3260" level="QA_WARNING" help="doc-en_US/doc/messages/3260.html" severity="2">
   <text>The argument of the not operator (!) is a constant.</text>
   <references>
      </references>
  </message>
  <message id="3270" level="QA_WARNING" help="doc-en_US/doc/messages/3270.html" severity="8">
   <text>Avoid comparing floating types for equality ( == or != ).</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3271" level="QA_WARNING" help="doc-en_US/doc/messages/3271.html" severity="8">
   <text>This expression appears to compare a pointer to virtual member to something other than a null pointer constant.</text>
   <references>
    <reference source="ISO 2014 C++ Language [5.10]"/>
   </references>
  </message>
  <message id="3272" level="QA_WARNING" help="doc-en_US/doc/messages/3272.html" severity="8">
   <text>This expression is never false.</text>
   <references>
      </references>
  </message>
  <message id="3273" level="QA_WARNING" help="doc-en_US/doc/messages/3273.html" severity="8">
   <text>This expression is never true.</text>
   <references>
      </references>
  </message>
  <message id="3274" level="QA_WARNING" help="doc-en_US/doc/messages/3274.html" severity="7">
   <text>Prefer comparing unsigned values equal to (==) zero.</text>
   <references>
      </references>
  </message>
  <message id="3275" level="QA_WARNING" help="doc-en_US/doc/messages/3275.html" severity="4">
   <text>This expression is always true depending on sign of 'char'.</text>
   <references>
      </references>
  </message>
  <message id="3276" level="QA_WARNING" help="doc-en_US/doc/messages/3276.html" severity="4">
   <text>This expression is always false depending on sign of 'char'.</text>
   <references>
      </references>
  </message>
  <message id="3277" level="QA_WARNING" help="doc-en_US/doc/messages/3277.html" severity="4">
   <text>Prefer comparing char values equal to (==) zero depending on platform</text>
   <references>
      </references>
  </message>
  <message id="3278" level="QA_WARNING" help="doc-en_US/doc/messages/3278.html" severity="4">
   <text>This is comparing an unsigned variable with a literal value that is negative before it is converted.</text>
   <references>
      </references>
  </message>
  <message id="3280" level="QA_WARNING" help="doc-en_US/doc/messages/3280.html" severity="6">
   <text>This operand of the built-in equality operator is a pointer to a virtual member function.</text>
   <references>
    <reference source="ISO C++ Language [5.10/2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3281" level="QA_WARNING" help="doc-en_US/doc/messages/3281.html" severity="6">
   <text>This operand of the user declared equality operator is a pointer to a virtual member function.</text>
   <references>
    <reference source="ISO C++ Language [5.10/2]"/>
   </references>
  </message>
  <message id="3282" level="QA_WARNING" help="doc-en_US/doc/messages/3282.html" severity="4">
   <text>The result of this operator is always true for a '%1s' of '%2s' bits.</text>
   <references>
      </references>
  </message>
  <message id="3283" level="QA_WARNING" help="doc-en_US/doc/messages/3283.html" severity="4">
   <text>The result of this operator is always false for a '%1s' of '%2s' bits.</text>
   <references>
      </references>
  </message>
  <message id="3290" level="QA_WARNING" help="doc-en_US/doc/messages/3290.html" severity="2">
   <text>Result of builtin postfix operator not used.</text>
   <references>
    <reference source="More Effective C++ [Item6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3291" level="QA_WARNING" help="doc-en_US/doc/messages/3291.html" severity="2">
   <text>The use of calling the increment operator (++) on a variable of 'bool' type is deprecated.</text>
   <references>
    <reference source="ISO C++ Language [5.2.6]"/>
    <reference source="ISO C++ Language [5.3.2]"/>
    <reference source="ISO C++ Language [Annex.D.1]"/>
   </references>
  </message>
  <message id="3292" level="QA_WARNING" help="doc-en_US/doc/messages/3292.html" severity="2">
   <text>Result of user declared postfix operator not used.</text>
   <references>
    <reference source="More Effective C++ [Item6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3293" level="QA_WARNING" help="doc-en_US/doc/messages/3293.html" severity="5">
   <text>This comparison predicate does not appear to provide a strict weak ordering.</text>
   <references>
      </references>
  </message>
  <message id="3294" level="QA_WARNING" help="doc-en_US/doc/messages/3294.html" severity="5">
   <text>This predicate appears to have a persistent side effect when called.</text>
   <references>
      </references>
  </message>
  <message id="3295" level="QA_WARNING" help="doc-en_US/doc/messages/3295.html" severity="5">
   <text>This predicate may have a persistent side effect when called.</text>
   <references>
      </references>
  </message>
  <message id="3296" level="QA_WARNING" help="doc-en_US/doc/messages/3296.html" severity="5">
   <text>This functor is being used as a predicate, but the member call operator is not const-qualified.</text>
   <references>
      </references>
  </message>
  <message id="3301" level="QA_WARNING" help="doc-en_US/doc/messages/3301.html" severity="7">
   <text>This will destroy the current object.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.8.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3302" level="QA_WARNING" help="doc-en_US/doc/messages/3302.html" severity="7">
   <text>This is taking the address of a container element.</text>
   <references>
      </references>
  </message>
  <message id="3320" level="QA_WARNING" help="doc-en_US/doc/messages/3320.html" severity="4">
   <text>The argument of the 'sizeof' operator is a character literal.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3323" level="QA_WARNING" help="doc-en_US/doc/messages/3323.html" severity="8">
   <text>The left hand operand before promotion has the same or less bits than are being shifted, result is always zero.</text>
   <references>
    <reference source="ISO C++ Language [5.8]"/>
   </references>
  </message>
  <message id="3325" level="QA_WARNING" help="doc-en_US/doc/messages/3325.html" severity="3">
   <text>This is allocating a mutex with dynamic storage duration.</text>
   <references>
      </references>
  </message>
  <message id="3326" level="QA_WARNING" help="doc-en_US/doc/messages/3326.html" severity="6">
   <text>The resource being returned has possibly been released.</text>
   <references>
      </references>
  </message>
  <message id="3327" level="QA_WARNING" help="doc-en_US/doc/messages/3327.html" severity="8">
   <text>The resource being returned has been released.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3329" level="QA_WARNING" help="doc-en_US/doc/messages/3329.html" severity="8">
   <text>Deleting a pointer to an incomplete class type may lead to undefined behavior.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3330" level="QA_WARNING" help="doc-en_US/doc/messages/3330.html" severity="8">
   <text>This object is also used as pointer to non-array.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item5]"/>
    <reference source="Effective C++ 3rd Edition [Item16]"/>
    <reference source="Industrial Strength C++ [Rules.8.2]"/>
    <reference source="C++ FAQs [308]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3331" level="QA_WARNING" help="doc-en_US/doc/messages/3331.html" severity="8">
   <text>This object is also used as pointer to array.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item5]"/>
    <reference source="Effective C++ 3rd Edition [Item16]"/>
    <reference source="Industrial Strength C++ [Rules.8.1]"/>
    <reference source="C++ FAQs [308]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3332" level="QA_WARNING" help="doc-en_US/doc/messages/3332.html" severity="8">
   <text>This object is also used as a pointer to old C-style allocated memory.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item3]"/>
    <reference source="Industrial Strength C++ [Recommendations.13.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3333" level="QA_WARNING" help="doc-en_US/doc/messages/3333.html" severity="5">
   <text>This is using placement new.</text>
   <references>
      </references>
  </message>
  <message id="3334" level="QA_WARNING" help="doc-en_US/doc/messages/3334.html" severity="8">
   <text>This object is also used as a pointer to new style allocated memory.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item3]"/>
    <reference source="Industrial Strength C++ [Recommendations.13.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3336" level="QA_WARNING" help="doc-en_US/doc/messages/3336.html" severity="8">
   <text>This call may be hijacked via template argument to one of the types.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3337" level="QA_WARNING" help="doc-en_US/doc/messages/3337.html" severity="8">
   <text>Dynamically allocated resource has not been released.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3338" level="QA_WARNING" help="doc-en_US/doc/messages/3338.html" severity="7">
   <text>Resource allocated for '%1s' in the constructor has not been released in the destructor.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3339" level="QA_WARNING" help="doc-en_US/doc/messages/3339.html" severity="5">
   <text>Resource has been released twice.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3340" level="QA_WARNING" help="doc-en_US/doc/messages/3340.html" severity="5">
   <text>This is using the comma operator.</text>
   <references>
      </references>
  </message>
  <message id="3341" level="QA_WARNING" help="doc-en_US/doc/messages/3341.html" severity="5">
   <text>This is using a user declared comma operator.</text>
   <references>
      </references>
  </message>
  <message id="3342" level="QA_WARNING" help="doc-en_US/doc/messages/3342.html" severity="5">
   <text>This is using the comma operator in an argument list to a function call.</text>
   <references>
      </references>
  </message>
  <message id="3343" level="QA_WARNING" help="doc-en_US/doc/messages/3343.html" severity="5">
   <text>This is using a user declared comma operator in an argument list to a function call.</text>
   <references>
      </references>
  </message>
  <message id="3344" level="QA_WARNING" help="doc-en_US/doc/messages/3344.html" severity="5">
   <text>This is using the comma operator in an object initialization.</text>
   <references>
      </references>
  </message>
  <message id="3345" level="QA_WARNING" help="doc-en_US/doc/messages/3345.html" severity="5">
   <text>This is using a user declared comma operator in an object initialization.</text>
   <references>
      </references>
  </message>
  <message id="3346" level="QA_WARNING" help="doc-en_US/doc/messages/3346.html" severity="5">
   <text>This is using the comma operator in aggregate initialization.</text>
   <references>
      </references>
  </message>
  <message id="3347" level="QA_WARNING" help="doc-en_US/doc/messages/3347.html" severity="5">
   <text>This is using a user declared comma operator in aggregate initialization.</text>
   <references>
      </references>
  </message>
  <message id="3348" level="QA_WARNING" help="doc-en_US/doc/messages/3348.html" severity="5">
   <text>This is using the comma operator in a for loop expression.</text>
   <references>
      </references>
  </message>
  <message id="3349" level="QA_WARNING" help="doc-en_US/doc/messages/3349.html" severity="5">
   <text>This is using a user declared comma operator in a for loop expression.</text>
   <references>
      </references>
  </message>
  <message id="3350" level="QA_WARNING" help="doc-en_US/doc/messages/3350.html" severity="5">
   <text>This is using comma operator in a member initializer list.</text>
   <references>
      </references>
  </message>
  <message id="3351" level="QA_WARNING" help="doc-en_US/doc/messages/3351.html" severity="5">
   <text>This is using a user declared comma operator in a member initializer list.</text>
   <references>
      </references>
  </message>
  <message id="3352" level="QA_WARNING" help="doc-en_US/doc/messages/3352.html" severity="5">
   <text>This is using the comma operator in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3353" level="QA_WARNING" help="doc-en_US/doc/messages/3353.html" severity="5">
   <text>This is using a user declared comma operator in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3354" level="QA_WARNING" help="doc-en_US/doc/messages/3354.html" severity="5">
   <text>This is using the comma operator in an argument list to a function call in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3355" level="QA_WARNING" help="doc-en_US/doc/messages/3355.html" severity="5">
   <text>This is using a user declared comma operator in an argument list to a function call in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3356" level="QA_WARNING" help="doc-en_US/doc/messages/3356.html" severity="5">
   <text>This is using the comma operator in an object initialization in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3357" level="QA_WARNING" help="doc-en_US/doc/messages/3357.html" severity="5">
   <text>This is using a user declared comma operator in an object initialization in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3358" level="QA_WARNING" help="doc-en_US/doc/messages/3358.html" severity="5">
   <text>This is using the comma operator in aggregate initialization in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3359" level="QA_WARNING" help="doc-en_US/doc/messages/3359.html" severity="5">
   <text>This is using a user declared comma operator in aggregate initialization in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3360" level="QA_WARNING" help="doc-en_US/doc/messages/3360.html" severity="5">
   <text>Pre-increment used as a sub-expression.</text>
   <references>
      </references>
  </message>
  <message id="3361" level="QA_WARNING" help="doc-en_US/doc/messages/3361.html" severity="5">
   <text>Post-increment used as a sub-expression.</text>
   <references>
      </references>
  </message>
  <message id="3362" level="QA_WARNING" help="doc-en_US/doc/messages/3362.html" severity="5">
   <text>Pre-decrement used as a sub-expression.</text>
   <references>
      </references>
  </message>
  <message id="3363" level="QA_WARNING" help="doc-en_US/doc/messages/3363.html" severity="5">
   <text>Post-decrement used as a sub-expression.</text>
   <references>
      </references>
  </message>
  <message id="3364" level="QA_WARNING" help="doc-en_US/doc/messages/3364.html" severity="5">
   <text>Pre-increment used as a sub-expression in the global scope.</text>
   <references>
      </references>
  </message>
  <message id="3365" level="QA_WARNING" help="doc-en_US/doc/messages/3365.html" severity="5">
   <text>Post-increment used as a sub-expression in the global scope.</text>
   <references>
      </references>
  </message>
  <message id="3366" level="QA_WARNING" help="doc-en_US/doc/messages/3366.html" severity="5">
   <text>Pre-decrement used as a sub-expression in the global scope.</text>
   <references>
      </references>
  </message>
  <message id="3367" level="QA_WARNING" help="doc-en_US/doc/messages/3367.html" severity="5">
   <text>Post-decrement used as a sub-expression in the global scope.</text>
   <references>
      </references>
  </message>
  <message id="3368" level="QA_WARNING" help="doc-en_US/doc/messages/3368.html" severity="5">
   <text>Pre-increment used as a sub-expression in a for loop.</text>
   <references>
      </references>
  </message>
  <message id="3369" level="QA_WARNING" help="doc-en_US/doc/messages/3369.html" severity="5">
   <text>Post-increment used as a sub-expression in a for loop.</text>
   <references>
      </references>
  </message>
  <message id="3370" level="QA_WARNING" help="doc-en_US/doc/messages/3370.html" severity="5">
   <text>Pre-decrement used as a sub-expression in a for loop.</text>
   <references>
      </references>
  </message>
  <message id="3371" level="QA_WARNING" help="doc-en_US/doc/messages/3371.html" severity="5">
   <text>Post-decrement used as a sub-expression in a for loop.</text>
   <references>
      </references>
  </message>
  <message id="3380" level="QA_WARNING" help="doc-en_US/doc/messages/3380.html" severity="5">
   <text>This is using the ternary operator.</text>
   <references>
      </references>
  </message>
  <message id="3381" level="QA_WARNING" help="doc-en_US/doc/messages/3381.html" severity="5">
   <text>This is using the ternary operator in global scope.</text>
   <references>
      </references>
  </message>
  <message id="3382" level="QA_WARNING" help="doc-en_US/doc/messages/3382.html" severity="5">
   <text>This is using the ternary operator as return expression.</text>
   <references>
      </references>
  </message>
  <message id="3383" level="QA_WARNING" help="doc-en_US/doc/messages/3383.html" severity="5">
   <text>This is using the ternary operator as return sub-expression.</text>
   <references>
      </references>
  </message>
  <message id="3384" level="QA_WARNING" help="doc-en_US/doc/messages/3384.html" severity="5">
   <text>This is using the ternary operator as object initializer expression.</text>
   <references>
      </references>
  </message>
  <message id="3385" level="QA_WARNING" help="doc-en_US/doc/messages/3385.html" severity="5">
   <text>Operand of this ternary operator has side effects.</text>
   <references>
      </references>
  </message>
  <message id="3386" level="QA_WARNING" help="doc-en_US/doc/messages/3386.html" severity="5">
   <text>Operand of this ternary operator in global scope has side effects.</text>
   <references>
      </references>
  </message>
  <message id="3387" level="QA_WARNING" help="doc-en_US/doc/messages/3387.html" severity="5">
   <text>First operand of this conditional operator is always constant 'true'</text>
   <references>
      </references>
  </message>
  <message id="3388" level="QA_WARNING" help="doc-en_US/doc/messages/3388.html" severity="5">
   <text>First operand of this conditional operator is always constant 'false'</text>
   <references>
      </references>
  </message>
  <message id="3389" level="QA_WARNING" help="doc-en_US/doc/messages/3389.html" severity="5">
   <text>This is using the ternary conditional operator as a sub-expression.</text>
   <references>
      </references>
  </message>
  <message id="3390" level="QA_WARNING" help="doc-en_US/doc/messages/3390.html" severity="5">
   <text>This unary plus operator does not have any effect.</text>
   <references>
      </references>
  </message>
  <message id="3391" level="QA_WARNING" help="doc-en_US/doc/messages/3391.html" severity="5">
   <text>This unary plus operator affects only the expression type.</text>
   <references>
      </references>
  </message>
  <message id="3392" level="QA_WARNING" help="doc-en_US/doc/messages/3392.html" severity="5">
   <text>This unary plus operator in global scope does not have any effect.</text>
   <references>
      </references>
  </message>
  <message id="3393" level="QA_WARNING" help="doc-en_US/doc/messages/3393.html" severity="5">
   <text>This unary plus operator in global scope affects only the expression type.</text>
   <references>
      </references>
  </message>
  <message id="3394" level="QA_WARNING" help="doc-en_US/doc/messages/3394.html" severity="5">
   <text>This is a unary plus operator on the right hand side of an assignment.</text>
   <references>
      </references>
  </message>
  <message id="3395" level="QA_WARNING" help="doc-en_US/doc/messages/3395.html" severity="5">
   <text>This is a unary minus operator on the right hand side of an assignment.</text>
   <references>
      </references>
  </message>
  <message id="3396" level="QA_WARNING" help="doc-en_US/doc/messages/3396.html" severity="5">
   <text>This is a unary plus operator in global scope on the right hand side of an assignment.</text>
   <references>
      </references>
  </message>
  <message id="3397" level="QA_WARNING" help="doc-en_US/doc/messages/3397.html" severity="5">
   <text>This is a unary minus operator in global scope on the right hand side of an assignment.</text>
   <references>
      </references>
  </message>
  <message id="3398" level="QA_WARNING" help="doc-en_US/doc/messages/3398.html" severity="5">
   <text>This is a logical negation operator on the right hand side of an assignment.</text>
   <references>
      </references>
  </message>
  <message id="3399" level="QA_WARNING" help="doc-en_US/doc/messages/3399.html" severity="5">
   <text>This is a logical negation operator in global scope on the right hand side of an assignment.</text>
   <references>
      </references>
  </message>
  <message id="3400" level="QA_WARNING" help="doc-en_US/doc/messages/3400.html" severity="4">
   <text>Using 'dynamic_cast' requires the use of run-time type information.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3401" level="QA_WARNING" help="doc-en_US/doc/messages/3401.html" severity="4">
   <text>Using 'typeid' requires the use of run-time type information.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3402" level="QA_WARNING" help="doc-en_US/doc/messages/3402.html" severity="6">
   <text>Newly allocated object converted to '%1s' with non virtual destructor.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3403" level="QA_WARNING" help="doc-en_US/doc/messages/3403.html" severity="6">
   <text>Newly allocated object with non-trivial destructor converted to '%1s' with non virtual destructor.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3404" level="QA_WARNING" help="doc-en_US/doc/messages/3404.html" severity="3">
   <text>This is potentially deleting an object via a base class pointer with non virtual destructor.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3405" level="QA_WARNING" help="doc-en_US/doc/messages/3405.html" severity="4">
   <text>In this unqualified usage, the function '%1s' from a dependent base class would be a candidate had the base class not been dependent.</text>
   <references>
      </references>
  </message>
  <message id="3406" level="QA_WARNING" help="doc-en_US/doc/messages/3406.html" severity="4">
   <text>In this unqualified usage, the object '%1s' from a dependent base class would be a candidate had the base class not been dependent.</text>
   <references>
      </references>
  </message>
  <message id="3407" level="QA_WARNING" help="doc-en_US/doc/messages/3407.html" severity="2">
   <text>'requires' failure in requirement-parameter-list.</text>
   <references>
    <reference source="ISO 2020 C++ Language [expr.prim.req]"/>
   </references>
  </message>
  <message id="3490" level="QA_WARNING" help="doc-en_US/doc/messages/3490.html" severity="5">
   <text>This '%1s' is manually provided.</text>
   <references>
      </references>
  </message>
  <message id="3491" level="QA_WARNING" help="doc-en_US/doc/messages/3491.html" severity="5">
   <text>This '%1s' is explicitly declared.</text>
   <references>
      </references>
  </message>
  <message id="3500" level="QA_WARNING" help="doc-en_US/doc/messages/3500.html" severity="1">
   <text>Prefer to throw objects of class type.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.12.11]"/>
   </references>
  </message>
  <message id="3501" level="QA_WARNING" help="doc-en_US/doc/messages/3501.html" severity="7">
   <text>Constructor of this thrown type may throw an exception.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.12.6]"/>
   </references>
  </message>
  <message id="3502" level="QA_WARNING" help="doc-en_US/doc/messages/3502.html" severity="7">
   <text>Throw expression calls a function which may throw an exception.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.12.6]"/>
   </references>
  </message>
  <message id="3503" level="QA_WARNING" help="doc-en_US/doc/messages/3503.html" severity="7">
   <text>New may throw an exception.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.12.6]"/>
   </references>
  </message>
  <message id="3504" level="QA_WARNING" help="doc-en_US/doc/messages/3504.html" severity="7">
   <text>Array new calls default constructor which may throw an exception.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.12.6]"/>
   </references>
  </message>
  <message id="3505" level="QA_WARNING" help="doc-en_US/doc/messages/3505.html" severity="3">
   <text>This is throwing a pointer.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.12.11]"/>
   </references>
  </message>
  <message id="3506" level="QA_WARNING" help="doc-en_US/doc/messages/3506.html" severity="2">
   <text>This is throwing a string literal.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.12.11]"/>
   </references>
  </message>
  <message id="3507" level="QA_WARNING" help="doc-en_US/doc/messages/3507.html" severity="2">
   <text>This is potentially throwing a string literal.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.12.11]"/>
   </references>
  </message>
  <message id="3508" level="QA_WARNING" help="doc-en_US/doc/messages/3508.html" severity="3">
   <text>The copy/move constructor used to initialize the temporary exception object might throw an exception.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [15.5.1/1]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3509" level="QA_WARNING" help="doc-en_US/doc/messages/3509.html" severity="3">
   <text>The destructor for the temporary exception object might throw an exception.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [15.5.1/1]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3510" level="QA_WARNING" help="doc-en_US/doc/messages/3510.html" severity="8">
   <text>Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3511" level="QA_WARNING" help="doc-en_US/doc/messages/3511.html" severity="8">
   <text>Functor passed to this parallel algorithm may throw an exception.</text>
   <references>
      </references>
  </message>
  <message id="3512" level="QA_WARNING" help="doc-en_US/doc/messages/3512.html" severity="8">
   <text>Worker object passed to this thread constructor should be a lambda function with noexcept(true).</text>
   <references>
      </references>
  </message>
  <message id="3513" level="QA_WARNING" help="doc-en_US/doc/messages/3513.html" severity="8">
   <text>Functor passed to this parallel algorithm is not pure.</text>
   <references>
      </references>
  </message>
  <message id="3514" level="QA_WARNING" help="doc-en_US/doc/messages/3514.html" severity="3">
   <text>This sequential algorithm using only pure functions can be parallelized.</text>
   <references>
      </references>
  </message>
  <message id="3515" level="QA_WARNING" help="doc-en_US/doc/messages/3515.html" severity="1">
   <text>This is throwing an object of a class type that is not derived from 'std::exception'.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.12.11]"/>
   </references>
  </message>
  <message id="3517" level="QA_WARNING" help="doc-en_US/doc/messages/3517.html" severity="1">
   <text>Constructor of thrown object has not been declared as non-throwing.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Recommendations.12.11]"/>
   </references>
  </message>
  <message id="3560" level="QA_WARNING" help="doc-en_US/doc/messages/3560.html" severity="4">
   <text>Constant: Detected infinite overflow in float.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3600" level="QA_WARNING" help="doc-en_US/doc/messages/3600.html" severity="3">
   <text>This 'int' literal is an octal number.</text>
   <references>
    <reference source="C++ FAQs [426]"/>
   </references>
  </message>
  <message id="3601" level="QA_WARNING" help="doc-en_US/doc/messages/3601.html" severity="2">
   <text>This char literal is a numeric representation of an escape sequence.</text>
   <references>
    <reference source="C++ FAQs [429]"/>
    <reference source="ISO C++ Language [2.13/3]"/>
   </references>
  </message>
  <message id="3602" level="QA_WARNING" help="doc-en_US/doc/messages/3602.html" severity="1">
   <text>This char literal is a numeric representation of an alpha character.</text>
   <references>
    <reference source="C++ FAQs [429]"/>
    <reference source="ISO C++ Language [2.13/3]"/>
   </references>
  </message>
  <message id="3603" level="QA_WARNING" help="doc-en_US/doc/messages/3603.html" severity="5">
   <text>The suffix for this literal specifies a type too small to hold the value.  Consider the '%1s' suffix.</text>
   <references>
    <reference source="ISO C++ Language [2.13]"/>
   </references>
  </message>
  <message id="3604" level="QA_WARNING" help="doc-en_US/doc/messages/3604.html" severity="5">
   <text>This literal is implicitly unsigned.</text>
   <references>
    <reference source="ISO C++ Language [2.13]"/>
   </references>
  </message>
  <message id="3605" level="QA_WARNING" help="doc-en_US/doc/messages/3605.html" severity="8">
   <text>This is modifying a string literal.</text>
   <references>
    <reference source="ISO C++ Language [2.13.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3606" level="QA_WARNING" help="doc-en_US/doc/messages/3606.html" severity="7">
   <text>This is possibly modifying a string literal.</text>
   <references>
    <reference source="ISO C++ Language [2.13.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3607" level="QA_WARNING" help="doc-en_US/doc/messages/3607.html" severity="7">
   <text>Passing a pointer to a string literal to a function that may modify the pointed to value.</text>
   <references>
    <reference source="ISO C++ Language [2.13.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3608" level="QA_WARNING" help="doc-en_US/doc/messages/3608.html" severity="2">
   <text>This (wide) character literal is an octal number.</text>
   <references>
    <reference source="C++ FAQs [426]"/>
   </references>
  </message>
  <message id="3609" level="QA_WARNING" help="doc-en_US/doc/messages/3609.html" severity="2">
   <text>This (wide) string literal contains an octal number.</text>
   <references>
    <reference source="C++ FAQs [426]"/>
   </references>
  </message>
  <message id="3610" level="QA_WARNING" help="doc-en_US/doc/messages/3610.html" severity="2">
   <text>This string literal might be more readable if expressed as a raw string literal.</text>
   <references>
      </references>
  </message>
  <message id="3634" level="QA_WARNING" help="doc-en_US/doc/messages/3634.html" severity="8">
   <text>Use of hard-coded cryptographic key.</text>
   <references>
      </references>
  </message>
  <message id="3636" level="QA_WARNING" help="doc-en_US/doc/messages/3636.html" severity="2">
   <text>Octal escape sequence '%1s' is not terminated.</text>
   <references>
      </references>
  </message>
  <message id="3637" level="QA_WARNING" help="doc-en_US/doc/messages/3637.html" severity="2">
   <text>Hexadecimal escape sequence '%1s' is not terminated.</text>
   <references>
      </references>
  </message>
  <message id="3641" level="QA_WARNING" help="doc-en_US/doc/messages/3641.html" severity="2">
   <text>Octal escape sequence '%1s' is followed by punctuation characters.</text>
   <references>
      </references>
  </message>
  <message id="3642" level="QA_WARNING" help="doc-en_US/doc/messages/3642.html" severity="2">
   <text>Hexadecimal escape sequence '%1s' is followed by punctuation characters.</text>
   <references>
      </references>
  </message>
  <message id="3643" level="QA_WARNING" help="doc-en_US/doc/messages/3643.html" severity="2">
   <text>Universal character name '%1s' is not terminated.</text>
   <references>
      </references>
  </message>
  <message id="3644" level="QA_WARNING" help="doc-en_US/doc/messages/3644.html" severity="2">
   <text>Universal character name '%1s' is followed by punctuation characters.</text>
   <references>
      </references>
  </message>
  <message id="3700" level="QA_WARNING" help="doc-en_US/doc/messages/3700.html" severity="5">
   <text>Possible precedence confusion between '%1s' and '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3701" level="QA_WARNING" help="doc-en_US/doc/messages/3701.html" severity="2">
   <text>This syntax for array indexing may be confusing.</text>
   <references>
      </references>
  </message>
  <message id="3702" level="QA_WARNING" help="doc-en_US/doc/messages/3702.html" severity="5">
   <text>Possible precedence confusion between relational operator '%1s' and '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3703" level="QA_WARNING" help="doc-en_US/doc/messages/3703.html" severity="5">
   <text>Possible precedence confusion between '%1s' and '%2s' in expression involving sizeof.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3704" level="QA_WARNING" help="doc-en_US/doc/messages/3704.html" severity="5">
   <text>Modifiable lvalue on lhs of operator ==.</text>
   <references>
      </references>
  </message>
  <message id="3705" level="QA_WARNING" help="doc-en_US/doc/messages/3705.html" severity="4">
   <text>This is using pointer arithmetic.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3706" level="QA_WARNING" help="doc-en_US/doc/messages/3706.html" severity="3">
   <text>This is applying the subscript operator to a pointer value.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3707" level="QA_WARNING" help="doc-en_US/doc/messages/3707.html" severity="3">
   <text>This is incrementing or decrementing a pointer value.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3708" level="QA_WARNING" help="doc-en_US/doc/messages/3708.html" severity="6">
   <text>Expression(s) with floating point type used as operand(s) to '%1s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3709" level="QA_WARNING" help="doc-en_US/doc/messages/3709.html" severity="6">
   <text>Expression(s) with boolean type used as operand(s) to '%1s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3710" level="QA_WARNING" help="doc-en_US/doc/messages/3710.html" severity="6">
   <text>Expression(s) with type enum used as operand(s) to '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [7.2/5]"/>
   </references>
  </message>
  <message id="3711" level="QA_WARNING" help="doc-en_US/doc/messages/3711.html" severity="6">
   <text>Expression(s) with character type used as operand(s) to '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [3.9.1/1]"/>
   </references>
  </message>
  <message id="3712" level="QA_WARNING" help="doc-en_US/doc/messages/3712.html" severity="6">
   <text>Character other than literal '0' being subtracted from integral value.</text>
   <references>
    <reference source="ISO C++ Language [3.9.1/1]"/>
   </references>
  </message>
  <message id="3713" level="QA_WARNING" help="doc-en_US/doc/messages/3713.html" severity="6">
   <text>Character other than literal '0' being added to integral value.</text>
   <references>
    <reference source="ISO C++ Language [3.9.1/1]"/>
   </references>
  </message>
  <message id="3714" level="QA_WARNING" help="doc-en_US/doc/messages/3714.html" severity="6">
   <text>Value added to '0' is out of range.</text>
   <references>
    <reference source="ISO C++ Language [3.9.1/1]"/>
   </references>
  </message>
  <message id="3715" level="QA_WARNING" help="doc-en_US/doc/messages/3715.html" severity="6">
   <text>Be aware than an implicit conversion occurs between plain char and unsigned char.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [3.9.1/1]"/>
   </references>
  </message>
  <message id="3716" level="QA_WARNING" help="doc-en_US/doc/messages/3716.html" severity="6">
   <text>Be aware than an implicit conversion occurs between plain char and signed char.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO C++ Language [3.9.1/1]"/>
   </references>
  </message>
  <message id="3717" level="QA_WARNING" help="doc-en_US/doc/messages/3717.html" severity="5">
   <text>Be aware that an implicit conversion occurs between plain char and type '%1s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3718" level="QA_WARNING" help="doc-en_US/doc/messages/3718.html" severity="5">
   <text>Be aware that an implicit conversion occurs between bool and type '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="3719" level="QA_WARNING" help="doc-en_US/doc/messages/3719.html" severity="5">
   <text>Be aware that an implicit conversion from a constant of type '%1s' to bool takes place.</text>
   <references>
      </references>
  </message>
  <message id="3720" level="QA_WARNING" help="doc-en_US/doc/messages/3720.html" severity="6">
   <text>Expression with enum type which does not satisfy BitmaskType used as operand to '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [7.2/5]"/>
   </references>
  </message>
  <message id="3721" level="QA_WARNING" help="doc-en_US/doc/messages/3721.html" severity="6">
   <text>Expression with enum type which does not satisfy BitmaskType used as operand to overloaded operator.</text>
   <references>
    <reference source="ISO C++ Language [7.2/5]"/>
   </references>
  </message>
  <message id="3722" level="QA_WARNING" help="doc-en_US/doc/messages/3722.html" severity="6">
   <text>This lambda expression is nested inside another lambda expression.</text>
   <references>
      </references>
  </message>
  <message id="3723" level="QA_WARNING" help="doc-en_US/doc/messages/3723.html" severity="4">
   <text>This is using pointer arithmetic with a pointer to a non-final class.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3724" level="QA_WARNING" help="doc-en_US/doc/messages/3724.html" severity="1">
   <text>Expression with enum type used as operand to overloaded operator '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="3725" level="QA_WARNING" help="doc-en_US/doc/messages/3725.html" severity="1">
   <text>Expression with enum type used as operand to overloaded relational operator '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="3726" level="QA_WARNING" help="doc-en_US/doc/messages/3726.html" severity="5">
   <text>This Integral Promotion and/or Usual Arithmetic Conversion implicitly converts from '%1s' to '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="3727" level="QA_WARNING" help="doc-en_US/doc/messages/3727.html" severity="6">
   <text>The value of this non-const expression is stored in a type with a different signedness.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3728" level="QA_WARNING" help="doc-en_US/doc/messages/3728.html" severity="6">
   <text>The value of this expression is stored in a different kind of type or a type with a different size.</text>
   <references>
      </references>
  </message>
  <message id="3800" level="QA_WARNING" help="doc-en_US/doc/messages/3800.html" severity="5">
   <text>This non-template function is chosen in preference to specialized function template with the same signature.</text>
   <references>
    <reference source="Industrial Strength C++ [Rule.13.3.3/1]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3801" level="QA_WARNING" help="doc-en_US/doc/messages/3801.html" severity="4">
   <text>Create objects for shared pointers using 'std::make_shared'</text>
   <references>
      </references>
  </message>
  <message id="3802" level="QA_WARNING" help="doc-en_US/doc/messages/3802.html" severity="8">
   <text>The return value of this function call should not be ignored, but is not used.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3803" level="QA_WARNING" help="doc-en_US/doc/messages/3803.html" severity="7">
   <text>The return value of this function call is not used.</text>
   <references>
      </references>
  </message>
  <message id="3804" level="QA_WARNING" help="doc-en_US/doc/messages/3804.html" severity="6">
   <text>The return value of this function performing side effects is not used.</text>
   <references>
      </references>
  </message>
  <message id="3805" level="QA_WARNING" help="doc-en_US/doc/messages/3805.html" severity="7">
   <text>The return value of this member function call operating on a temporary object is ignored.</text>
   <references>
      </references>
  </message>
  <message id="3806" level="QA_WARNING" help="doc-en_US/doc/messages/3806.html" severity="7">
   <text>This member function call operating on a temporary object doesn't return a value.</text>
   <references>
      </references>
  </message>
  <message id="3807" level="QA_WARNING" help="doc-en_US/doc/messages/3807.html" severity="7">
   <text>This is a modification of a temporary object.</text>
   <references>
      </references>
  </message>
  <message id="3808" level="QA_WARNING" help="doc-en_US/doc/messages/3808.html" severity="7">
   <text>This is assigning the address of a temporary.</text>
   <references>
      </references>
  </message>
  <message id="3809" level="QA_WARNING" help="doc-en_US/doc/messages/3809.html" severity="8">
   <text>Call to function that specifies that it may throw an exception.</text>
   <references>
      </references>
  </message>
  <message id="3810" level="QA_WARNING" help="doc-en_US/doc/messages/3810.html" severity="8">
   <text>Call to function that may throw an exception.</text>
   <references>
      </references>
  </message>
  <message id="3811" level="QA_WARNING" help="doc-en_US/doc/messages/3811.html" severity="8">
   <text>Call to function across execution boundary.</text>
   <references>
      </references>
  </message>
  <message id="3812" level="QA_WARNING" help="doc-en_US/doc/messages/3812.html" severity="3">
   <text>Argument to character-handling function not explicitly cast to 'unsigned char'.</text>
   <references>
      </references>
  </message>
  <message id="3813" level="QA_WARNING" help="doc-en_US/doc/messages/3813.html" severity="4">
   <text>'unique_ptr' created without using 'make_unique'.</text>
   <references>
      </references>
  </message>
  <message id="3820" level="QA_WARNING" help="doc-en_US/doc/messages/3820.html" severity="7">
   <text>Calling virtual function '%1s' where some overloads of '%2s' are hidden.</text>
   <references>
      </references>
  </message>
  <message id="3840" level="QA_WARNING" help="doc-en_US/doc/messages/3840.html" severity="5">
   <text>Array type is used as a pointer type argument in the function call.</text>
   <references>
      </references>
  </message>
  <message id="3841" level="QA_WARNING" help="doc-en_US/doc/messages/3841.html" severity="1">
   <text>Array type is used as a reference type argument in the function call.</text>
   <references>
      </references>
  </message>
  <message id="3842" level="QA_WARNING" help="doc-en_US/doc/messages/3842.html" severity="4">
   <text>String literal is used as a pointer type argument in the function call.</text>
   <references>
      </references>
  </message>
  <message id="3843" level="QA_WARNING" help="doc-en_US/doc/messages/3843.html" severity="6">
   <text>Overload set contains templates and explicitly specialized templates that are similar.</text>
   <references>
    <reference source="ISO C++ Language [14.5.5.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3844" level="QA_WARNING" help="doc-en_US/doc/messages/3844.html" severity="6">
   <text>Overload set contains templates and explicitly specialized templates.</text>
   <references>
    <reference source="ISO C++ Language [14.5.5.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3845" level="QA_WARNING" help="doc-en_US/doc/messages/3845.html" severity="4">
   <text>'std::forward' is not used for perfect forwarding here.</text>
   <references>
      </references>
  </message>
  <message id="3846" level="QA_WARNING" help="doc-en_US/doc/messages/3846.html" severity="4">
   <text>Use 'std::forward' to pass forwarding references.</text>
   <references>
      </references>
  </message>
  <message id="3847" level="QA_WARNING" help="doc-en_US/doc/messages/3847.html" severity="4">
   <text>This 'std::move' is applied to a const qualified object of type '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="3848" level="QA_WARNING" help="doc-en_US/doc/messages/3848.html" severity="4">
   <text>This creates a smart pointer to the first element of an array object.</text>
   <references>
      </references>
  </message>
  <message id="3849" level="QA_WARNING" help="doc-en_US/doc/messages/3849.html" severity="3">
   <text>This creates an array type specialization of unique pointer.</text>
   <references>
      </references>
  </message>
  <message id="3850" level="QA_WARNING" help="doc-en_US/doc/messages/3850.html" severity="3">
   <text>This is calling std::async without an explicit launch policy.</text>
   <references>
      </references>
  </message>
  <message id="3851" level="QA_WARNING" help="doc-en_US/doc/messages/3851.html" severity="3">
   <text>This is using atomics with non-sequentially consistent memory ordering.</text>
   <references>
      </references>
  </message>
  <message id="3852" level="QA_WARNING" help="doc-en_US/doc/messages/3852.html" severity="3">
   <text>Invalid object or object with invalid type passed as the 2nd argument to 'va_start'.</text>
   <references>
      </references>
  </message>
  <message id="3853" level="QA_WARNING" help="doc-en_US/doc/messages/3853.html" severity="3">
   <text>Object with non-trivial special member function passed as the 2nd argument to 'va_start'</text>
   <references>
      </references>
  </message>
  <message id="3854" level="QA_WARNING" help="doc-en_US/doc/messages/3854.html" severity="6">
   <text>Signal handler '%1s' accesses shared objects.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3855" level="QA_WARNING" help="doc-en_US/doc/messages/3855.html" severity="6">
   <text>The signal handler passed here might not be async-safe.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3856" level="QA_WARNING" help="doc-en_US/doc/messages/3856.html" severity="6">
   <text>Signal handler '%1s' does not have C linkage.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3857" level="QA_WARNING" help="doc-en_US/doc/messages/3857.html" severity="4">
   <text>Rvalue reference parameter to function was not moved from.</text>
   <references>
      </references>
  </message>
  <message id="3858" level="QA_WARNING" help="doc-en_US/doc/messages/3858.html" severity="4">
   <text>Rvalue reference parameter to function was not moved from in all paths.</text>
   <references>
      </references>
  </message>
  <message id="3859" level="QA_WARNING" help="doc-en_US/doc/messages/3859.html" severity="1">
   <text>This seed value is a compile time constant.</text>
   <references>
      </references>
  </message>
  <message id="3860" level="QA_WARNING" help="doc-en_US/doc/messages/3860.html" severity="1">
   <text>This seed value may be predictable.</text>
   <references>
      </references>
  </message>
  <message id="3880" level="QA_WARNING" help="doc-en_US/doc/messages/3880.html" severity="3">
   <text>This lambda expression has a default capture that is not used.</text>
   <references>
      </references>
  </message>
  <message id="3881" level="QA_WARNING" help="doc-en_US/doc/messages/3881.html" severity="3">
   <text>This lambda expression has a default capture.</text>
   <references>
      </references>
  </message>
  <message id="3882" level="QA_WARNING" help="doc-en_US/doc/messages/3882.html" severity="3">
   <text>This stored lambda expression has a default capture.</text>
   <references>
      </references>
  </message>
  <message id="3883" level="QA_WARNING" help="doc-en_US/doc/messages/3883.html" severity="3">
   <text>This stored lambda expression has implicitly captured 'this'.</text>
   <references>
      </references>
  </message>
  <message id="3900" level="QA_WARNING" help="doc-en_US/doc/messages/3900.html" severity="3">
   <text>This is a call to 'setjmp()' or 'longjmp()'.</text>
   <references>
    <reference source="Industrial Strength C++ [Rule.13.3]"/>
    <reference source="C++ FAQs [257]"/>
   </references>
  </message>
  <message id="3901" level="QA_WARNING" help="doc-en_US/doc/messages/3901.html" severity="2">
   <text>This is a call to old style memory management.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.13.1]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item3]"/>
   </references>
  </message>
  <message id="3902" level="QA_WARNING" help="doc-en_US/doc/messages/3902.html" severity="5">
   <text>This call to the assignment operator is a subexpression.</text>
   <references>
      </references>
  </message>
  <message id="3903" level="QA_WARNING" help="doc-en_US/doc/messages/3903.html" severity="5">
   <text>This call to the assignment operator in non-local scope is a subexpression.</text>
   <references>
      </references>
  </message>
  <message id="3904" level="QA_WARNING" help="doc-en_US/doc/messages/3904.html" severity="5">
   <text>This call to the assignment operator is a subexpression of a comma operator.</text>
   <references>
      </references>
  </message>
  <message id="3905" level="QA_WARNING" help="doc-en_US/doc/messages/3905.html" severity="5">
   <text>This call to the assignment operator is a subexpression of a comma operator in a for expression.</text>
   <references>
      </references>
  </message>
  <message id="3910" level="QA_WARNING" help="doc-en_US/doc/messages/3910.html" severity="8">
   <text>Implicit copy constructor called for a class that has a copy assignment operator declared.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3911" level="QA_WARNING" help="doc-en_US/doc/messages/3911.html" severity="8">
   <text>Implicit copy assignment operator called for a class that has a copy constructor declared.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3912" level="QA_WARNING" help="doc-en_US/doc/messages/3912.html" severity="5">
   <text>The argument to this 'assert' is a constant expression</text>
   <references>
      </references>
  </message>
  <message id="3913" level="QA_WARNING" help="doc-en_US/doc/messages/3913.html" severity="5">
   <text>The argument to this 'typeid' has closure class type.</text>
   <references>
      </references>
  </message>
  <message id="3914" level="QA_WARNING" help="doc-en_US/doc/messages/3914.html" severity="5">
   <text>The argument to this 'decltype' has closure class type.</text>
   <references>
      </references>
  </message>
  <message id="3915" level="QA_WARNING" help="doc-en_US/doc/messages/3915.html" severity="5">
   <text>The type argument '%1s' passed to 'offsetof' is not a standard-layout class.</text>
   <references>
      </references>
  </message>
  <message id="3916" level="QA_WARNING" help="doc-en_US/doc/messages/3916.html" severity="6">
   <text>The member-designator argument '%1s' passed to 'offsetof' is a bitfield.</text>
   <references>
      </references>
  </message>
  <message id="3917" level="QA_WARNING" help="doc-en_US/doc/messages/3917.html" severity="6">
   <text>Viable function set for copy/move operation includes a constructor template.</text>
   <references>
    <reference source="ISO C++ Language [12.8/9]"/>
   </references>
  </message>
  <message id="3918" level="QA_WARNING" help="doc-en_US/doc/messages/3918.html" severity="4">
   <text>This calls an implicit copy special member function that is deprecated.</text>
   <references>
    <reference source="ISO C++ Language [Annex.D.9]"/>
   </references>
  </message>
  <message id="3998" level="QA_WARNING" help="doc-en_US/doc/messages/3998.html" severity="0">
   <text>Member variable '%1s' modified.</text>
   <references>
      </references>
  </message>
  <message id="3999" level="QA_WARNING" help="doc-en_US/doc/messages/3999.html" severity="0">
   <text>Function '%1s' called.</text>
   <references>
      </references>
  </message>
  <message id="4000" level="QA_WARNING" help="doc-en_US/doc/messages/4000.html" severity="4">
   <text>Goto statement found.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.6]"/>
   </references>
  </message>
  <message id="4001" level="QA_WARNING" help="doc-en_US/doc/messages/4001.html" severity="5">
   <text>This goto statement involves a backward jump.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.6]"/>
   </references>
  </message>
  <message id="4002" level="QA_WARNING" help="doc-en_US/doc/messages/4002.html" severity="5">
   <text>This goto statement references a label that is not declared in the current block, or a block enclosing it.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.6]"/>
   </references>
  </message>
  <message id="4003" level="QA_WARNING" help="doc-en_US/doc/messages/4003.html" severity="7">
   <text>This is a jump past initialization of objects.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4004" level="QA_WARNING" help="doc-en_US/doc/messages/4004.html" severity="4">
   <text>Continue statement found.</text>
   <references>
      </references>
  </message>
  <message id="4005" level="QA_WARNING" help="doc-en_US/doc/messages/4005.html" severity="4">
   <text>Break statement found outside a switch statement.</text>
   <references>
      </references>
  </message>
  <message id="4007" level="QA_WARNING" help="doc-en_US/doc/messages/4007.html" severity="5">
   <text>The label '%1s' is not used.</text>
   <references>
      </references>
  </message>
  <message id="4008" level="QA_WARNING" help="doc-en_US/doc/messages/4008.html" severity="4">
   <text>Multiple continue statements found in loop.</text>
   <references>
      </references>
  </message>
  <message id="4009" level="QA_WARNING" help="doc-en_US/doc/messages/4009.html" severity="4">
   <text>Multiple break statements found in loop.</text>
   <references>
      </references>
  </message>
  <message id="4010" level="QA_WARNING" help="doc-en_US/doc/messages/4010.html" severity="4">
   <text>This switch statement has no default label.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.5]"/>
   </references>
  </message>
  <message id="4011" level="QA_WARNING" help="doc-en_US/doc/messages/4011.html" severity="4">
   <text>Statements after this case label fall through.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4012" level="QA_WARNING" help="doc-en_US/doc/messages/4012.html" severity="4">
   <text>The default label is not the last label of this switch.</text>
   <references>
    <reference source="ISO C++ Language [6.4.2]"/>
   </references>
  </message>
  <message id="4013" level="QA_WARNING" help="doc-en_US/doc/messages/4013.html" severity="4">
   <text>This case label is not in the immediate statement/block of its switch statement.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4014" level="QA_WARNING" help="doc-en_US/doc/messages/4014.html" severity="4">
   <text>This default label is not in the immediate statement/block of its switch statement.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4015" level="QA_WARNING" help="doc-en_US/doc/messages/4015.html" severity="4">
   <text>The switch expression is of 'bool' type.</text>
   <references>
      </references>
  </message>
  <message id="4016" level="QA_WARNING" help="doc-en_US/doc/messages/4016.html" severity="4">
   <text>The switch statement contains no case labels.</text>
   <references>
      </references>
  </message>
  <message id="4017" level="QA_WARNING" help="doc-en_US/doc/messages/4017.html" severity="4">
   <text>This case label is redundant.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4018" level="QA_WARNING" help="doc-en_US/doc/messages/4018.html" severity="4">
   <text>An if statement would provide a more natural representation instead of this switch.</text>
   <references>
      </references>
  </message>
  <message id="4019" level="QA_WARNING" help="doc-en_US/doc/messages/4019.html" severity="5">
   <text>Integral constants are used as case labels.</text>
   <references>
      </references>
  </message>
  <message id="4020" level="QA_WARNING" help="doc-en_US/doc/messages/4020.html" severity="4">
   <text>Multiple exit points found.</text>
   <references>
      </references>
  </message>
  <message id="4022" level="QA_WARNING" help="doc-en_US/doc/messages/4022.html" severity="5">
   <text>This function has a non-void return type but no return statements.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4023" level="QA_WARNING" help="doc-en_US/doc/messages/4023.html" severity="1">
   <text>The switch expression is not simple.</text>
   <references>
      </references>
  </message>
  <message id="4024" level="QA_WARNING" help="doc-en_US/doc/messages/4024.html" severity="6">
   <text>This function returns a non-const handle to private or protected member data.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4026" level="QA_WARNING" help="doc-en_US/doc/messages/4026.html" severity="8">
   <text>This returns a handle to local data.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4027" level="QA_WARNING" help="doc-en_US/doc/messages/4027.html" severity="8">
   <text>This returns a handle to a function parameter.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4028" level="QA_WARNING" help="doc-en_US/doc/messages/4028.html" severity="6">
   <text>This returns a handle to a function reference parameter.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4029" level="QA_WARNING" help="doc-en_US/doc/messages/4029.html" severity="5">
   <text>This returns a non const handle to global data.</text>
   <references>
      </references>
  </message>
  <message id="4030" level="QA_WARNING" help="doc-en_US/doc/messages/4030.html" severity="8">
   <text>This exception is derived from an exception caught above.</text>
   <references>
    <reference source="More Effective C++ [Item12]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4031" level="QA_WARNING" help="doc-en_US/doc/messages/4031.html" severity="7">
   <text>This catch clause does not use a reference to the thrown object.</text>
   <references>
    <reference source="More Effective C++ [Item13]"/>
    <reference source="Industrial Strength C++ [Recommendations.12.13]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4032" level="QA_WARNING" help="doc-en_US/doc/messages/4032.html" severity="8">
   <text>Uncaught 'throw' expression in destructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.12.5]"/>
    <reference source="C++ FAQs [267]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4033" level="QA_WARNING" help="doc-en_US/doc/messages/4033.html" severity="1">
   <text>This catch clause does not use a class type object.</text>
   <references>
    <reference source="More Effective C++ [Item13]"/>
    <reference source="Industrial Strength C++ [Recommendations.12.13]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4034" level="QA_WARNING" help="doc-en_US/doc/messages/4034.html" severity="8">
   <text>This catch-all exception handler should be the last.</text>
   <references>
    <reference source="More Effective C++ [Item12]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4035" level="QA_WARNING" help="doc-en_US/doc/messages/4035.html" severity="8">
   <text>This throws an exception of type '%1s' which is not listed in the exception specification.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4036" level="QA_WARNING" help="doc-en_US/doc/messages/4036.html" severity="8">
   <text>This function call may result in an exception which is not listed in the exception specification.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4037" level="QA_WARNING" help="doc-en_US/doc/messages/4037.html" severity="8">
   <text>This throw in main will cause the program to terminate.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4038" level="QA_WARNING" help="doc-en_US/doc/messages/4038.html" severity="3">
   <text>Uncaught exception in main will cause the program to terminate.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4039" level="QA_WARNING" help="doc-en_US/doc/messages/4039.html" severity="5">
   <text>The following type is not thrown by the function: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="4040" level="QA_WARNING" help="doc-en_US/doc/messages/4040.html" severity="2">
   <text>This non-inline virtual destructor has no code.</text>
   <references>
    <reference source="C++ FAQs [103]"/>
   </references>
  </message>
  <message id="4041" level="QA_WARNING" help="doc-en_US/doc/messages/4041.html" severity="2">
   <text>This non-inline non-virtual destructor has no code.</text>
   <references>
      </references>
  </message>
  <message id="4042" level="QA_WARNING" help="doc-en_US/doc/messages/4042.html" severity="2">
   <text>Consider inlining this simple forwarding function.</text>
   <references>
      </references>
  </message>
  <message id="4043" level="QA_WARNING" help="doc-en_US/doc/messages/4043.html" severity="2">
   <text>Consider inlining this forwarding function.</text>
   <references>
      </references>
  </message>
  <message id="4044" level="QA_WARNING" help="doc-en_US/doc/messages/4044.html" severity="4">
   <text>Local static in inline function.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4045" level="QA_WARNING" help="doc-en_US/doc/messages/4045.html" severity="4">
   <text>Loop in inline function.</text>
   <references>
      </references>
  </message>
  <message id="4046" level="QA_WARNING" help="doc-en_US/doc/messages/4046.html" severity="4">
   <text>Switch in inline function.</text>
   <references>
      </references>
  </message>
  <message id="4047" level="QA_WARNING" help="doc-en_US/doc/messages/4047.html" severity="4">
   <text>Try/Catch in inline function.</text>
   <references>
      </references>
  </message>
  <message id="4048" level="QA_WARNING" help="doc-en_US/doc/messages/4048.html" severity="4">
   <text>Recursive call in inline function.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4049" level="QA_WARNING" help="doc-en_US/doc/messages/4049.html" severity="4">
   <text>Indirectly recursive call in inline function.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4050" level="QA_WARNING" help="doc-en_US/doc/messages/4050.html" severity="2">
   <text>Member object '%1s' is not initialized in initializer list.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
   </references>
  </message>
  <message id="4051" level="QA_WARNING" help="doc-en_US/doc/messages/4051.html" severity="2">
   <text>POD non-array member object '%1s' is not initialized in initializer list.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
   </references>
  </message>
  <message id="4052" level="QA_WARNING" help="doc-en_US/doc/messages/4052.html" severity="5">
   <text>Base class '%1s' is not initialized in initializer list.</text>
   <references>
    <reference source="C++ FAQs [183]"/>
   </references>
  </message>
  <message id="4053" level="QA_WARNING" help="doc-en_US/doc/messages/4053.html" severity="7">
   <text>The initialization list is not ordered in the order of initialization. Expected '%1s' here.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.6]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item13]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4054" level="QA_WARNING" help="doc-en_US/doc/messages/4054.html" severity="6">
   <text>This constructor does not have an initialization list.</text>
   <references>
      </references>
  </message>
  <message id="4055" level="QA_WARNING" help="doc-en_US/doc/messages/4055.html" severity="6">
   <text>'this' keyword found in member initialization list.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.7]"/>
   </references>
  </message>
  <message id="4056" level="QA_WARNING" help="doc-en_US/doc/messages/4056.html" severity="8">
   <text>Uninitialized member used as initializer.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4057" level="QA_WARNING" help="doc-en_US/doc/messages/4057.html" severity="7">
   <text>'this' used in initialization of base class.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.7]"/>
   </references>
  </message>
  <message id="4058" level="QA_WARNING" help="doc-en_US/doc/messages/4058.html" severity="7">
   <text>Address of uninitialized object used in initializer.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4059" level="QA_WARNING" help="doc-en_US/doc/messages/4059.html" severity="7">
   <text>Uninitialized object passed by reference to constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.7]"/>
   </references>
  </message>
  <message id="4060" level="QA_WARNING" help="doc-en_US/doc/messages/4060.html" severity="4">
   <text>This 'if' statement does not contain a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4061" level="QA_WARNING" help="doc-en_US/doc/messages/4061.html" severity="4">
   <text>The 'else' part of this 'if' statement does not contain a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
   </references>
  </message>
  <message id="4062" level="QA_WARNING" help="doc-en_US/doc/messages/4062.html" severity="4">
   <text>This 'while' statement does not contain a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
   </references>
  </message>
  <message id="4063" level="QA_WARNING" help="doc-en_US/doc/messages/4063.html" severity="4">
   <text>This 'for' statement does not contain a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
   </references>
  </message>
  <message id="4064" level="QA_WARNING" help="doc-en_US/doc/messages/4064.html" severity="4">
   <text>This 'do' statement does not contain a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
   </references>
  </message>
  <message id="4065" level="QA_WARNING" help="doc-en_US/doc/messages/4065.html" severity="4">
   <text>This 'switch' statement does not contain a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
   </references>
  </message>
  <message id="4066" level="QA_WARNING" help="doc-en_US/doc/messages/4066.html" severity="4">
   <text>This 'case' label is not followed by a label or a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
   </references>
  </message>
  <message id="4068" level="QA_WARNING" help="doc-en_US/doc/messages/4068.html" severity="4">
   <text>This 'default' label is not followed by a label or a block.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.3]"/>
   </references>
  </message>
  <message id="4070" level="QA_WARNING" help="doc-en_US/doc/messages/4070.html" severity="4">
   <text>This if-else-if chain is not terminated by else.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4071" level="QA_WARNING" help="doc-en_US/doc/messages/4071.html" severity="8">
   <text>This condition is an assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4072" level="QA_WARNING" help="doc-en_US/doc/messages/4072.html" severity="6">
   <text>This copy assignment operator does not check for self-assignment.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item17]"/>
    <reference source="Effective C++ 3rd Edition [Item11]"/>
    <reference source="Industrial Strength C++ [Rules.5.12]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4073" level="QA_WARNING" help="doc-en_US/doc/messages/4073.html" severity="6">
   <text>This non 'simple' copy assignment operator does not check for self-assignment.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item17]"/>
    <reference source="Effective C++ 3rd Edition [Item11]"/>
    <reference source="Industrial Strength C++ [Rules.5.12]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4074" level="QA_WARNING" help="doc-en_US/doc/messages/4074.html" severity="5">
   <text>This condition has side effects.</text>
   <references>
      </references>
  </message>
  <message id="4075" level="QA_WARNING" help="doc-en_US/doc/messages/4075.html" severity="4">
   <text>This copy assignment operator is not implemented using 'copy and swap'.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item17]"/>
    <reference source="Effective C++ 3rd Edition [Item11]"/>
    <reference source="Industrial Strength C++ [Rules.5.12]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4076" level="QA_WARNING" help="doc-en_US/doc/messages/4076.html" severity="4">
   <text>This move assignment operator is not implemented using 'move and swap'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4077" level="QA_WARNING" help="doc-en_US/doc/messages/4077.html" severity="5">
   <text>This condition expression of non-bool type is contextually converted to bool.</text>
   <references>
      </references>
  </message>
  <message id="4078" level="QA_WARNING" help="doc-en_US/doc/messages/4078.html" severity="5">
   <text>This looks like a use of the double-checked locking pattern, which could be rewritten to use std::call_once.</text>
   <references>
      </references>
  </message>
  <message id="4079" level="QA_WARNING" help="doc-en_US/doc/messages/4079.html" severity="5">
   <text>This condition expression of non-bool type is implicitly converted to bool.</text>
   <references>
      </references>
  </message>
  <message id="4090" level="QA_WARNING" help="doc-en_US/doc/messages/4090.html" severity="6">
   <text>The condition in this 'if' statement is constant.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4091" level="QA_WARNING" help="doc-en_US/doc/messages/4091.html" severity="6">
   <text>The condition in this 'while' statement is constant.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4092" level="QA_WARNING" help="doc-en_US/doc/messages/4092.html" severity="6">
   <text>The condition in this 'do' statement is constant.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4093" level="QA_WARNING" help="doc-en_US/doc/messages/4093.html" severity="6">
   <text>The condition in this 'for' statement is constant.</text>
   <references>
      </references>
  </message>
  <message id="4094" level="QA_WARNING" help="doc-en_US/doc/messages/4094.html" severity="6">
   <text>The condition in this 'switch' statement is constant.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4101" level="QA_WARNING" help="doc-en_US/doc/messages/4101.html" severity="6">
   <text>This scalar type object is not explicitly initialized.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4102" level="QA_WARNING" help="doc-en_US/doc/messages/4102.html" severity="7">
   <text>This POD or Aggregate class is not explicitly initialized.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4104" level="QA_WARNING" help="doc-en_US/doc/messages/4104.html" severity="6">
   <text>This scalar type object with static storage duration is not explicitly initialized.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.2]"/>
   </references>
  </message>
  <message id="4105" level="QA_WARNING" help="doc-en_US/doc/messages/4105.html" severity="6">
   <text>This POD class with static storage duration is not explicitly initialized.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.2]"/>
   </references>
  </message>
  <message id="4107" level="QA_WARNING" help="doc-en_US/doc/messages/4107.html" severity="5">
   <text>This is declaring multiple variables in the same declaration statement.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4108" level="QA_WARNING" help="doc-en_US/doc/messages/4108.html" severity="5">
   <text>This is declaring multiple variables in the same declaration statement with different types.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4109" level="QA_WARNING" help="doc-en_US/doc/messages/4109.html" severity="5">
   <text>This is defining multiple types in the same type definition.</text>
   <references>
      </references>
  </message>
  <message id="4110" level="QA_WARNING" help="doc-en_US/doc/messages/4110.html" severity="5">
   <text>This is defining multiple types in the same type definition for different types.</text>
   <references>
      </references>
  </message>
  <message id="4113" level="QA_WARNING" help="doc-en_US/doc/messages/4113.html" severity="5">
   <text>The declaration of object '%1s' can be moved to this nested scope.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4114" level="QA_WARNING" help="doc-en_US/doc/messages/4114.html" severity="5">
   <text>The declaration of the constant object '%1s' can be moved to this nested scope.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4115" level="QA_WARNING" help="doc-en_US/doc/messages/4115.html" severity="2">
   <text>This declaration requires grammar disambiguation, could replace it with '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4116" level="QA_WARNING" help="doc-en_US/doc/messages/4116.html" severity="2">
   <text>The typedef '%1s' used in this declaration required grammar disambiguation, could replace it with '%3s'.</text>
   <references>
      </references>
  </message>
  <message id="4117" level="QA_WARNING" help="doc-en_US/doc/messages/4117.html" severity="5">
   <text>'%1s' is not modified by the function.</text>
   <references>
      </references>
  </message>
  <message id="4118" level="QA_WARNING" help="doc-en_US/doc/messages/4118.html" severity="5">
   <text>The parameter '%1s' is not modified by the function.</text>
   <references>
      </references>
  </message>
  <message id="4119" level="QA_WARNING" help="doc-en_US/doc/messages/4119.html" severity="5">
   <text>The parameter '%1s' is not modified by the virtual function.</text>
   <references>
      </references>
  </message>
  <message id="4120" level="QA_WARNING" help="doc-en_US/doc/messages/4120.html" severity="2">
   <text>This getter function is suitable for inlining.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.1]"/>
   </references>
  </message>
  <message id="4121" level="QA_WARNING" help="doc-en_US/doc/messages/4121.html" severity="2">
   <text>This setter function is suitable for inlining.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.1]"/>
   </references>
  </message>
  <message id="4122" level="QA_WARNING" help="doc-en_US/doc/messages/4122.html" severity="2">
   <text>This inline function has a local static object.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item33]"/>
    <reference source="More Effective C++ [Item26]"/>
    <reference source="Effective C++ 3rd Edition [Item30]"/>
   </references>
  </message>
  <message id="4123" level="QA_WARNING" help="doc-en_US/doc/messages/4123.html" severity="2">
   <text>This virtual getter function is suitable for inlining.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.1]"/>
   </references>
  </message>
  <message id="4124" level="QA_WARNING" help="doc-en_US/doc/messages/4124.html" severity="2">
   <text>This virtual setter function is suitable for inlining.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.1]"/>
   </references>
  </message>
  <message id="4125" level="QA_WARNING" help="doc-en_US/doc/messages/4125.html" severity="2">
   <text>This inline function has a cost of '%1s'.  Configuration option 'inline_cost::max' is set to '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4126" level="QA_WARNING" help="doc-en_US/doc/messages/4126.html" severity="5">
   <text>This integral or enum output parameter value is not subsequently checked.</text>
   <references>
      </references>
  </message>
  <message id="4127" level="QA_WARNING" help="doc-en_US/doc/messages/4127.html" severity="2">
   <text>This output parameter value is not subsequently checked.</text>
   <references>
      </references>
  </message>
  <message id="4128" level="QA_WARNING" help="doc-en_US/doc/messages/4128.html" severity="2">
   <text>This is using auto to declare an object of fundamental type.</text>
   <references>
      </references>
  </message>
  <message id="4129" level="QA_WARNING" help="doc-en_US/doc/messages/4129.html" severity="2">
   <text>This is using auto to declare an object of fundamental type, deduced from an overloaded operator call.</text>
   <references>
      </references>
  </message>
  <message id="4130" level="QA_WARNING" help="doc-en_US/doc/messages/4130.html" severity="2">
   <text>This is using auto to declare an object of fundamental type in a range-for statement.</text>
   <references>
      </references>
  </message>
  <message id="4131" level="QA_WARNING" help="doc-en_US/doc/messages/4131.html" severity="2">
   <text>This is using auto to declare an object of fundamental type deduced from a template parameter.</text>
   <references>
      </references>
  </message>
  <message id="4132" level="QA_WARNING" help="doc-en_US/doc/messages/4132.html" severity="2">
   <text>This is defining a non-template function with a trailing return type.</text>
   <references>
      </references>
  </message>
  <message id="4133" level="QA_WARNING" help="doc-en_US/doc/messages/4133.html" severity="2">
   <text>This is defining a function with a deduced return type.</text>
   <references>
      </references>
  </message>
  <message id="4134" level="QA_WARNING" help="doc-en_US/doc/messages/4134.html" severity="5">
   <text>The pointer that '%1s' decays to has been modified.</text>
   <references>
      </references>
  </message>
  <message id="4140" level="QA_WARNING" help="doc-en_US/doc/messages/4140.html" severity="5">
   <text>'%1s' is not modified by the function and could be declared const.</text>
   <references>
      </references>
  </message>
  <message id="4141" level="QA_WARNING" help="doc-en_US/doc/messages/4141.html" severity="5">
   <text>The declaration of object '%1s' can be declared later in this scope.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4142" level="QA_WARNING" help="doc-en_US/doc/messages/4142.html" severity="5">
   <text>The declaration of the constant object '%1s' can be declared later in this scope.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4143" level="QA_WARNING" help="doc-en_US/doc/messages/4143.html" severity="9">
   <text>Object can be declared with the constexpr specifier.</text>
   <references>
      </references>
  </message>
  <message id="4144" level="QA_WARNING" help="doc-en_US/doc/messages/4144.html" severity="9">
   <text>Function can be declared with the constexpr specifier.</text>
   <references>
      </references>
  </message>
  <message id="4150" level="QA_WARNING" help="doc-en_US/doc/messages/4150.html" severity="5">
   <text>This atomic variable is referenced nonatomically.</text>
   <references>
      </references>
  </message>
  <message id="4151" level="QA_WARNING" help="doc-en_US/doc/messages/4151.html" severity="2">
   <text>C style char pointer has been used.</text>
   <references>
      </references>
  </message>
  <message id="4205" level="QA_WARNING" help="doc-en_US/doc/messages/4205.html" severity="6">
   <text>Constructor should explicitly initialize all of its virtual base classes and immediate base classes.</text>
   <references>
      </references>
  </message>
  <message id="4206" level="QA_WARNING" help="doc-en_US/doc/messages/4206.html" severity="8">
   <text>POD member object '%1s' is not initialized by constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4207" level="QA_WARNING" help="doc-en_US/doc/messages/4207.html" severity="7">
   <text>POD non-array member object '%1s' is potentially not initialized by constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4208" level="QA_WARNING" help="doc-en_US/doc/messages/4208.html" severity="5">
   <text>Variable '%1s' is never used.</text>
   <references>
      </references>
  </message>
  <message id="4209" level="QA_WARNING" help="doc-en_US/doc/messages/4209.html" severity="5">
   <text>Constant '%1s' is never used.</text>
   <references>
      </references>
  </message>
  <message id="4211" level="QA_WARNING" help="doc-en_US/doc/messages/4211.html" severity="1">
   <text>This non const member function does not modify any member data.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item3]"/>
   </references>
  </message>
  <message id="4212" level="QA_WARNING" help="doc-en_US/doc/messages/4212.html" severity="2">
   <text>This non static member function does not access any member data.</text>
   <references>
      </references>
  </message>
  <message id="4213" level="QA_WARNING" help="doc-en_US/doc/messages/4213.html" severity="4">
   <text>This pointer to non const parameter is not modified.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
   </references>
  </message>
  <message id="4214" level="QA_WARNING" help="doc-en_US/doc/messages/4214.html" severity="6">
   <text>This const member function modifies the program state.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.13]"/>
   </references>
  </message>
  <message id="4215" level="QA_WARNING" help="doc-en_US/doc/messages/4215.html" severity="7">
   <text>This pointer to non const parameter is not modified in all paths.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
   </references>
  </message>
  <message id="4218" level="QA_WARNING" help="doc-en_US/doc/messages/4218.html" severity="7">
   <text>POD member object '%1s' is not initialized by constructor, but is potentially initialized by static factory method.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4219" level="QA_WARNING" help="doc-en_US/doc/messages/4219.html" severity="7">
   <text>POD member object '%1s' is not initialized by constructor, but is potentially initialized by friend factory method.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4220" level="QA_WARNING" help="doc-en_US/doc/messages/4220.html" severity="2">
   <text>This postfix operator does not use the prefix operator for its implementation.</text>
   <references>
      </references>
  </message>
  <message id="4221" level="QA_WARNING" help="doc-en_US/doc/messages/4221.html" severity="2">
   <text>This postfix operator does not use the prefix operator for its implementation.</text>
   <references>
      </references>
  </message>
  <message id="4222" level="QA_WARNING" help="doc-en_US/doc/messages/4222.html" severity="2">
   <text>This binary operator is not implemented in terms of its assignment version.</text>
   <references>
    <reference source="More Effective C++ [Item22]"/>
   </references>
  </message>
  <message id="4228" level="QA_WARNING" help="doc-en_US/doc/messages/4228.html" severity="5">
   <text>This expression does not initialise or modify a loop variable.</text>
   <references>
      </references>
  </message>
  <message id="4229" level="QA_WARNING" help="doc-en_US/doc/messages/4229.html" severity="5">
   <text>'%1s' is not a loop control variable and is modified in the loop init-statement.</text>
   <references>
      </references>
  </message>
  <message id="4230" level="QA_WARNING" help="doc-en_US/doc/messages/4230.html" severity="1">
   <text>Scalar type control variable '%1s' not declared here.</text>
   <references>
      </references>
  </message>
  <message id="4231" level="QA_WARNING" help="doc-en_US/doc/messages/4231.html" severity="2">
   <text>The starting value of the scalar type control variable '%1s' is not set in the initialization expression.</text>
   <references>
      </references>
  </message>
  <message id="4232" level="QA_WARNING" help="doc-en_US/doc/messages/4232.html" severity="5">
   <text>Multiple scalar loop control variables found in 'for' loop: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="4233" level="QA_WARNING" help="doc-en_US/doc/messages/4233.html" severity="5">
   <text>Unable to determine loop control variable.</text>
   <references>
      </references>
  </message>
  <message id="4234" level="QA_WARNING" help="doc-en_US/doc/messages/4234.html" severity="6">
   <text>Variable '%1s' of floating type used as loop control variable.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4235" level="QA_WARNING" help="doc-en_US/doc/messages/4235.html" severity="5">
   <text>Scalar control loop variable '%1s' modified in loop block.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.4.1]"/>
   </references>
  </message>
  <message id="4236" level="QA_WARNING" help="doc-en_US/doc/messages/4236.html" severity="5">
   <text>Scalar control loop variable '%1s' modified more than once in the loop.</text>
   <references>
      </references>
  </message>
  <message id="4237" level="QA_WARNING" help="doc-en_US/doc/messages/4237.html" severity="1">
   <text>Class type control variable '%1s' not declared here.</text>
   <references>
      </references>
  </message>
  <message id="4238" level="QA_WARNING" help="doc-en_US/doc/messages/4238.html" severity="2">
   <text>The starting value of class type control variable '%1s' is not set in the initialization expression.</text>
   <references>
      </references>
  </message>
  <message id="4239" level="QA_WARNING" help="doc-en_US/doc/messages/4239.html" severity="5">
   <text>Class type control loop variable '%1s' modified in loop block.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.4.1]"/>
   </references>
  </message>
  <message id="4240" level="QA_WARNING" help="doc-en_US/doc/messages/4240.html" severity="5">
   <text>Class type control loop variable '%1s' modified more than once in the loop.</text>
   <references>
      </references>
  </message>
  <message id="4241" level="QA_WARNING" help="doc-en_US/doc/messages/4241.html" severity="5">
   <text>'%1s' of scalar type is not a control variable and is modified in the loop iteration expression.</text>
   <references>
      </references>
  </message>
  <message id="4242" level="QA_WARNING" help="doc-en_US/doc/messages/4242.html" severity="5">
   <text>'%1s' of class type is not a control variable and is modified in the loop iteration expression.</text>
   <references>
      </references>
  </message>
  <message id="4243" level="QA_WARNING" help="doc-en_US/doc/messages/4243.html" severity="5">
   <text>Multiple class type loop control variables found: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="4244" level="QA_WARNING" help="doc-en_US/doc/messages/4244.html" severity="5">
   <text>This loop has both scalar control variables '%2s' and class type control variables '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="4245" level="QA_WARNING" help="doc-en_US/doc/messages/4245.html" severity="7">
   <text>The range of values in the loop counter is smaller than the range of the control variable it is compared against.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4246" level="QA_WARNING" help="doc-en_US/doc/messages/4246.html" severity="4">
   <text>This for loop does not have an increment expression.</text>
   <references>
      </references>
  </message>
  <message id="4247" level="QA_WARNING" help="doc-en_US/doc/messages/4247.html" severity="4">
   <text>This for loop does not have an initialization expression.</text>
   <references>
      </references>
  </message>
  <message id="4248" level="QA_WARNING" help="doc-en_US/doc/messages/4248.html" severity="4">
   <text>This for loop with an empty body does not have an initialization expression.</text>
   <references>
      </references>
  </message>
  <message id="4249" level="QA_WARNING" help="doc-en_US/doc/messages/4249.html" severity="1">
   <text>Loop control variable '%1s' is not modified in the loop iteration expression.</text>
   <references>
      </references>
  </message>
  <message id="4250" level="QA_WARNING" help="doc-en_US/doc/messages/4250.html" severity="8">
   <text>The member variable '%1s' is not assigned to in this function.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item16]"/>
    <reference source="Effective C++ 3rd Edition [Item12]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4251" level="QA_WARNING" help="doc-en_US/doc/messages/4251.html" severity="6">
   <text>This function does not explicitly assign to all members, but calls a function which may do the assignment</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item16]"/>
    <reference source="Effective C++ 3rd Edition [Item12]"/>
   </references>
  </message>
  <message id="4252" level="QA_WARNING" help="doc-en_US/doc/messages/4252.html" severity="8">
   <text>This function needs to assign to the '%1s' base class</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item16]"/>
    <reference source="Effective C++ 3rd Edition [Item12]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4253" level="QA_WARNING" help="doc-en_US/doc/messages/4253.html" severity="7">
   <text>This function does not explicitly assign to all base classes but calls a function which may do the assignment.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item16]"/>
    <reference source="Effective C++ 3rd Edition [Item12]"/>
   </references>
  </message>
  <message id="4254" level="QA_WARNING" help="doc-en_US/doc/messages/4254.html" severity="5">
   <text>The member variable '%1s' with reference type is not assigned to in this function.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item16]"/>
   </references>
  </message>
  <message id="4260" level="QA_WARNING" help="doc-en_US/doc/messages/4260.html" severity="8">
   <text>The virtual function is called in constructor without qualifier.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4261" level="QA_WARNING" help="doc-en_US/doc/messages/4261.html" severity="8">
   <text>The virtual function is called in destructor without qualifier.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4262" level="QA_WARNING" help="doc-en_US/doc/messages/4262.html" severity="8">
   <text>The class allocates memory in constructor but does not have a copy constructor.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4263" level="QA_WARNING" help="doc-en_US/doc/messages/4263.html" severity="8">
   <text>The class allocates memory in constructor but does not have an overloaded copy assignment operator.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4264" level="QA_WARNING" help="doc-en_US/doc/messages/4264.html" severity="8">
   <text>The class allocates memory in constructor but does not declare a destructor.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4265" level="QA_WARNING" help="doc-en_US/doc/messages/4265.html" severity="8">
   <text>POD member object '%1s' is not copied or initialized by this copy constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4266" level="QA_WARNING" help="doc-en_US/doc/messages/4266.html" severity="8">
   <text>Member object '%1s' is not copied  by this copy constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4267" level="QA_WARNING" help="doc-en_US/doc/messages/4267.html" severity="8">
   <text>Base class '%1s' is not copied by this copy constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4268" level="QA_WARNING" help="doc-en_US/doc/messages/4268.html" severity="4">
   <text>Initialization helper can be replaced with a delegator.</text>
   <references>
    <reference source="ISO 2011 C++ Language [12.6.2]"/>
    <reference source="High Integrity C++"/>
   </references>
  </message>
  <message id="4269" level="QA_WARNING" help="doc-en_US/doc/messages/4269.html" severity="7">
   <text>POD array member object '%1s' is potentially not initialized by constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4270" level="QA_WARNING" help="doc-en_US/doc/messages/4270.html" severity="7">
   <text>POD member object '%1s' is not initialized by constructor, but is potentially initialized by an operator new.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4271" level="QA_WARNING" help="doc-en_US/doc/messages/4271.html" severity="7">
   <text>Protected POD member object '%1s' is not initialized by constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4272" level="QA_WARNING" help="doc-en_US/doc/messages/4272.html" severity="7">
   <text>POD member object '%1s' is not initialized by private constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4273" level="QA_WARNING" help="doc-en_US/doc/messages/4273.html" severity="8">
   <text>This function call leads to calling a virtual function in the constructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4274" level="QA_WARNING" help="doc-en_US/doc/messages/4274.html" severity="8">
   <text>This function call leads to calling a virtual function in the destructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4275" level="QA_WARNING" help="doc-en_US/doc/messages/4275.html" severity="8">
   <text>This is a dynamic_cast expression in a constructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4276" level="QA_WARNING" help="doc-en_US/doc/messages/4276.html" severity="8">
   <text>This is a dynamic_cast expression in a destructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4277" level="QA_WARNING" help="doc-en_US/doc/messages/4277.html" severity="8">
   <text>This function call leads to a dynamic_cast expression in a constructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4278" level="QA_WARNING" help="doc-en_US/doc/messages/4278.html" severity="8">
   <text>This function call leads to a dynamic_cast expression in a destructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4279" level="QA_WARNING" help="doc-en_US/doc/messages/4279.html" severity="8">
   <text>This is a typeid expression in a constructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4280" level="QA_WARNING" help="doc-en_US/doc/messages/4280.html" severity="8">
   <text>This is a typeid expression in a destructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4281" level="QA_WARNING" help="doc-en_US/doc/messages/4281.html" severity="8">
   <text>This function call leads to a typeid expression in a constructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4282" level="QA_WARNING" help="doc-en_US/doc/messages/4282.html" severity="8">
   <text>This function call leads to a typeid expression in a destructor.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="C++ FAQs [100]"/>
    <reference source="ISO C++ Language [12.7/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4283" level="QA_WARNING" help="doc-en_US/doc/messages/4283.html" severity="7">
   <text>This non const reference parameter is not modified.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4284" level="QA_WARNING" help="doc-en_US/doc/messages/4284.html" severity="7">
   <text>This non const reference parameter is not modified in all paths.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
   </references>
  </message>
  <message id="4285" level="QA_WARNING" help="doc-en_US/doc/messages/4285.html" severity="7">
   <text>This copy/move constructor has side effects other than copying/moving the object.</text>
   <references>
      </references>
  </message>
  <message id="4286" level="QA_WARNING" help="doc-en_US/doc/messages/4286.html" severity="7">
   <text>This literal operator has side effects other than conversion of the parameter.</text>
   <references>
      </references>
  </message>
  <message id="4287" level="QA_WARNING" help="doc-en_US/doc/messages/4287.html" severity="7">
   <text>This non const reference parameter is not read before it is overwritten.</text>
   <references>
      </references>
  </message>
  <message id="4288" level="QA_WARNING" help="doc-en_US/doc/messages/4288.html" severity="7">
   <text>This copy/move assignment operator has side effects other than copying/moving the object.</text>
   <references>
      </references>
  </message>
  <message id="4290" level="QA_WARNING" help="doc-en_US/doc/messages/4290.html" severity="5">
   <text>'%1s' of scalar type is modified in the conditional expression.</text>
   <references>
      </references>
  </message>
  <message id="4291" level="QA_WARNING" help="doc-en_US/doc/messages/4291.html" severity="5">
   <text>'%1s' of class type is modified in the conditional expression.</text>
   <references>
      </references>
  </message>
  <message id="4292" level="QA_WARNING" help="doc-en_US/doc/messages/4292.html" severity="5">
   <text>Boolean '%1s' is modified in the loop iteration expression.</text>
   <references>
      </references>
  </message>
  <message id="4293" level="QA_WARNING" help="doc-en_US/doc/messages/4293.html" severity="5">
   <text>Boolean conditional '%1s' and loop control variable '%2s' found.</text>
   <references>
      </references>
  </message>
  <message id="4294" level="QA_WARNING" help="doc-en_US/doc/messages/4294.html" severity="5">
   <text>For loop counter '%1s' of fundamental type not compared with relational operator.</text>
   <references>
      </references>
  </message>
  <message id="4295" level="QA_WARNING" help="doc-en_US/doc/messages/4295.html" severity="5">
   <text>For loop counter '%1s' of fundamental type modified not with ++, --, += or -=.</text>
   <references>
      </references>
  </message>
  <message id="4296" level="QA_WARNING" help="doc-en_US/doc/messages/4296.html" severity="5">
   <text>For loop counter '%1s' of fundamental type is incremented/decremented by non-constant value.</text>
   <references>
      </references>
  </message>
  <message id="4297" level="QA_WARNING" help="doc-en_US/doc/messages/4297.html" severity="5">
   <text>For loop counter '%1s' of class type modified not with ++, --, += or -=.</text>
   <references>
      </references>
  </message>
  <message id="4298" level="QA_WARNING" help="doc-en_US/doc/messages/4298.html" severity="5">
   <text>For loop counter '%1s' of class type is incremented/decremented by non-constant value.</text>
   <references>
      </references>
  </message>
  <message id="4299" level="QA_WARNING" help="doc-en_US/doc/messages/4299.html" severity="5">
   <text>For loop counter '%1s' of class type not compared with relational operator.</text>
   <references>
      </references>
  </message>
  <message id="4300" level="QA_WARNING" help="doc-en_US/doc/messages/4300.html" severity="9">
   <text>The label '%1s' does not exist.</text>
   <references>
    <reference source="ISO C++ Language [6.6.4]"/>
   </references>
  </message>
  <message id="4303" level="QA_WARNING" help="doc-en_US/doc/messages/4303.html" severity="8">
   <text>The resource used has been released.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4304" level="QA_WARNING" help="doc-en_US/doc/messages/4304.html" severity="7">
   <text>The resource used has possibly been released.</text>
   <references>
      </references>
  </message>
  <message id="4306" level="QA_WARNING" help="doc-en_US/doc/messages/4306.html" severity="9">
   <text>Switch has multiple default labels.</text>
   <references>
    <reference source="ISO C++ Language [6.4.2/3]"/>
   </references>
  </message>
  <message id="4327" level="QA_WARNING" help="doc-en_US/doc/messages/4327.html" severity="5">
   <text>Argument '%1s' is never used.</text>
   <references>
      </references>
  </message>
  <message id="4331" level="QA_WARNING" help="doc-en_US/doc/messages/4331.html" severity="5">
   <text>Argument '%1s' is never used in this virtual function.</text>
   <references>
      </references>
  </message>
  <message id="4400" level="QA_WARNING" help="doc-en_US/doc/messages/4400.html" severity="4">
   <text>Literal of type '%1s' found inside function.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4401" level="QA_WARNING" help="doc-en_US/doc/messages/4401.html" severity="4">
   <text>Literal of type '%1s' used in initializer of non-constant in global scope.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4402" level="QA_WARNING" help="doc-en_US/doc/messages/4402.html" severity="4">
   <text>Literal of type '%1s' found in case label.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4403" level="QA_WARNING" help="doc-en_US/doc/messages/4403.html" severity="4">
   <text>Literal of type '%1s' found in array bounds.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4404" level="QA_WARNING" help="doc-en_US/doc/messages/4404.html" severity="4">
   <text>Literal of type '%1s' found in template argument.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4405" level="QA_WARNING" help="doc-en_US/doc/messages/4405.html" severity="4">
   <text>Literal of type '%1s' found in default argument.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4406" level="QA_WARNING" help="doc-en_US/doc/messages/4406.html" severity="4">
   <text>Literal of type '%1s' found inside function.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4407" level="QA_WARNING" help="doc-en_US/doc/messages/4407.html" severity="4">
   <text>Octal escape sequence of type '%1s' found in case label.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4408" level="QA_WARNING" help="doc-en_US/doc/messages/4408.html" severity="4">
   <text>Literal of type '%1s' found in template argument.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4409" level="QA_WARNING" help="doc-en_US/doc/messages/4409.html" severity="4">
   <text>Literal of type '%1s' found in default argument.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4410" level="QA_WARNING" help="doc-en_US/doc/messages/4410.html" severity="4">
   <text>String literal found inside function.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4411" level="QA_WARNING" help="doc-en_US/doc/messages/4411.html" severity="4">
   <text>String literal used as an array initializer.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4412" level="QA_WARNING" help="doc-en_US/doc/messages/4412.html" severity="4">
   <text>String literal used as a pointer initializer.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4413" level="QA_WARNING" help="doc-en_US/doc/messages/4413.html" severity="4">
   <text>String literal found in default argument.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4414" level="QA_WARNING" help="doc-en_US/doc/messages/4414.html" severity="4">
   <text>Literal of type '%1s' used in initializer of non-constant in local scope.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4415" level="QA_WARNING" help="doc-en_US/doc/messages/4415.html" severity="4">
   <text>Literal of type '%1s' used to initialize mutable member of constant object.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4416" level="QA_WARNING" help="doc-en_US/doc/messages/4416.html" severity="4">
   <text>User defined literal used in initialization of non-constant in local scope.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4417" level="QA_WARNING" help="doc-en_US/doc/messages/4417.html" severity="4">
   <text>User defined literal used in initialization of non-constant in global scope.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4418" level="QA_WARNING" help="doc-en_US/doc/messages/4418.html" severity="4">
   <text>User defined literal used in local scope.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4419" level="QA_WARNING" help="doc-en_US/doc/messages/4419.html" severity="4">
   <text>User defined literal used in global scope.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.4]"/>
   </references>
  </message>
  <message id="4420" level="QA_WARNING" help="doc-en_US/doc/messages/4420.html" severity="3">
   <text>Digits in this literal are not separated to form groups of %1s digits.</text>
   <references>
      </references>
  </message>
  <message id="4421" level="QA_WARNING" help="doc-en_US/doc/messages/4421.html" severity="3">
   <text>Numeric literal exceeds maximum number of digits %1s without using separators.</text>
   <references>
      </references>
  </message>
  <message id="4422" level="QA_WARNING" help="doc-en_US/doc/messages/4422.html" severity="3">
   <text>Integer literal '%1s' has lowercase hexadecimal digits.</text>
   <references>
      </references>
  </message>
  <message id="4423" level="QA_WARNING" help="doc-en_US/doc/messages/4423.html" severity="3">
   <text>Floating point literal '%1s' has lowercase hexadecimal digits.</text>
   <references>
      </references>
  </message>
  <message id="4424" level="QA_WARNING" help="doc-en_US/doc/messages/4424.html" severity="3">
   <text>Literal '%1s' has lowercase letters in suffix.</text>
   <references>
      </references>
  </message>
  <message id="4425" level="QA_WARNING" help="doc-en_US/doc/messages/4425.html" severity="3">
   <text>Literal '%1s' has lowercase 'l' characters in suffix.</text>
   <references>
      </references>
  </message>
  <message id="4500" level="QA_WARNING" help="doc-en_US/doc/messages/4500.html" severity="4">
   <text>Null statement does not occur on a line by itself</text>
   <references>
      </references>
  </message>
  <message id="4501" level="QA_WARNING" help="doc-en_US/doc/messages/4501.html" severity="4">
   <text>This function definition contains both statements and asm definitions.</text>
   <references>
      </references>
  </message>
  <message id="4600" level="QA_WARNING" help="doc-en_US/doc/messages/4600.html" severity="5">
   <text>This continue statement is used within a potentially-unbounded for loop.</text>
   <references>
      </references>
  </message>
  <message id="4607" level="QA_WARNING" help="doc-en_US/doc/messages/4607.html" severity="1">
   <text>This switch init-statement is an expression-statement.</text>
   <references>
      </references>
  </message>
  <message id="4608" level="QA_WARNING" help="doc-en_US/doc/messages/4608.html" severity="4">
   <text>This switch statement has a single clause.</text>
   <references>
      </references>
  </message>
  <message id="4609" level="QA_WARNING" help="doc-en_US/doc/messages/4609.html" severity="4">
   <text>This switch statement has no default label, but tests for every enumerator of the enumerated type of the conditional without a fixed underlying type.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4610" level="QA_WARNING" help="doc-en_US/doc/messages/4610.html" severity="4">
   <text>This switch statement has no default label, but tests for every enumerator of the enumerated type of the conditional with a fixed underlying type.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4611" level="QA_WARNING" help="doc-en_US/doc/messages/4611.html" severity="4">
   <text>This switch statement has no default label, but tests for every enumerator of an enumerated type.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4612" level="QA_WARNING" help="doc-en_US/doc/messages/4612.html" severity="4">
   <text>Statements after the last label fall through.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.4.4]"/>
   </references>
  </message>
  <message id="4613" level="QA_WARNING" help="doc-en_US/doc/messages/4613.html" severity="4">
   <text>This is a label.</text>
   <references>
      </references>
  </message>
  <message id="4614" level="QA_WARNING" help="doc-en_US/doc/messages/4614.html" severity="5">
   <text>Declarations precede the first label in this 'switch' construct.</text>
   <references>
      </references>
  </message>
  <message id="4615" level="QA_WARNING" help="doc-en_US/doc/messages/4615.html" severity="5">
   <text>Statements precede the first label in this 'switch' construct.</text>
   <references>
      </references>
  </message>
  <message id="4616" level="QA_WARNING" help="doc-en_US/doc/messages/4616.html" severity="2">
   <text>This case clause is terminated by a jump other than 'break' or 'throw'.</text>
   <references>
      </references>
  </message>
  <message id="4617" level="QA_WARNING" help="doc-en_US/doc/messages/4617.html" severity="2">
   <text>The default clause has not been placed as the first or last clause in the switch statement.</text>
   <references>
      </references>
  </message>
  <message id="4618" level="QA_WARNING" help="doc-en_US/doc/messages/4618.html" severity="2">
   <text>This case clause is terminated unconditionally by a selection statement.</text>
   <references>
      </references>
  </message>
  <message id="4619" level="QA_WARNING" help="doc-en_US/doc/messages/4619.html" severity="6">
   <text>This member function when used with a temporary object may result in a dangling reference or pointer.</text>
   <references>
      </references>
  </message>
  <message id="4620" level="QA_WARNING" help="doc-en_US/doc/messages/4620.html" severity="6">
   <text>Return '*this' for assignment operators.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item15]"/>
    <reference source="Effective C++ 3rd Edition [Item10]"/>
   </references>
  </message>
  <message id="4621" level="QA_WARNING" help="doc-en_US/doc/messages/4621.html" severity="6">
   <text>Return '*this' for copy/move assignment operator.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item15]"/>
    <reference source="Effective C++ 3rd Edition [Item10]"/>
    <reference source="Industrial Strength C++ [Rules.7.7]"/>
   </references>
  </message>
  <message id="4622" level="QA_WARNING" help="doc-en_US/doc/messages/4622.html" severity="6">
   <text>Return '*this' for prefix ++/-- operators.</text>
   <references>
    <reference source="More Effective C++ [Item6]"/>
    <reference source="C++ FAQs [348]"/>
   </references>
  </message>
  <message id="4623" level="QA_WARNING" help="doc-en_US/doc/messages/4623.html" severity="7">
   <text>This const function returns a non-const handle to member data.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
   </references>
  </message>
  <message id="4624" level="QA_WARNING" help="doc-en_US/doc/messages/4624.html" severity="7">
   <text>This returns a handle to a function const reference parameter.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4625" level="QA_WARNING" help="doc-en_US/doc/messages/4625.html" severity="6">
   <text>This function returns a non-const handle to data pointed to by a private or protected member, in a class performing shallow copy.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4626" level="QA_WARNING" help="doc-en_US/doc/messages/4626.html" severity="6">
   <text>This const function returns a non-const handle to data pointed to by a member, in a class performing shallow copy.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4627" level="QA_WARNING" help="doc-en_US/doc/messages/4627.html" severity="7">
   <text>This function returns a non-const handle to data pointed to by a private or protected member.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4628" level="QA_WARNING" help="doc-en_US/doc/messages/4628.html" severity="5">
   <text>This const function returns a non-const handle to data pointed to by a member.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4629" level="QA_WARNING" help="doc-en_US/doc/messages/4629.html" severity="7">
   <text>This potentially returns a handle to local data.</text>
   <references>
    <reference source="Effective C++ 1st/2nd Edition [Item29]"/>
    <reference source="Effective C++ 3rd Edition [Item28]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4630" level="QA_WARNING" help="doc-en_US/doc/messages/4630.html" severity="5">
   <text>The code in the try block will not throw any exceptions.</text>
   <references>
      </references>
  </message>
  <message id="4631" level="QA_WARNING" help="doc-en_US/doc/messages/4631.html" severity="7">
   <text>The code in the destructor may throw an exception.</text>
   <references>
    <reference source="More Effective C++ [Item11]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4632" level="QA_WARNING" help="doc-en_US/doc/messages/4632.html" severity="7">
   <text>Function without an exception specification called from a function with an exception specification.</text>
   <references>
    <reference source="More Effective C++ [Item14]"/>
   </references>
  </message>
  <message id="4633" level="QA_WARNING" help="doc-en_US/doc/messages/4633.html" severity="8">
   <text>The code in the destructor for this object with static storage duration may throw an exception.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4634" level="QA_WARNING" help="doc-en_US/doc/messages/4634.html" severity="7">
   <text>The code in the constructor for this non-local object with static storage duration may throw an exception.</text>
   <references>
      </references>
  </message>
  <message id="4635" level="QA_WARNING" help="doc-en_US/doc/messages/4635.html" severity="8">
   <text>This rethrow expression is outside a catch block.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4636" level="QA_WARNING" help="doc-en_US/doc/messages/4636.html" severity="3">
   <text>This function call in namespace scope may cause the program to terminate.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4637" level="QA_WARNING" help="doc-en_US/doc/messages/4637.html" severity="8">
   <text>throw in namespace scope will cause the program to terminate.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4638" level="QA_WARNING" help="doc-en_US/doc/messages/4638.html" severity="8">
   <text>A throw specification has no meaning for the global main.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4639" level="QA_WARNING" help="doc-en_US/doc/messages/4639.html" severity="5">
   <text>This catch handler is not used.</text>
   <references>
      </references>
  </message>
  <message id="4640" level="QA_WARNING" help="doc-en_US/doc/messages/4640.html" severity="5">
   <text>The code in the try block will not throw any exceptions and the catch handlers are not used.</text>
   <references>
      </references>
  </message>
  <message id="4641" level="QA_WARNING" help="doc-en_US/doc/messages/4641.html" severity="5">
   <text>This handler catches derived types not specified in the throw specification of the called functions.</text>
   <references>
      </references>
  </message>
  <message id="4642" level="QA_WARNING" help="doc-en_US/doc/messages/4642.html" severity="5">
   <text>This function call may throw an exception type that will be caught by it's base type.</text>
   <references>
      </references>
  </message>
  <message id="4643" level="QA_WARNING" help="doc-en_US/doc/messages/4643.html" severity="5">
   <text>This throws an exception which will be caught by it's base type.</text>
   <references>
      </references>
  </message>
  <message id="4644" level="QA_WARNING" help="doc-en_US/doc/messages/4644.html" severity="5">
   <text>The derived type '%2s' is listed by its base '%1s' in the throw specification.</text>
   <references>
      </references>
  </message>
  <message id="4645" level="QA_WARNING" help="doc-en_US/doc/messages/4645.html" severity="5">
   <text>This function call may result in an exception of derived type '%2s' that is listed by its base '%1s' in the throw specification.</text>
   <references>
      </references>
  </message>
  <message id="4646" level="QA_WARNING" help="doc-en_US/doc/messages/4646.html" severity="5">
   <text>The following type is not thrown by the virtual function: '%1s'.</text>
   <references>
    <reference source="ISO C++ Language [15.4/4]"/>
   </references>
  </message>
  <message id="4647" level="QA_WARNING" help="doc-en_US/doc/messages/4647.html" severity="7">
   <text>Jumping into a try block or handler.</text>
   <references>
    <reference source="ISO C++ Language [15/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4648" level="QA_WARNING" help="doc-en_US/doc/messages/4648.html" severity="5">
   <text>The type '%1s' of exception is a class with non-public base.</text>
   <references>
      </references>
  </message>
  <message id="4649" level="QA_WARNING" help="doc-en_US/doc/messages/4649.html" severity="5">
   <text>This function returning void has no external side effects.</text>
   <references>
      </references>
  </message>
  <message id="4650" level="QA_WARNING" help="doc-en_US/doc/messages/4650.html" severity="6">
   <text>Member function used in initialization list.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.7]"/>
   </references>
  </message>
  <message id="4651" level="QA_WARNING" help="doc-en_US/doc/messages/4651.html" severity="9">
   <text>Member object '%1s' of reference type must be initialized in initializer list.</text>
   <references>
      </references>
  </message>
  <message id="4652" level="QA_WARNING" help="doc-en_US/doc/messages/4652.html" severity="7">
   <text>'this' used in call to delegated constructor.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.7]"/>
    <reference source="ISO 2011 C++ Language [12.6.2]"/>
   </references>
  </message>
  <message id="4653" level="QA_WARNING" help="doc-en_US/doc/messages/4653.html" severity="2">
   <text>POD array member object '%1s' is not initialized in initializer list.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.5.5]"/>
    <reference source="Effective C++ 1st/2nd Edition [Item12]"/>
    <reference source="Effective C++ 3rd Edition [Item4]"/>
   </references>
  </message>
  <message id="4654" level="QA_WARNING" help="doc-en_US/doc/messages/4654.html" severity="2">
   <text>Base class initialized using lvalue semantics in move constructor.</text>
   <references>
      </references>
  </message>
  <message id="4655" level="QA_WARNING" help="doc-en_US/doc/messages/4655.html" severity="2">
   <text>Member initialized using lvalue semantics in move constructor.</text>
   <references>
      </references>
  </message>
  <message id="4656" level="QA_WARNING" help="doc-en_US/doc/messages/4656.html" severity="2">
   <text>Member initialized with same constant value in all constructors.</text>
   <references>
      </references>
  </message>
  <message id="4657" level="QA_WARNING" help="doc-en_US/doc/messages/4657.html" severity="6">
   <text>Move constructor does not reset moved-from resource handle.</text>
   <references>
      </references>
  </message>
  <message id="4658" level="QA_WARNING" help="doc-en_US/doc/messages/4658.html" severity="6">
   <text>Default move constructor used when class owns resources that need to be reset.</text>
   <references>
      </references>
  </message>
  <message id="4659" level="QA_WARNING" help="doc-en_US/doc/messages/4659.html" severity="2">
   <text>Move constructor resetting resources that class does not appear to own.</text>
   <references>
      </references>
  </message>
  <message id="4660" level="QA_WARNING" help="doc-en_US/doc/messages/4660.html" severity="7">
   <text>This is returning a reference to a dereferenced pointer allocated with new.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4661" level="QA_WARNING" help="doc-en_US/doc/messages/4661.html" severity="7">
   <text>This is potentially returning a reference to a dereferenced pointer allocated with new.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4662" level="QA_WARNING" help="doc-en_US/doc/messages/4662.html" severity="7">
   <text>This is returning a reference to dereferenced dynamic memory.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4670" level="QA_WARNING" help="doc-en_US/doc/messages/4670.html" severity="1">
   <text>This non const member function modifies data pointed to by a member.</text>
   <references>
    <reference source="Effective C++ 3rd Edition [Item3]"/>
   </references>
  </message>
  <message id="4671" level="QA_WARNING" help="doc-en_US/doc/messages/4671.html" severity="6">
   <text>This const member function modifies data pointed to by a member.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.13]"/>
   </references>
  </message>
  <message id="4672" level="QA_WARNING" help="doc-en_US/doc/messages/4672.html" severity="6">
   <text>This non-mutable lambda expression modifies data pointed to by a capture.</text>
   <references>
    <reference source="Industrial Strength C++ [Recommendations.7.13]"/>
   </references>
  </message>
  <message id="4673" level="QA_WARNING" help="doc-en_US/doc/messages/4673.html" severity="4">
   <text>This pointer to non const parameter declared via a typedef is not modified.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
   </references>
  </message>
  <message id="4674" level="QA_WARNING" help="doc-en_US/doc/messages/4674.html" severity="7">
   <text>This pointer to non const parameter declared via a typedef is not modified in all paths.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
   </references>
  </message>
  <message id="4675" level="QA_WARNING" help="doc-en_US/doc/messages/4675.html" severity="7">
   <text>This non const reference parameter declared via a typedef is not modified.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4676" level="QA_WARNING" help="doc-en_US/doc/messages/4676.html" severity="7">
   <text>This non const reference parameter declared via a typedef is not modified in all paths.</text>
   <references>
    <reference source="Industrial Strength C++ [Rules.7.8]"/>
   </references>
  </message>
  <message id="4677" level="QA_WARNING" help="doc-en_US/doc/messages/4677.html" severity="7">
   <text>This non const pointer parameter is an output parameter.</text>
   <references>
      </references>
  </message>
  <message id="4678" level="QA_WARNING" help="doc-en_US/doc/messages/4678.html" severity="7">
   <text>This function uses output parameters to return multiple values.</text>
   <references>
      </references>
  </message>
  <message id="4680" level="QA_WARNING" help="doc-en_US/doc/messages/4680.html" severity="5">
   <text>While loop counter '%1s' of fundamental type not compared with relational operator.</text>
   <references>
      </references>
  </message>
  <message id="4681" level="QA_WARNING" help="doc-en_US/doc/messages/4681.html" severity="5">
   <text>While loop counter '%1s' of class type not compared with relational operator.</text>
   <references>
      </references>
  </message>
  <message id="4682" level="QA_WARNING" help="doc-en_US/doc/messages/4682.html" severity="5">
   <text>While loop counter '%1s' of fundamental type modified not with ++, --, += or -=.</text>
   <references>
      </references>
  </message>
  <message id="4683" level="QA_WARNING" help="doc-en_US/doc/messages/4683.html" severity="5">
   <text>While loop counter '%1s' of fundamental type is incremented/decremented by non-constant value.</text>
   <references>
      </references>
  </message>
  <message id="4684" level="QA_WARNING" help="doc-en_US/doc/messages/4684.html" severity="5">
   <text>While loop counter '%1s' of class type modified not with ++, --, += or -=.</text>
   <references>
      </references>
  </message>
  <message id="4685" level="QA_WARNING" help="doc-en_US/doc/messages/4685.html" severity="5">
   <text>While loop counter '%1s' of class type is incremented/decremented by non-constant value.</text>
   <references>
      </references>
  </message>
  <message id="4686" level="QA_WARNING" help="doc-en_US/doc/messages/4686.html" severity="5">
   <text>Multiple scalar loop control variables found in 'do'/'while' loop: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="4687" level="QA_WARNING" help="doc-en_US/doc/messages/4687.html" severity="5">
   <text>This 'for' loop can be written using standard algorithms or as a range-based 'for' loop.</text>
   <references>
      </references>
  </message>
  <message id="4688" level="QA_WARNING" help="doc-en_US/doc/messages/4688.html" severity="5">
   <text>This hygienic 'for' loop can be written as a parallel algorithm.</text>
   <references>
      </references>
  </message>
  <message id="4689" level="QA_WARNING" help="doc-en_US/doc/messages/4689.html" severity="3">
   <text>This is a 'do' statement.</text>
   <references>
      </references>
  </message>
  <message id="4690" level="QA_INFORMATION" help="doc-en_US/doc/messages/4690.html" severity="0">
   <text>Class RTTI used here.</text>
   <references>
      </references>
  </message>
  <message id="4691" level="QA_WARNING" help="doc-en_US/doc/messages/4691.html" severity="3">
   <text>The initialiser expression in this range based for loop has multiple function calls.</text>
   <references>
      </references>
  </message>
  <message id="4692" level="QA_WARNING" help="doc-en_US/doc/messages/4692.html" severity="3">
   <text>This is a non range based loop.</text>
   <references>
      </references>
  </message>
  <message id="4693" level="QA_WARNING" help="doc-en_US/doc/messages/4693.html" severity="3">
   <text>This is a 'do' statement expanded from a function-like macro with an always-false condition.</text>
   <references>
      </references>
  </message>
  <message id="4695" level="QA_WARNING" help="doc-en_US/doc/messages/4695.html" severity="3">
   <text>Catch handlers enclosing algorithms with execution policies shall include std::bad_alloc.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4696" level="QA_WARNING" help="doc-en_US/doc/messages/4696.html" severity="3">
   <text>This function, registered to be called at program termination, may throw an exception.</text>
   <references>
      </references>
  </message>
  <message id="4697" level="QA_WARNING" help="doc-en_US/doc/messages/4697.html" severity="3">
   <text>Function passed as extern "C" parameter has not been declared as non-throwing.</text>
   <references>
      </references>
  </message>
  <message id="4698" level="QA_WARNING" help="doc-en_US/doc/messages/4698.html" severity="3">
   <text>Functions passed to std::atexit or std::at_quick_exit has not been declared as non-throwing.</text>
   <references>
      </references>
  </message>
  <message id="4700" level="QA_WARNING" help="doc-en_US/doc/messages/4700.html" severity="3">
   <text>Metric value out of threshold range: %1s = %2s</text>
   <references>
      </references>
  </message>
  <message id="4810" level="QA_WARNING" help="doc-en_US/doc/messages/4810.html" severity="1">
   <text>Invalid annotation: tag '%1s' is not defined subsequently in this file.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4811" level="QA_WARNING" help="doc-en_US/doc/messages/4811.html" severity="1">
   <text>The start of the range '%1s', starts and ends at the same location.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4812" level="QA_WARNING" help="doc-en_US/doc/messages/4812.html" severity="1">
   <text>'%1s' not allowed here.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4813" level="QA_WARNING" help="doc-en_US/doc/messages/4813.html" severity="1">
   <text>The location annotation is not preceded by a suppression annotation which refers to it.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4814" level="QA_WARNING" help="doc-en_US/doc/messages/4814.html" severity="1">
   <text>A location annotation cannot itself have a location specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4815" level="QA_WARNING" help="doc-en_US/doc/messages/4815.html" severity="1">
   <text>The specified product name is invalid.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4816" level="QA_WARNING" help="doc-en_US/doc/messages/4816.html" severity="1">
   <text>Justification comments are not allowed in location annotations.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4817" level="QA_WARNING" help="doc-en_US/doc/messages/4817.html" severity="1">
   <text>Justification comments are not allowed to be empty.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4818" level="QA_WARNING" help="doc-en_US/doc/messages/4818.html" severity="1">
   <text>This location specifier is not valid with '%1s' annotation.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4819" level="QA_WARNING" help="doc-en_US/doc/messages/4819.html" severity="1">
   <text>Redefinition of annotation for macro '%1s'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4820" level="QA_WARNING" help="doc-en_US/doc/messages/4820.html" severity="1">
   <text>Annotation kind is expected.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4821" level="QA_WARNING" help="doc-en_US/doc/messages/4821.html" severity="1">
   <text>Colon is expected.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4822" level="QA_WARNING" help="doc-en_US/doc/messages/4822.html" severity="1">
   <text>Tag name is expected.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4823" level="QA_WARNING" help="doc-en_US/doc/messages/4823.html" severity="1">
   <text>Annotation syntax error.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4825" level="QA_WARNING" help="doc-en_US/doc/messages/4825.html" severity="1">
   <text>Unexpected character.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4826" level="QA_WARNING" help="doc-en_US/doc/messages/4826.html" severity="1">
   <text>Message specification is incomplete or missing.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4827" level="QA_WARNING" help="doc-en_US/doc/messages/4827.html" severity="1">
   <text>Tag name is not allowed in the message specification of continuous suppression annotation.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4828" level="QA_WARNING" help="doc-en_US/doc/messages/4828.html" severity="1">
   <text>Invalid usage of predefined location tag.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4829" level="QA_WARNING" help="doc-en_US/doc/messages/4829.html" severity="1">
   <text>Invalid character in message specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4830" level="QA_WARNING" help="doc-en_US/doc/messages/4830.html" severity="1">
   <text>Unexpected left bracket in message specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4831" level="QA_WARNING" help="doc-en_US/doc/messages/4831.html" severity="1">
   <text>Unexpected right bracket in message specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4832" level="QA_WARNING" help="doc-en_US/doc/messages/4832.html" severity="1">
   <text>Unexpected left bracket in tag name.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4833" level="QA_WARNING" help="doc-en_US/doc/messages/4833.html" severity="1">
   <text>Unexpected right bracket in tag name.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4834" level="QA_WARNING" help="doc-en_US/doc/messages/4834.html" severity="1">
   <text>Expected left bracket in product specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4835" level="QA_WARNING" help="doc-en_US/doc/messages/4835.html" severity="1">
   <text>Expected right bracket in product specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
 </messages>
</component>
