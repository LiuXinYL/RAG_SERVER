<?xml version="1.0" encoding="UTF-8"?>
<!--

  NB:  Do NOT modify this file.


  This file is autogenerated from scripts in qa_libs, it generated from:
    Option_Description.xml
    Option_Description_Language-cc_CC.xml
    Component_Description_qac.xml

-->
<component name="qac" displayname="QAC" version="12.1.0" type="primary_analyzer" parser_licence="qac-psr" xmlversion="2.0.0">
 <target_languages>
  <language target="C"/>
 </target_languages>
 <description/>
 <component_help>
  <path pdf="doc-en_US/doc/component_manual/pdf/qac-manual.pdf"/>
  <path html="doc-en_US/doc/component_manual/html/qac-manual.html"/>
 </component_help>
 <icon path="doc-en_US/Resources/Images/qac-logo.png"/>
 <executable path="bin/qac" output_type="db" output_version="1.0.0">
  <returncodes>
   <success description="Parse Success" number="0"/>
   <hard_error description="Parse Failure" number="1"/>
   <license_error description="License Failure" number="11"/>
   <general_codes>
    <code name="deployment_error" description="Deployment Error" number="10"/>
    <code name="system_error" description="System Error" number="18"/>
    <code name="fatal_error" description="Fatal Error" number="19"/>
    <code name="filesystem_error" description="Filesystem Error" number="22"/>
   </general_codes>
   <default description="Unknown Error: Please Contact Programming Research Ltd."/>
  </returncodes>
  <interface bom="yes" call_type="file" exclusive_scheduling="no">
   <settingsfile option="-via">
    <item content="cct_content"/>
    <item content="system_includes" specified_by="-i "/>
    <item content="project_includes" specified_by="-i "/>
    <item content="project_defines" specified_by="-d "/>
    <item content="active_messages" specified_by="-o "/>
    <item content="compiler_map" option_key="coderegex" specified_by="-cre "/>
    <item content="source_file"/>
   </settingsfile>
   <connection_string option="-url"/>
   <output_directory option="-op"/>
  </interface>
  <component_options>
   <cli_option name="-align " shortcut="-a " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-align <i>type</i>=<i>bytes</i>]]></argument_syntax>
    <default_setting>-align "char=1" -align "short=2" -align "int=4" <br/>
    -align "long=4" -align "longlong=8" -align "float=4" <br/>
    -align "double=8" -align "ldouble=8" -align "codeptr=4" <br/>
     <b>QAC++</b>: <br/>
    -align "bool=1" -align "wchar_t=2" -align "default_new=16"<br/>
     <b>QAC</b>: <br/>
    -align "_Bool=1"
    </default_setting>
    <description><![CDATA[
        <a id="Align">
        Determines the alignment requirement of each primitive type.
        </a>

            <p>
              The alignment of data types may be constrained by your
              hardware and compiler. For example, your environment may
              allocate a char at any memory address, but require an
              int to start on a four-byte boundary. Such constraints
              impose restrictions on the validity of pointer
              conversions. For example, it might be valid to cast a
              pointer to int to a pointer to char but, invalid to do
              the reverse. The analyzer generates warnings that
              identify dangerous pointer casts.
            </p>
            <p>
              See the component manual for details on the product specific alignment options.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-alwayssearchincludedirectoriesfirst" shortcut="-asidf" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-alwayssearchincludedirectoriesfirst[{+|-}]]]></argument_syntax>
    <default_setting>-alwayssearchincludedirectoriesfirst-</default_setting>
    <description><![CDATA[
        <a id="AlwaysSearchIncludeDirectoriesFirst">When enabled, the search for include directive filenames will start in the include directories before searching the directory of the including file.
        </a>

            <p>
              Include directories are directories whose paths are
              specified via the -i option.
            </p>
            <p>
              The -alwayssearchincludedirectoriesfirst option affects
              the interpretation of include directives whose file path
              is enclosed in double quotes, where by default the
              analyzer will search the directory of the including file
              before the include directories.  For include directives
              whose file path is enclosed in angle brackets, the
              include directories are always searched before the
              directory of the including file.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-arithrsh" shortcut="-ar" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-arithrsh[{+|-}]]]></argument_syntax>
    <default_setting>-arithrsh-</default_setting>
    <description><![CDATA[
        <a id="ArithRsh">The -arithrsh option defines whether the right shift operator &gt;&gt; performs an arithmetic shift (-arithrsh+) or a logical shift (-arithrsh-).
        </a>

            <p>
              The ISO Standard states that the result of an arithmetic
              right shift on a negative signed number is
              implementation-defined. That is, each individual
              compiler has to specify the effect of shifting negative
              values right.
            </p>
            <p>
              This option is included in the analyzer to support the
              general bit-field treatment of data types in the common
              dataflow module.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-bitsigned" shortcut="-bits" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-bitsigned[{+|-}]]]></argument_syntax>
    <default_setting>-bitsigned+</default_setting>
    <description><![CDATA[
        <a id="BitSigned">Defines whether plain integer bit-fields are treated as signed int (-bitsigned+) or unsigned int (-bitsigned-).
        </a>

            <p>
              The ISO Standard states that the sign of a bit-field
              that is not explicitly <i>signed</i> or <i>unsigned</i>
              is implementation-defined.
            </p>
            <p>For Example:</p>
            <pre><code>
struct
{
  signed int sbit : 3;   /* holds values between -4 and +3       */
  unsigned int ubit : 5; /* holds values between 0 and 31        */
  int bit : 4;           /* may hold values between -8 and +7 or
                            between 0 and 15                     */
} x;
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c90nolonglongliterals" shortcut="-c90noll" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c90nolonglongliterals[{+|-}]]]></argument_syntax>
    <default_setting>-c90nolonglongliterals-</default_setting>
    <description><![CDATA[
        <a id="C90NoLongLongLiterals">Defines whether type <code>long long</code> will be used for literal constants.
        </a>

            <p>
              The type <code>long long</code> was introduced in C99. In older compilers where the
              type did not exist, preprocessing arithmetic used the <code>long</code> and <code>unsigned
              long</code> types instead, and "oversized" decimal integer literals with a value too large
              to fit in the range of <code>long</code> would take the type <code>unsigned long</code>.
            </p>
            <p>
              This option restores these behaviours, forcing the selection of the type <code>long</code>
              in preference to <code>long long</code> for literal constants.
            </p>
            <p>
              The type itself will remain available through the <code>long long</code> type specifier.
            </p>
            <p>For Example:</p>
            <pre><code>
3000000000    // when -c90nolonglongliterals+ is set,
3000000000L   // and 'long' is 32-bit, these will take the type 'unsigned long'

#if 34L + 64U * 3LL   // when -c90nolonglongliterals+ is set,
#endif                // preprocessor arithmetic will evaluate in long,
                      // regardless of suffix

long long x = 0;      // x always has type 'long long'
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c17inttypedenumerators" shortcut="-c17intenum" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c17inttypedenumerators[{+|-}]]]></argument_syntax>
    <default_setting>-c17inttypedenumerators-</default_setting>
    <description><![CDATA[
        <a id="C17IntTypedEnumerators">Defines whether enum constants unconditionally have the type <code>int</code>.
        </a>

            <p>
              Enumeration constants for an enum type with no underlying type (which is all enum types
              until C23) have the type <code>int</code>, unless a value of a member constant in the
              enumeration does not fit in the <code>int</code> type, in which case the behavior in C90 through
              C17 is implicitly undefined. From C23, if <emph>any</emph> member constant in the enumeration
              has a value which does not fit in the <code>int</code> type, <emph>all</emph> of the constants
              in the enumeration take the enumeration's underlying type.
            </p>
            <p>
              This does not affect enumerations with an explicitly-specified underlying type, which
              is a new feature in C23. The member constants of such enumerations always take the
              underlying type.
            </p>
            <p>For Example:</p>
            <pre><code>
// with -intrinsictype "enum=unsigned long"
// so the underlying type will always go to unsigned long

// all members cleanly fit in int
// so the type of A, B and C is int
enum E1 {
  A = 1,
  B = 2,
  C = 3,
};

// while D fits in int, E does not and F increments
// when -c17inttypedenumerators-, the type of D, E and F is unsigned long
// when -c17inttypedenumerators+, the type of D, E and F is int
//   and the values of E and F are implicitly undefined
enum E2 {
  D = 1,
  E = 3000000000,
  F,
};

// the type of G, H and K is unconditionally unsigned short, because
// the explicit underlying type overrides -intrinsictype,
// and there is no need to deduce a type from the values
enum E3 : unsigned short {
  G = 1,
  H = 2,
  K = 3,
};
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c23auto" shortcut="-c23a" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c23auto[{+|-}]]]></argument_syntax>
    <default_setting>-c23auto-</default_setting>
    <description><![CDATA[
        <a id="C23Auto">When enabled, type inference using the <code>auto</code> keyword will be enabled.
        </a>

            <p>
              The 2023 ISO Standard allows declarations using the <i>auto</i> storage-class-specifier
              to omit a type-specifier, in which case the type of the object being declared is inferred
              from the initializer.
            </p>
            <p>
              In earlier language versions this storage-class specifier did nothing, and the object
              would be defined with type <code>int</code> when the type-specifier was omitted.
            </p>
            <p>
              Additionally, the C23 Standard removed the Constraint that the <code>auto</code> specifier
              may only be used at block scope. Using the <code>auto</code> specifier at file scope is no
              longer an error (even if the type is not inferred) when this option is enabled.
            </p>
            <p>
              This option is off by default until C23 is released.
            </p>
            <p>For Example:</p>
            <pre><code>
void foo()
{
  // has type int in C17 and earlier, has type float with -c23auto+
  auto x = 1.0f;
}

// File scope: succeeds with -c23auto+
auto int i;
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-c23constexpr" shortcut="-c23cx" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-c23constexpr[{+|-}]]]></argument_syntax>
    <default_setting>-c23constexpr-</default_setting>
    <description><![CDATA[
        <a id="C23Constexpr">When enabled, the <code>constexpr</code> keyword will be enabled.
        </a>

            <p>
              The 2023 ISO Standard allows objects to be declared using the <code>constexpr</code>
              storage-class-specifier, which allows their value to be used in any constant
              expression context (such as a static assertion, global initializer, or array
              designator).
            </p>
            <p>
              Variables declared with this storage class are still objects with an address,
              scope, and lifetime, unlike macros.
            </p>
            <p>
              This storage class did not exist in previous versions of the language. This
              option is off by default in case of code using the keyword <code>constexpr</code>
              as an identifier, as it was a valid identifier in earlier language versions.
            </p>
            <p>For Example:</p>
            <pre><code>
// at file scope this will have internal linkage
constexpr int K = 10;

// file scope array cannot be variable-length, but this works in C23
int arr[K];

int const * kp = &amp;K; // addressable
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-coderegex " shortcut="-cre " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-coderegex s/<i>regex</i>/<i>replacement</i>/<i>modifiers</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="CodeRegEx">When specified, this option can be used to replace sections of code that match a regular expression.
        </a>

            <p class="Note">
              <br />Characters such as single or double quotes,
              brackets and '.' have special meaning in regular
              expressions.  Depending on the intended meaning of such
              characters, standard switching of these characters may
              be required.
            </p>
            <p>
              When specified, this option can be used to replace
              sections of code that match the regular expression.
              This may be particularly useful for:
            </p>
            <ul>
              <li>Working around unsupported compiler extensions,</li>
              <li>Automatically controlling message visibility for auto generated code,</li>
              <li>Applying custom <i>non-intrusive</i> suppressions.</li>
            </ul>
            <p><b>Optional Modifiers:</b>
              <br />The following modifiers are supported:
            </p>
            <ul>
              <li>[l] Do not pad replacement expression with newlines</li>
              <li>[c] Do not pad replacement expression with spaces</li>
            </ul>
            <p>
              Code replacement is particularly useful for handling
              non-standard language extensions.  For example, the
              <i>__property</i> extension can be supported using the
              following:
            </p>
            <pre>
-coderegex="s/__property([^=]*)=[^;]*;/\1;/"
</pre>
            <p>
              The following source will match the regular expression:
            </p>
            <pre><code>
__property long var
  = {read = get_Creator};
</code></pre>
            <p>
              The following tokens will be parsed by the tools:
            </p>
            <pre><code>
long var;
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-comment " shortcut="-co " cumulative="no" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-comment {<i>a|n|i</i>}]]></argument_syntax>
    <default_setting>-comment n</default_setting>
    <description><![CDATA[
        <a id="Comment">Determines how 'comment density metric' is calculated (STCDN).
        </a>

            <p>
              To calculate this metric, the number of characters in
              comments are counted. The analyzer will count characters
              from:
            </p>
            <ul>
              <li>all comments, (a),</li>
              <li>all comments except for those from headers, (n),</li>
              <li> inline or internal comments (i). These are comments within functions and comments that annotate a
              line of code (comments that are on the same line as code at file scope).</li>
            </ul>
          
        ]]></description>
   </cli_option>
   <cli_option name="-d " shortcut="-d " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-d <i>ident</i>[=[<i>value</i>]]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Defines">Defines macros for use in parsing.</a>

            <p>
              The compilation of source code is often controlled by
              macros supplied to the compiler through command line
              options. Macros can be supplied on command line using
              -d.  Command line macros can also be undefined using the
              -undef option.
            </p>
            <p>
              Macros may also be specified using the -systemdefine option.
            </p>
            <p>
              There are three ways to define a macro:
            </p>
            <pre><code>
#define ident 1        /* Command line equivalent: -d ident       */
#define ident value    /* Command line equivalent: -d ident=value */
#define ident          /* Command line equivalent: -d ident=      */
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-echo " shortcut="-e " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-echo <i>text</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Echo">Specifies that <i>text</i> is echoed to the console.
        </a>

            <p>This option can be used to show the configuration files that are being referenced.</p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-eewidth " shortcut="-eewidth " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-eewidth <i>value</i>]]></argument_syntax>
    <default_setting>-eewidth 8</default_setting>
    <description><![CDATA[
        <a id="EmbedElementWidth">Specifies the width in bits of each individual element in a binary resource.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-embedlimit " shortcut="-embedlimit " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-embedlimit <i>value</i>]]></argument_syntax>
    <default_setting>-embedlimit 1000000</default_setting>
    <description><![CDATA[
        <a id="EmbedLimit">Specifies the maximum number of elements that can be read from a binary resource.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-embed " shortcut="-embed " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-embed <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="EmbedPath">Specifies a search path for binary resource files.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-enabledataflow" shortcut="-ed" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-enabledataflow[{+|-}]]]></argument_syntax>
    <default_setting>-enabledataflow-</default_setting>
    <description><![CDATA[
        <a id="EnableDataflow">Turns on the added dataflow (DF^2) analysis functionality.
        </a>

            <p>
              The term "<i>dataflow analysis</i>" refers to a range of
              techniques in which static analysis of source code is
              used to analyze run-time behavior of a program. Dataflow
              analysis can identify a class of problems which may
              range from serious issues such as undefined behavior to
              conditions which are of interest simply because they are
              frequently associated with coding errors.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-encoding " shortcut="-en " cumulative="no" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-encoding <i>encoding</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Encoding">Specifies the character set of the source file being analyzed.
        </a>

            <p>
              The analyzer has the ability to read files encoded with
              many different character sets.  The name of the
              character set to use for a given file can be specified
              using the <code>-encoding</code> option.
            </p>
            <p class="Note">
              <br />The encoding option is ignored for source
              files that use a Byte Order Mark (BOM).  These files
              will always be read using using the UTF variant
              specified by the BOM.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-errnosettingfunction " shortcut="-esf " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-errnosettingfunction <i>function</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ErrnoSettingFunction">Specifies name of the errno-setting function.
        </a>

            <p>
              The function specified by <i>function</i> will be
              considered to set <code>errno</code> and so may result
              in messages warning that errno has not been appropriately zeroed or checked.
            </p>
            <p>For example:</p>
            <pre><code>
void foo(void)
{
  extern void bar (void);
  bar(); // Generates diagnostics with -errnosettingfunction bar
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-errorstatusreturningfunction " shortcut="-erf " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-errorstatusreturningfunction <i>function</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ErrorStatusReturningFunction">Specifies the name of a function that returns an error status flag.
        </a>

            <p>
              The function specified by <i>function</i> will be
              considered to return a value representing a success flag
              or error status. If it is not checked immediately,
              a warning will be emitted.
            </p>
            <p>For example:</p>
            <pre><code>
void foo(void)
{
  extern int bar (void);
  bar(); // Generates a warning with -errorstatusreturningfunction bar

  if (bar () == 0) { } // No warning, error status checked
}
</code></pre>
            <p>
              If a number is specified in parentheses immediately
              after the name, it is interpreted as the index (starting
              from 1) of an out-parameter which stores error status,
              rather than the return value itself:
            </p>
            <pre><code>
void foo2(void)
{
  extern void baz (int * status, int value);

  int status1;
  baz (&amp;status1, 42); // Generates a warning with
                      // -errorstatusreturningfunction "baz(1)"

  int status2;
  baz (&amp;status2, 42); // No warning, status2 checked
  if (status2 == 0) { }
}
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-extensions " shortcut="-ex " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-extensions {<i>ANSIPC, PC, ASM, VMS, C++, TAGLESS, DOLLAR, LONGLONG, ALL</i>}]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Extensions">Specifies the extension class to be used in analysis.
        </a>

            <p>
              The analyzer supports a variety of compiler extensions
              that may be enabled using this option. On the command
              line, you can enable all the extensions by setting the
              option to -ex+ or -ex all.
            </p>
            <p>
              The analyzer recognizes the following extension classes:
            </p>
            <ul>
              <li>
                <p>
                  <b>ansipc:</b> Backslash (\) is permitted within filepaths.
                </p>
                <p>
                  The keywords __near, __far, __huge, __cdecl,
                  __pascal, and __fortran are recognized and ignored
                  with a warning message being issued.
                </p>
              </li>
              <li>
                <p>
                  <b>PC:</b> The keywords near, far, huge, cdecl,
                  pascal, and fortran are recognized and ignored,
                  with a warning message being issued.
                </p>
              </li>
              <li>
                <p>
                  <b>asm:</b> Recognizes the assembler code
                  directives #asm, #endasm and asm("string");. It
                  enables a number of inline assembler constructs to
                  be parsed and ignored.
                </p>
              </li>
              <li>
                <p>
                  <b>VMS:</b> $ is legal in identifiers.
                </p>
                <p>
                  Filenames appearing in #include directives are mapped to lower case.
                </p>
              </li>
              <li>
                <p>
                  <b>C++:</b> The reference operator &amp; is recognized in declarations but has no semantic effect.
                </p>
              </li>
              <li>
                <p>
                  <b>tagless:</b> The names of tag types can be looked up as though they were declared in the
                                  ordinary namespace, as though they had been declared with a typedef.
                </p>
              </li>
              <li>
                <p>
                  <b>dollar:</b> $ is legal in identifiers.
                </p>
              </li>
            </ul>
          
        ]]></description>
   </cli_option>
   <cli_option name="-foldplainchar" shortcut="-fpc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-foldplainchar[{+|-}]]]></argument_syntax>
    <default_setting>-foldplainchar-</default_setting>
    <description><![CDATA[
        <a id="FoldPlainChar">When enabled, the type 'pointer to char' is treated as semantically equivalent to either type 'pointer to signed char' or type 'pointer to unsigned char', depending on how the signedness of plain char is configured with the -unsignedchar option.
        </a>

            <p>
              The -foldplainchar option operates in conjunction with
              the -unsignedchar option.  Although the plain char type
              may be implemented as signed or unsigned, it is
              important to understand that it remains a distinct
              datatype and is strictly a different type from either
              signed char or unsigned char. This means that even if
              plain char is implemented as a signed type, it is not
              legitimate to initialize an array of type signed char
              with a literal character string, for example, "ABC". The
              only way to achieve this is to apply an explicit cast
              (signed char *) to the literal.
            </p>
            <p>
              This distinction is often considered to be pedantic and
              it is seldom observed strictly by compilers. If this
              option is set, a conversion from a "pointer to char" to
              either "pointer to unsigned char" or "pointer to signed
              char" will not raise the constraint message 0563 "[C]
              Right operand of assignment does not have a compatible
              pointer type."
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-forceinclude " shortcut="-fi " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-forceinclude <i>filename</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ForceInclude">Causes <i>filename</i> to be implicitly included at the beginning of each translation unit.
        </a>

            <p>
              This method of "force-including" a file can be sometimes a useful way of defining macros and other project settings.
            </p>
            <p>
              If the specified filename is not found, then the -i and -si options will be used to search for the file.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-forgetall " shortcut="-f " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-forgetall <i>option</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ForgetAll">Resets previous configuration settings for <i>option</i>.
        </a>

            <p>
              Some options are cumulative in their action in that successive usage of the option adds extra settings rather than replacing the previous ones.
            </p>
            <p>For example:</p>
            <pre>
... -q path1 -q path2 -forgetall q -q path3 filename
</pre>
            <p>
              For this argument list, the <i>path1</i> and <i>path2</i> options will be discarded and only <i>path3</i> will be quieted.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-help" shortcut="-h" cumulative="no" argtype="flag" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-help[{+|-}]]]></argument_syntax>
    <default_setting>-help-</default_setting>
    <description><![CDATA[
        <a id="Help">When enabled, a basic help description for the component and its available configuration options is displayed.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-hidemacrowarnings" shortcut="-hmw" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-hidemacrowarnings[{+|-}]]]></argument_syntax>
    <default_setting>-hidemacrowarnings-</default_setting>
    <description><![CDATA[
        <a id="HideMacroWarnings">When enabled, warnings generated for code expanded from macros will be hidden.
        </a>

            <p>Messages suppressed as a result of this option will appear as suppressed in display tools.</p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-i " shortcut="-i " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-i <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Includes">Specifies a search path for header files.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-indentlevel " shortcut="-il " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-indentlevel <i>value</i>]]></argument_syntax>
    <default_setting>-indentlevel 0</default_setting>
    <description><![CDATA[
        <a id="IndentLevel">Specifies the amount of space used to indent code.
        </a>

            <p>
              Message 2215 will be issued if the code indentation differs from this value.
              With the value set to zero (default), the analyzer will not enforce a
              specific indentation depth, but it will identify inconsistent indentation
              and will issue message 2201.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-intrinsictype " shortcut="-it " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-intrinsictype {size_t | ptrdiff_t | wchar_t | enum | ... }=datatype]]></argument_syntax>
    <default_setting>-intrinsictype 
    size_t="unsigned int" <br/>
     <b>QAC++</b> : <br/>
    ptrdiff_t="int" <br/>
    enum="int, unsigned int, long, unsigned long, long long, unsigned long long"<br/>
     <b>QAC</b>: <br/>
    ptrdiff_t="long" <br/>
    wchar_t="unsigned char" <br/>
    enum="int"<br/>
    </default_setting>
    <description><![CDATA[
        <a id="IntrinsicType">Determines the underlying type and semantics of types during parsing and analysis.</a>

            <p>
              Determines the type associated with the sizeof operator (size_t), the result of pointer subtraction (ptrdiff_t), the behaviour of wchar_t, and the underlying type to use for enumerations.
              For more information on the use of the intrinsictype option, see the component manual.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-k+r " shortcut="-k+r " cumulative="no" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-k+r <i>sun, a, b, c, e, g, i, l, n, p, s, t, u, v, x</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="KandR">Identifies ISO language features that should be avoided if using a K&amp;R compiler.</a>

            <p>
              If you want your code to be compliant with K&amp;R
              standards, you will need to restrict your usage of the C
              language to exclude all these features.
            </p>
            <p>
              Specifying a construct with this option will generate
              one of the K&amp;R messages when the analyzer encounters
              that construct. If your code does not need to be
              compatible with pre-ISO standards, do not set this
              option.
            </p>
            <p>
              The following options can be specified in any order:
            </p>
            <ul>
              <li><b>sun:</b> enforces compatibility with the Sun K&amp;R cc compiler under SunOS 4.1 or earlier. This is equivalent to: -k+r acegipstux.</li>
              <li><b>a:</b> initializing locally-declared structures and unions.</li>
              <li><b>b:</b> bit-field</li>
              <li><b>c:</b> string concatenation</li>
              <li><b>e:</b> #error</li>
              <li><b>g:</b> glue operator ##</li>
              <li><b>i:</b> signed keyword</li>
              <li><b>l:</b> #elif</li>
              <li><b>n:</b> enumerated types</li>
              <li><b>p:</b> function prototypes</li>
              <li><b>s:</b> stringify operator #</li>
              <li><b>t:</b> const and volatile</li>
              <li><b>u:</b> unary +</li>
              <li><b>v:</b> void keyword</li>
              <li><b>x:</b> Initializing extern variables.</li>
            </ul>
          
        ]]></description>
   </cli_option>
   <cli_option name="-list " shortcut="-list " cumulative="yes" argtype="path" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-list <i>filename</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="List">Used to specify a file list containing the source files and their output paths that are to be included in the analysis.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-maxerrors " shortcut="-maxerr " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-maxerrors <i>value</i>]]></argument_syntax>
    <default_setting>-maxerrors 0</default_setting>
    <description><![CDATA[
        <a id="MaxErrors">Determines the number of hard errors that will cause the analysis to stop.
        </a>

            <p>
              The default of zero indicates that the parser will
              attempt to continue to completion regardless of hard
              errors encountered.
            </p>
            <p>
              The parser will issue return code 1 when any hard errors
              are encountered. This setting merely decides whether
              parsing will continue to source completion.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-maxlinelength " shortcut="-mll " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-maxlinelength <i>value</i>]]></argument_syntax>
    <default_setting>-maxlinelength 0</default_setting>
    <description><![CDATA[
        <a id="MaxLineLength">Specifies the maximum physical line length in the source code, before the line-splicing phase of translation.
        </a>

            <p>
              For a non zero positive value, the length of each source
              line is checked to ensure that it is less than the
              specified value.  When set to zero no checking is
              performed.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-maxmacrohistory " shortcut="-maxmh " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-maxmacrohistory <i>value</i>]]></argument_syntax>
    <default_setting>-maxmacrohistory 8192</default_setting>
    <description><![CDATA[
        <a id="MaxMacroHistory">Limit on the number of entries to store in the macro expansion history of a source location.
        </a>

            <p>
              By default, history information is stored for tokens expanded from macros in order to
              provide better location reporting and to perform some analyses of library objects defined
              as macros. However, this can use up a lot of storage if macros are heavily used to create
              nested expansions.
            </p>
            <p>
              Only the specified number of history entries will be stored. If macro expansion is more
              deeply nested, preprocessing itself will not be affected, but the "expanded from here"
              history will not be available for error reporting. Some analyses that check whether an
              expression originates from a macro may fail to work if the expression is produced at an
              unrecorded level of nesting.
            </p>
            <p>
              If zero is the value specified, no macro history will be recorded at all. This may be
              useful for some machine-generated files. The value is always zero for expansions originating
              in quieted headers.
            </p>
            <p>
              This limit can also be adjusted within a file by means of the
              <code>PRQA_MAX_MACRO_HISTORY</code> pragma.
              This may be useful when a certain section within a TU uses deep nesting.
            </p>
            <pre><code>
#define D NULL
#define C D
#define B C
#define A B

void * p1 = A;    // if -maxmacrohistory is less than 5, this will be seen as '= 0'
void * p2 = NULL; // if -maxmacrohistory is zero, this will be seen as '= 0'

// set the macro history length limit to 3, regardless of previous options
#pragma PRQA_MAX_MACRO_HISTORY 3
// change the macro history length limit to 8
#pragma PRQA_MAX_MACRO_HISTORY 8
</code></pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-namelength " shortcut="-na " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-namelength <i>value</i>]]></argument_syntax>
    <default_setting>-namelength 63</default_setting>
    <description><![CDATA[
        <a id="NameLength">Determines the number of characters in valid internal and preprocessing identifiers.
        </a>

            <p>
              Message number 0779 will be issued for each internal
              identifier encountered that is not distinct within the
              number of characters specified.
            </p>
            <p>
              Message number 0787 will be issued for each preprocessing
              identifier encountered that is not distinct within the
              number of characters specified.
            </p>
            <p>
              The ISO Standard states that compilers should treat at
              least the first 31 characters of internal identifiers
              and macro names as significant.
              Some implementations may distinguish them
              in more than 31 characters but it is not advisable to
              depend on this extension.
            </p>
            <p>
              Programming standards may choose to restrict the
              declaration of identifiers so that they are distinct
              within a smaller number of characters.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-namerulefile " shortcut="-nrf " cumulative="no" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-namerulefile <i>filename</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="NameRuleFile">Specifies the file containing the naming convention rules to be applied by namecheck.
        </a>

            <p>
              The name rules file contains the rules to be used by the
              Name Checker. As a minimum, each rule should specify the
              pattern (Regular Expression) that is to be applied to
              each type of identifier (macros, functions, typedefs,
              variables, etc).  You can have different rules for
              different types of identifier.
            </p>
            <p>
              See the Configuration File section of the Namecheck user manual.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-nomsg " shortcut="-n " cumulative="yes" argtype="numeric_list" category="noncomponent" required="no" inheritable="no">
    <argument_syntax><![CDATA[-nomsg <i>message_number_list</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="NoMsg">Suppresses the display <i>and</i> generation of the specified messages.
        </a>

            <p>
              Message numbers can be specified individually, or as a
              list, range or a combination of both:
            </p>
            <ul>
              <li>-nomsg 2356</li>
              <li>-nomsg 1234,1236,1240</li>
              <li>-nomsg 2111,2200-2300</li>
            </ul>
            <p class="Note">
              <br />This option is only available at the file or directory level.  The enabling or disabling of diagnostics at the  component level is managed through the Rule Configuration File (RCF).
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-only " shortcut="-o " cumulative="yes" argtype="numeric_list" category="noncomponent" required="no" inheritable="no">
    <argument_syntax><![CDATA[-only <i>message_number_list</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Only">Only the specified warning messages will be generated.
        </a>

            <p>
              Message numbers can be specified individually, or as a
              list, range or a combination of both:
            </p>
            <ul>
              <li>-only 2356</li>
              <li>-only 1234,1236,1240</li>
              <li>-only 2111,2200-2300</li>
            </ul>
            <p class="Note">
              <br />This option is only available at the file or directory level.  The enabling or disabling of diagnostics at the  component level is managed through the Rule Configuration File (RCF).
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-outputpath " shortcut="-op " cumulative="no" argtype="path" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-outputpath <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="OutputPath">Determines the path to which all output files will be generated during analysis, and, by extension, the location from which all files will be read as the input for RCMA analysis.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-ppfilename" shortcut="-ppf" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-ppfilename[{+|-}]]]></argument_syntax>
    <default_setting>-ppfilename-</default_setting>
    <description><![CDATA[
        <a id="PpFilename">When enabled, comments are introduced into the preprocessed file which indicate the source file and line number from which the code was derived.
        </a>

            <p>
              This option only applies when generating preprocessed output, enabled using -pplist.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-pplist" shortcut="-ppl" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-pplist[{+|-}]]]></argument_syntax>
    <default_setting>-pplist-</default_setting>
    <description><![CDATA[
        <a id="PpList">When enabled, a preprocessed file is generated in the output directory with a .i file extension.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-ppmetrics" shortcut="-ppm" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-ppmetrics[{+|-}]]]></argument_syntax>
    <default_setting>-ppmetrics-</default_setting>
    <description><![CDATA[
        <a id="PpMetrics">This option is designed to be used with file metrics, and governs the inclusion of header file information in the calculation of metrics.
        </a>

            <ul>
              <li>-ppmetrics+ results in all code/tokens in included header files being used when calculating metrics.</li>
              <li>-ppmetrics- results in code/tokens in included header files being ignored when calculating metrics.</li>
            </ul>
          
        ]]></description>
   </cli_option>
   <cli_option name="-pponly" shortcut="-ppo" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-pponly[{+|-}]]]></argument_syntax>
    <default_setting>-pponly-</default_setting>
    <description><![CDATA[
        <a id="PpOnly">When enabled, analysis will stop after preprocessing.
        </a>

            <p>
              Output files will only contain information generated
              from the preprocessing stage:
            </p>
            <ul>
              <li>file metrics,</li>
              <li>implicit declarations,</li>
              <li>macros, and</li>
              <li>preprocessor messages.</li>
            </ul>
            <p>
              This option can be used for analysis debug purposes,
              specifically to determine that preprocessing completes
              without engaging in C++ parsing and analysis.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-prepronamelength " shortcut="-ppna " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-prepronamelength <i>value</i>]]></argument_syntax>
    <default_setting>-prepronamelength 63</default_setting>
    <description><![CDATA[
        <a id="PreproNameLength">Determines the number of characters in valid preprocessing identifiers separately from internal identifiers.
        </a>

            <p>
              Message number 0787 will be issued for each preprocessing
              identifier encountered that is not distinct within the
              number of characters specified.
            </p>
            <p>
              The ISO Standard states that compilers should treat at
              least the first 31 characters of internal identifiers
              and macro names as significant.
              Some implementations may distinguish them
              in more than 31 characters but it is not advisable to
              depend on this extension.
            </p>
            <p>
              Programming standards may choose to restrict the
              declaration of identifiers so that they are distinct
              within a smaller number of characters.
            </p>
            <p>
              This option will override the value passed to <i>-namelength</i>
              if specified, to allow for separate implementation limits in the
              preprocessor and the C compiler. If this option is not specified,
              the value of <i>-namelength</i> will be used instead.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-prodoption " shortcut="-po " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-prodoption <i>argument</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="ProdOption">Enables fine-grained configuration of analysis.</a>

            <p>
              <code>prodoption</code> is used to provide additional fine-grained configuration to the analysis performed by a component.
            </p>
          
<h2>Dataflow Analysis</h2><p>
  <b><a id="df__function_timeout">-prodoption df::function_timeout=<i>value</i></a></b>
</p>
<p><b>Purpose:</b> Set an aggregate function timeout in milliseconds to limit the overall time spent in dataflow analysis for each function.
        </p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              This may curtail related results, and is designed to
              avoid lengthy analysis attempts on severely complex
              functions.
            </p>
            <p>
              This option only applies when dataflow is enabled (-enabledataflow+).
            </p>
          <p>
  <b><a id="df__analyse_header_functions">-prodoption df::analyse_header_functions=[{inter|intra|off}]</a></b>
</p>
<p><b>Purpose:</b> This option controls how functions defined in header files are analyzed.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption df::analyse_header_functions=off</p>

            <p>
              When enabled, analysis of functions defined in header
              files will take place.  This can result in duplicate
              analysis of functions in each translation unit including
              the header file.
            </p>
          <p>
  <b><a id="df__struct_last_array_member_size_1">-prodoption df::struct_last_array_member_size_1[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Enables checking of single element arrays declared last in a structure.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption df::struct_last_array_member_size_1-</p>

            <p>
              When enabled, analysis will use the real size of single
              element array members declared at the end of a structure
              definition.
            </p>
          <p>
  <b><a id="df__variant_unions">-prodoption df::variant_unions[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Specifies that unions are used as variant types.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption df::variant_unions-</p>

            <p>
              Unions with a large size can be very costly for the SMT solver.
              A union that is not used to reinterpret the bits, but as a variant type,
              can be handled as a struct without loss of any analysis precision
              thus improving performance.
            </p>
            <p>
              Type punning through unions is undefined behaviour when this option is enabled.
            </p>
          
<h2>Preprocessor Behavior</h2><p>
  <b><a id="ignore_modification__forceinclude">-prodoption ignore_modification::forceinclude[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> When enabled, macros defined in a force included header file will implicitly be defined as _ignore_modification.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption ignore_modification::forceinclude+</p>

            <p>
              A common technique for handling non-standard extensions
              is to define the expansion of identifiers to nothing so
              they do not appear in the preprocessed source code.  A
              force include header can be used to achieve this:
            </p>
            <pre><code>
/* forceinclude.h */
#define __extension__

/* main.cc */
int i = __extension__ 0;
</code></pre>
            <p>
              Running with <code>-fi forceinclude.h</code> allows the
              code to be parsed successfully.  A slight complication
              occurs when the -rememberfirstdefinedirective option is
              disabled.  This can result in user code changing what
              the macro expands to and making invalid the workaround
              in the force include header:
            </p>
            <pre><code>
/* main.cc */
#define __extension__ __OTHER_EXTENSION__
int i = __extension__ 0;
</code></pre>
            <p>
              In order to ensure that the required workaround will
              always be used, irrespective of the
              -rememberfirstdefinedirective setting, then the
              _ignore_modification feature of -d can be used to fix
              the value that the macro expands to:
            </p>
            <pre><code>
/* forceinclude.h */
#define __extension__
#define __extension__ _ignore_modification  /* expansion fixed */
#define __extension__ 0                     /* no effect */
</code></pre>
            <p>
              When -po ignore_modification::forceinclude is enabled, all macros in the force include file will implicitly be treated as also being defined with _ignore_modification.
            </p>
          <p>
  <b><a id="ignore_modification__systemdefine">-prodoption ignore_modification::systemdefine[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> When enabled, macros defined using -systemdefine (-sd) will implicitly be defined as _ignore_modification.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption ignore_modification::systemdefine+</p>

            <p>
              A common technique for handling non-standard extensions
              is to define the expansion of identifiers to nothing so
              they do not appear in the preprocessed source code:
            </p>
            <pre><code>
/* main.cc */
int i = __extension__ 0;
</code></pre>
            <p>
              Running with <code>-systemdefine "__extension__="</code>
              allows the code to be parsed successfully.  A slight
              complication occurs when -rememberfirstdefinedirective
              option is disabled.  This can result in user code
              changing what the macro expands to and making invalid
              the workaround in the force include header:
            </p>
            <pre><code>
/* main.cc */
#define __extension__ __OTHER_EXTENSION__
int i = __extension__ 0;
</code></pre>
            <p>
              In order to ensure that the required workaround will
              always be used, irrespective of the
              -rememberfirstdefinedirective setting, then the
              _ignore_modification feature of -d and -sd can be used
              to fix the value to which the macro expands:
              <code>-systemdefine "__extension__=" -systemdefine
              "__extension__=_ignore_modification"</code> .
            </p>
            <p>
              When -po ignore_modification::systemdefine is enabled,
              all macros specified using -systemdefine (-sd) will
              implicitly be treated as also being defined with
              _ignore_modification.
            </p>
          <p>
  <b><a id="comment__dynamic_statistics">-prodoption comment::dynamic_statistics[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> This option allows you to control the update behavior of the analysis of commented out code. When the option is enabled (which it is by default), source token statistics continue to be gathered from the TU (Translation Unit) under analysis, to improve commented out code detection.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption comment::dynamic_statistics+</p>

            <p>
              In order to generate the analysis of commented out code, an
              algorithm is used to compare comments against a table of
              "common code sequences" gathered from real-world,
              standard-compliant projects. As long as the
              "comment::dynamic_statistics" option is enabled, triplets
              are gathered from uncommented sections of the TU being
              analyzed, so that unusual constructions or non-standard
              language extensions that appear elsewhere in the TU can be
              matched.
            </p>
            <p>For example:</p>
            <pre><code>
int f (int x, int y) {
  return ({ int w = x + y; w; });  // Statement expressions are a non-standard extension
}

// This will be recognized as commented out code if, and only if, we
// gather statistics from the current TU
/* return ({ int j = a; j; }); */
// Message only if -po comment::dynamic_statistics+
</code></pre>
            <p>
              The option is enabled by default, so that comments can be
              matched more accurately against the actual code in use, but
              this does mean that changes in one part of a TU may have
              unexpected effects on message generation in an apparently
              unrelated part of the TU. Disabling the option will ensure
              that commented out code detection is determined entirely
              locally, so that the same table of "common code sequences"
              is used throughout.
            </p>
          
<h2>QAX</h2><p>
  <b><a id="qax__limit">-prodoption qax::limit=<i>size(KB)</i></a></b>
</p>
<p><b>Purpose:</b> Sets the maximum packet size in KB sent to the QAX daemon.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption qax::limit=30</p>

            <p>
              The following information is sent by the analysis tools to the QAX daemon:
            </p>
            <ul>
              <li>Filenames</li>
              <li>Locations</li>
              <li>Preprocessor Events</li>
              <li>Diagnostics</li>
              <li>Annotations</li>
              <li>Function Flow Graphs.</li>
            </ul>
            <p>
              This option controls the amount of data stored before
              being transmitted to the server.
            </p>
            <p>
              In general this option does not need to be changed,
              however, if investigating a failure with the tool, it
              can be useful to set the option to 0 in order that all
              data is sent immediately to the daemon.
            </p>
          
<h2>General</h2><p>
  <b><a id="development__scaling">-prodoption development::scaling=<i>value</i></a></b>
</p>
<p><b>Purpose:</b> Sets the scaling factor between program effort and development time in days</p>
<p>
</p>
  <p><b>Default:</b>-prodoption development::scaling=6000</p>

            <p>The scaling factor is used in the calculation of the STDEV metric.</p>
          <p>
  <b><a id="general__trigger_lines">-prodoption general::trigger_lines=<i>value</i></a></b>
</p>
<p><b>Purpose:</b> Sets the minimum number of significant lines per file</p>
<p>
</p>
  <p><b>Default:</b>-prodoption general::trigger_lines=50</p>

            <p>
              The minimum number of lines required in a file before
              thresholds against the STCDN metric are used.
            </p>
          <p>
  <b><a id="format__printf">-prodoption format::printf="<i>value</i>"</a></b>
</p>
<p><b>Purpose:</b> Specifiers to be supported by 'printf' checking.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption format::printf="d i o u x X f e E g G c s p n %"</p>

            <p>
              This option lists the specifiers that are considered
              valid in the format string passed to
              <code>printf</code>.
            </p>
            <p>For Example:</p>
            <pre><code>
#include &lt;stdio.h&gt;

void foo (int i)
{
  /*
   * By default a message will be generated on the use of '%z' as a specifier,
   * to indicate that it is not recognized. This behavior can be changed by
   * adding 'z' to the list of valid specifiers.
   */
  printf("%z", 10);
}
</code></pre>
          <p>
  <b><a id="format__scanf">-prodoption format::scanf="<i>value</i>"</a></b>
</p>
<p><b>Purpose:</b> Specifiers to be supported by 'scanf' checking.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption format::scanf="d i o u x X f e E g G c s p n % ["</p>

            <p>
              This option lists the specifiers that are considered
              valid in the format string passed to <code>scanf</code>.
            </p>
            <p>For Example:</p>
            <pre><code>
#include &lt;stdio.h&gt;

void foo (int i)
{
  /*
   * By default a message will be generated on the use of '%z' as a specifier,
   * to indicate that it is not recognized. This behavior can be changed by
   * adding 'z' to the list of valid specifiers.
   */
  scanf("%z", &amp;i);
}
</code></pre>
          <p>
  <b><a id="async__safe_functions">-prodoption async::safe_functions=<i>value</i></a></b>
</p>
<p><b>Purpose:</b> List the names of functions that are known to be safe to call asynchronously. Any names may be passed here.</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              Most functions are not safe to call asynchronously,
              i.e. the interruption at any point in execution that a
              signal handler can produce may leave them in a state
              where they cannot be safely re-entered. This option
              allows a comma-separated list of functions to be passed,
              naming function that are known to be asynchronous-safe
              for the code to be analyzed; this is necessary if the
              functions in question are not defined in the current
              translation unit.
            </p>
            <p>
              By default, only the standard C functions
              <code>abort</code>, <code>_Exit</code>,
              <code>quick_exit</code> and <code>signal</code> are
              tagged as asynchronous-safe.
            </p>
            <p>
              There is no restriction on which functions may be explicitly tagged as safe.
            </p>
            <p>
              This option will be used by the analyzer, if a listed
              function's definition does appear in the translation
              unit to be analyzed and it contains code that would
              otherwise be identified as asynchronous-unsafe.
            </p>
          
<h2>Literal Analysis</h2><p>
  <b><a id="digit_separator__binary_group">-prodoption digit_separator::binary_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in binary literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::binary_group=4"</code>
              to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 0b1'0101'1111 ;
const int dl2 = 0b0'10111;                 // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__octal_group">-prodoption digit_separator::octal_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in octal literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::octal_group=4"</code>
              to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 07'4545;
const int dl2 = 074'545;                   // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__decimal_group">-prodoption digit_separator::decimal_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in decimal literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::decimal_group=3"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 1'000'000;
const int dl2 = 1'00'000;                 // warning message
long unsigned int ui5 = 1'123'123ul;
long unsigned int ui6 = 1'123123ul;     // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__hex_group">-prodoption digit_separator::hex_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in hexadecimal literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              If integer literal has any group of digits which is
              different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::hex_group=4"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const int dl1 = 0xAB'F16C;
const int dl2 = 0xA'BF16C;                 // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__floating_group">-prodoption digit_separator::floating_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in floating part of float literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              The floating part belongs the digits before the dot character. For instance:
            </p>
            <ul>
              <li>If literal is "1234.32e-10" then the floating part is "1234".</li>
              <li>If literal is "-12.10F" then the floating part is "12".</li>
            </ul>
            <p>
              If floating part has any group of digits which is different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::floating_group=3"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const float dl1 = 1'000'000.5007;
const double dl2 = 100'0.50;                 // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__fractional_group">-prodoption digit_separator::fractional_group=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Sets the expected length for group of digits in fractional part of float literals</p>
<p>
</p>
  <p><b>Default:</b>no entry</p>

            <p>
              The fractional part belongs the digits between the dot character and the exponent (if it exists). For instance:
            </p>
            <ul>
              <li>If literal is "1234.32e-10" then the fractional part is "32".</li>
              <li>If literal is "-12.10F" then the fractional part is "10".</li>
            </ul>
            <p>
              If fractional part has any group of digits which is different length of the specified by this parameters,
              then a warning will be generated:
            </p>
            <p>
              For example, using <code>-po "digit_separator::fractional_group=3"</code> to analyze the following code will raise a warning:
            </p>
            <pre><code>
const float dl1 = 1000000.500'7;
const double dl2 = 1000.5'007;                 // warning message
const float dl3 = 1.500'7e-12F;
const double dl4 = 1000.5'007e10L;             // warning message
</code></pre>
          <p>
  <b><a id="digit_separator__non_separated_max_size">-prodoption digit_separator::non_separated_max_size=<i>limit</i></a></b>
</p>
<p><b>Purpose:</b> Maximum size of numeric literals which don't use separators.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption digit_separator::non_separated_max_size=10</p>

            <p>
              Specifies the maximum size for numeric literals that don't use separators. For floating point literals, the max size
              is applied on both the whole and fractional parts individually.
            </p>
            <p>
              For example, using <code>-po digit_separator::non_separated_max_size=5</code>:
            </p>
            <pre><code>

void foo()
{
  100'000'000;  // OK, has separator
  12345;        // OK, not over 5 digits
  1000000;      // warning message

  0xabcd'1234;  // OK, has separator
  0xd1234;      // OK, not over 5 digits
  0x654321;     // warning message

  1.123'456;    // OK, whole part not over 5 digits and fractional has separator
  12'456.12345; // OK, whole part has separator and fractional not over 5 digits
  1.234567;     // warning message
  123456.7;     // warning message
}

            </code></pre>
          
<h2>Metric Behavior</h2><p>
  <b><a id="metrics__no_do_while">-prodoption metrics::no_do_while[{+|-}]</a></b>
</p>
<p><b>Purpose:</b> Controls whether do..while loops with an integer constant zero loop condition are counted as control structures.
        </p>
<p>
</p>
  <p><b>Default:</b>-prodoption metrics::no_do_while+</p>

            <p>
              A do..while loop with a constant zero as the loop controlling expression will only be executed once and is
              generally similar to a simple braced compound expression. It does not introduce algorithmic complexity and
              is normally introduced by macros purely for block scope purposes. Therefore, it is not counted as part of
              control flow metrics by default.
            </p>
          
<h2>Initialization</h2><p>
  <b><a id="init__entry">-prodoption init::entry=<i>functionName</i></a></b>
</p>
<p><b>Purpose:</b> List of entry points into program.</p>
<p>
</p>
  <p><b>Default:</b>-prodoption init::entry=main,wmain,WinMain,wWinMain,DllMain,wDllMain,::main,::wmain,::WinMain,::wWinMain,::DllMain,::wDllMain,_prqa_main,::_prqa_main</p>

            <p>
              Configures RCMA, QAC and QACPP to treat the functions specified in this option as entry points for the program.
              Although Dataflow and MTA do not read this option directly, QAC and QACPP will set the appropriate functions as
              entry points and this affects certain analysis Dataflow and MTA does.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-quiet " shortcut="-q " cumulative="yes" argtype="path" category="basic" required="no" inheritable="yes">
    <argument_syntax><![CDATA[-quiet <i>filename|path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Quiet">Suppresses the generation of diagnostic and metrics output for the specified file or files in the specified path.
        </a>

            <p>
              This will have the effect of suppressing warning
              messages as well as significantly reducing the size of
              the output produced.
            </p>
            <p class="Note">
              <br />This option applies only to included files and has no effect on the main source file.
            </p>
            <p class="Note">
              <br />This option should not be used for project header files or directories, as it may affect the results of CMA, Project Metrics and Reports.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-quietextended " shortcut="-qx " cumulative="yes" argtype="path" category="basic" required="no" inheritable="yes">
    <argument_syntax><![CDATA[-quietextended <i>filename|path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="QuietExtended">
          Suppresses the generation of diagnostic output for unused contents of the specified file or files in the specified path.
        </a>

            <p>
              This will have the effect of suppressing warning
              messages as well as significantly reducing the size of
              the output produced.
              This suppression is limited to constructs from those files/folders
              that are not used in non suppressed files.
            </p>
            <p>
              When the argument is a non-absolute path, the path is interpreted to be a regular file
              path relative to a -systeminclude path. If the concatenation of a system include path
              and the relative file path corresponds to an existing file, the option takes effect on that file.
            </p>
            <p class="Note">
              <br />This option applies only to included files and has no effect on the main source file.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-randomnumbergeneratorseed " shortcut="-rngs " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-randomnumbergeneratorseed <i>function(argIndex)</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="RandomNumberGeneratorSeed">Specifies how a random number generator (RNG) is initialised with a new seed.</a>

              <p>The argument to this option should be a mangled name referring to a function followed
                immediately by a number in parentheses.</p>
              <p>
                The specified function will be treated as a function that initialises a RNG.
              </p>
              <p>
                The number specified in parentheses immediately
                after the name, is interpreted as the index (starting
                from 1) of the parameter which contains the new seed
                being used to configure the RNG.
              </p>
              <p>It is the value of the seed parameter that is analysed to see if it is
                unchanging or predictable.</p>
              <p>For example:</p>
              <pre><code>
const int SEED=1;
void foo(void)
{
  Random_Init(SEED);  // Generates diagnostics with -rngs="Random_Init(1)"
}
</code></pre>
            <p>In C++, the mangled name can be used to limit the match to a member or single overloaded function.</p>
            <pre><code>
struct SeedCtx
{
  void init(int);
};

int SEED = 1;
void foo(void)
{
  SeedCtx rng;

  rng.init(SEED);   // generates diagnostics with -rngs=".QN7SeedCtxN4initPi(1)"
}

</code></pre>
            
        ]]></description>
   </cli_option>
   <cli_option name="-remark " shortcut="-rem " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-remark <i>comment</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Remark">The -remark option can be used to add additional comments into configuration files. Alternatively, comments can be included in the configuration files by prefixing the comments with an asterisk.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-rememberfirstdefinedirective" shortcut="-remfdd" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-rememberfirstdefinedirective[{+|-}]]]></argument_syntax>
    <default_setting>-rememberfirstdefinedirective+</default_setting>
    <description><![CDATA[
        <a id="REMemberFirstDefineDirective">When enabled, a redefinition using a #define directive will not change the replacement list of the macro.</a>

            <p>
              The default behavior of the analyzer is to issue a
              message and update the replacement list of a macro for
              each new #define directive:
            </p>
            <pre><code>
#define A 1     /* A's replacement list set to 1 */
#define A 2     /* Message generated to highlight that macro A has been
                /* redefined and A's replacement list changed to 2 */

int i = A;      /* A expands to 2 */
</code></pre>
            <p>
              Previous versions operated slightly differently in that
              a message was issued but the replacement list was not
              changed:
            </p>
            <pre><code>
#define A 1     /* A's replacement list set to 1 */
#define A 2     /* Message generated to highlight that macro A has been
                /* redefined and A's replacement list unchanged as 1 */

int i = A;      /* A expands to 1 */
</code></pre>
            <p>
              The -rememberfirstdefinedirective option can be used to
              revert the behavior to match the previous functionality.
            </p>
            <p class="Note">
              <br />Macros defined on the command line always use the last value.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-settings" shortcut="-set" cumulative="no" argtype="flag" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-settings[{+|-}]]]></argument_syntax>
    <default_setting>-settings-</default_setting>
    <description><![CDATA[
        <a id="Settings">Print the settings used by the tool after the complete processing of all command line arguments.
        </a>

            <p>When enabled, the current values for all configuration options are listed to the standard output.</p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-size " shortcut="-s " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-size <i>type</i>=<i>bits</i>]]></argument_syntax>
    <default_setting>-size "char=8" -size "short=16" -size "int=32 <br/>
    -size "long=32" -size "longlong=64" -size "float=32" <br/>
    -size "double=64" -size "ldouble=128" -size "codeptr=32" <br/>
     <b>QAC++</b>: <br/>
    -size "bool=8" -size "wchar_t=16" <br/>
     <b>QAC</b>: <br/>
    -size "_Bool=8"
    </default_setting>
    <description><![CDATA[
        <a id="Size">Defines the type sizes (measured in bits) implemented in your compiler environment.
        </a>

            <p>
              The analyzer uses type size values to calculate the size
              of structures and to perform analysis.
            </p>
            <p>
              The available size and alignment values are constrained
              by the ISO Standard rules on integral size ordering. The
              size is often related to the alignment of a data type.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-skippragma " shortcut="-spragma " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-skippragma <i>pragma_start</i>,<i>pragma_end</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SkipPragma">Defines the behavior of #pragma directives.
        </a>

            <p>
              #pragma statements are preprocessor directives that are specific to a particular compiler.
            </p>
            <p>
              You can declare a #pragma or a #pragma block by
              specifying #pragma names.  The following syntax is
              supported:
            </p>
            <pre><code>
/* Command Line:  -skippragma ID */
#pragma ID   /* This pragma is ignored */

/* Command Line:  -skippragma X1,X2 */
#pragma x1   /* This pragma and all code lines up to and
                including the #pragma x2 are ignored */

#pragma x2

/* Command Line:  -skippragma ABC* */
#pragma ABC1   /* This pragma ignored*/
#pragma ABC2   /* This pragma ignored*/
#pragma ABC3   /* This pragma ignored*/
</code></pre>
            <p xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Component Options.Helix QAC for C">
              By default, when an unrecognized #pragma is encountered, message 3116 will be generated.
              A #pragma declared by <code>-skippragma</code> will not be considered unrecognized.
            </p>
            <p class="Note">
              <br />The analyzer also recognizes the specific
              #pragma directives of its own, for example,
              PRQA_MESSAGES_OFF and PRQA_MESSAGES_ON. These do not
              need to be configured. They are used for suppressing and
              re-enabling warning messages from within the code. Refer
              to Message Suppression in the component manual.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-slashwhite" shortcut="-sl" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="yes">
    <argument_syntax><![CDATA[-slashwhite[{+|-}]]]></argument_syntax>
    <default_setting>-slashwhite-</default_setting>
    <description><![CDATA[
        <a id="SlashWhite">When enabled, parsing ignores whitespace between \ and the end of a line.
        </a>

            <p>
              Some source code uses continuation lines that have
              whitespace between the \ and the end of the line. This
              can happen when source files are transferred between
              different operating systems and results in errors,
              unless this option is enabled.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-stoponerror" shortcut="-soe" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-stoponerror[{+|-}]]]></argument_syntax>
    <default_setting>-stoponerror+</default_setting>
    <description><![CDATA[
        <a id="StopOnError">Causes the analysis to stop on the first hard error.</a>

            <p>
              When enabled, the parser will stop parsing a translation unit if a
              hard error is encountered.
            </p>
            <p>
              This is enabled by default, as it is usually the case that hard
              errors for a translation unit should be addressed in the order
              they are generated.
            </p>
            <p class="Note">
              This option applies to the processing within a translation unit
              and it is unrelated to Perforce QAC's "Stop Analysis Upon Failure"
              option.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-strictrank" shortcut="-sr" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-strictrank[{+|-}]]]></argument_syntax>
    <default_setting>-strictrank-</default_setting>
    <description><![CDATA[
        <a id="StrictRank">The -strictrank option affects the behavior of implicit type conversion messages which report conversions from one integer type to a type of the same signedness but lower rank.  These messages are referred to in the standard message file as 'narrowing' conversions.
        </a>

            <p>
              When the strictrank option is off (-strictrank-), these
              messages are not generated when converting to a type
              which is of lower rank but is actually an "equivalent"
              type.
            </p>
            <p>
              The term rank (integer conversion rank) is a term used
              in the C99 ISO Standard to describe the intrinsic
              ordering of integer types. In brief, no two integer
              types have the same rank even if they share the same
              representation. Type long (or long long) has the highest
              rank and type <b>_Bool</b> has the lowest rank. The rank
              of an unsigned type is equal to the rank of the
              corresponding signed type.
            </p>
            <p>
              Equivalent type in this context refers to the situation
              where two integer types are of different integer rank
              but share the same representation.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-strictsignedness" shortcut="-ss" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-strictsignedness[{+|-}]]]></argument_syntax>
    <default_setting>-strictsignedness+</default_setting>
    <description><![CDATA[
        <a id="StrictSignedness">Generate unsigned to larger signed messages for wider types.
        </a>

            <p>
              This option is obsolete: it has no effect on the
              'Essential Type' Arithmetic Type messages. It is
              effectively always on to enforce the Essential Type
              system. The range of "Unsigned to Larger Signed"
              messages has been replaced with a single message 4443.
            </p>
            <p>
              The messages that were affected by this option are in
              Obsolete Messages: Arithmetic Type - Implicit
              Conversions.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-style " shortcut="-sty " cumulative="no" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-style {k+r|exdented|indented}]]></argument_syntax>
    <default_setting>-style exdented</default_setting>
    <description><![CDATA[
        <a id="Style">Enforces various bracing styles.
        </a>

            <p>
              The following are the three styles of bracing and
              indentation most commonly used in C programming:
            </p>
            <pre><code>
// Indented
if ( )
  {
  ...
  }
// Exdented
if ( )
{
  ...
}
// K&amp;R (Kernighan &amp; Ritchie)
if ( ) {
  ...
}
</code></pre>
            <p>
              The analyzer will enforce consistency, but it will not
              enforce any particular depth of indentation, unless that
              is specified by using the <b>-indentlevel</b> option.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-systemdefine " shortcut="-sd " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-systemdefine <i>ident</i>[=[<i>value</i>]]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SystemDefine">Defines system macros.
        </a>

            <p>
              System macros in the analyzer have the same value and
              semantics as -d except that they
              are processed <i>after</i> the -d options.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-sysembed " shortcut="-sysembed " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-sysembed <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SystemEmbedPath">Specifies a search path for system binary resource files.
        </a>

            <p>
              Directories specified with the -sysembed option
              have the same value and semantics as those specified
              using -embed, except that these
              directories will be searched <i>after</i> the
              directories specified with -embed.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-systeminclude " shortcut="-si " cumulative="yes" argtype="path" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-systeminclude <i>path</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="SystemInclude">Specifies a search path for your system header files.
        </a>

            <p>
              Directories specified with the -systeminclude option
              have the same value and semantics as those specified
              using -i, except that these
              directories will be searched <i>after</i> the
              directories specified with -i.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-tabstop " shortcut="-t " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-tabstop <i>columns</i>]]></argument_syntax>
    <default_setting>-tabstop 8</default_setting>
    <description><![CDATA[
        <a id="TabStop">Specifies the number of spaces represented by a tab character.
        </a>

            <p>
              Tab spacing is not related to the depth of indentation.
              It does affect the column location used when issuing
              diagnostics against the source file.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-thirdparty" shortcut="-tp" cumulative="no" argtype="flag" category="noncomponent" required="no" inheritable="no">
    <argument_syntax><![CDATA[-thirdparty[{+|-}]]]></argument_syntax>
    <default_setting>-thirdparty-</default_setting>
    <description><![CDATA[
        <a id="ThirdParty">Specifies a file or folder as third party.</a>

            <p>
              This option is used by QA Framework to support 3rd Party source code. See QA Framework manual for more information about this option.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-threshold " shortcut="-thresh " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-threshold <i>metric</i>{&lt;|&lt;=|=|&gt;|&gt;=}<i>value</i>[<i>:[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Threshold">When specified, message msg_no is output whenever the threshold condition (from the set {&lt;|&lt;=|=|&gt;|&gt;=} for specified metric is exceeded.
        </a>

            <p>
              The metric is specified by the name that appears in the metrics
              records of the <code>.arc</code> file. There are no default
              values. If <i>:msg_no</i> is omitted the default analyzer message
              4700 will be used.
            </p>
            <p>
              The optional <code>prefix_</code> can be used to specify the
              Compliance Module that <i>msg_no</i> is associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-undef " shortcut="-undef " cumulative="yes" argtype="string" category="basic" required="no" inheritable="no">
    <argument_syntax><![CDATA[-undef <i>ident</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Undef">Will undefine, if any, a macro <i>ident</i> previously specified on the command line</a>

            <p>
              The -undef option when specified will causes the removal
              of definitions of <i>ident</i> previously seen on the
              command line.
            </p>
            <p>
              For example if the sequence:
            </p>
            <pre>
-d "A=1" -d "B=2" -d "c=3" -undef B
</pre>
            <p>
              Will have the same affects as:
            </p>
            <pre>
-d "A=1" -d "c=3"
</pre>
          
        ]]></description>
   </cli_option>
   <cli_option name="-unsignedchar" shortcut="-u" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-unsignedchar[{+|-}]]]></argument_syntax>
    <default_setting>-unsignedchar-</default_setting>
    <description><![CDATA[
        <a id="UnsignedChar">When enabled, the plain char datatype is interpreted as unsigned char.  When disabled, -unsignedchar-, it is interpreted as signed char.
        </a>

            <p>
              The ISO Standard states that a compiler may implement
              char as a signed or unsigned datatype. It is safer not
              to assume any particular implementation.
            </p>
            <p>
              You can test whether your source relies on plain char
              being treated in a particular manner by compiling and
              running the following program:
            </p>
            <pre><code>
#include &lt;stdio.h&gt;

int main ()
{
  char c = 130;
  printf("'%d'\n", c);
}
</code></pre>
            <p>
              If the output of the program is a negative number then
              plain char has a signed type.  Otherwise it has an
              unsigned type.
            </p>
            <p class="Note">
              <br />Some compilers have an option to switch
              their behavior between signed and unsigned.  It is
              therefore important to compile the above program with
              the same settings as are being used in the target
              project.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-url " shortcut="-url " cumulative="no" argtype="string" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-url <i>url</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="URL">The URL of the server to which analysis data should be sent.
        </a>

            <p>
              If no <code>-url</code> is specified, then output will be sent to the legacy output formats.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-version" shortcut="-v" cumulative="no" argtype="flag" category="internal" required="no" inheritable="no">
    <argument_syntax><![CDATA[-version[{+|-}]]]></argument_syntax>
    <default_setting>-version-</default_setting>
    <description><![CDATA[
        <a id="Version">When enabled, the version number is printed to standard out and the tool will exit immediately.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-via " shortcut="-via " cumulative="yes" argtype="path" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-via <i>file</i>]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="Via">Used to specify a file containing additional configuration options.
        </a>

        ]]></description>
   </cli_option>
   <cli_option name="-virtualmemorylimit " shortcut="-vml " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-virtualmemorylimit <i>value</i>]]></argument_syntax>
    <default_setting>-virtualmemorylimit 70</default_setting>
    <description><![CDATA[
        <a id="VirtualMemoryLimit">Determines the limit on the available memory a component can utilise.</a>

            <p>
              Before analysis is performed by a component a limit is set on
              the amount of memory that the component can utilise. By default this limit
              is set to either a percentage of the systems physical memory or
              a default fixed size, whichever is largest.
            </p>
            <p>
              This option determines the limit placed on the memory available to
              the component during analysis as a percentage of the total systems memory.
            </p>
            <p>
              If the argument of this option is 0 then no memory limit is applied to the component.
              And if the value of the argument does not lie between 0 and 100 then the default limit
              will be applied.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warncall " shortcut="-wc " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warncall <i>function</i>[<i>=[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnCall">Displays warning message <i>msg_no</i> if a call to <i>function</i> is encountered.
        </a>

            <p>
              If no message number is specified for C, the following default message
              is displayed:
            </p>
            <pre>
2010 The function 'func_name' must not be called.
</pre>
            <p>
              If no message number is specified for C++, the following default message
              is displayed:
            </p>
            <pre>
3999 Function 'func_name' called.
</pre>
            <p>
              When <i>msg_no</i> is specified, the optional <code>prefix_</code>
              can be used to specify the Compliance Module that <i>msg_no</i> is
              associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warnmacroexpansion " shortcut="-wme " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warnmacroexpansion <i>macro</i>[<i>=[prefix_]msg_no</i>]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnMacroExpansion">Displays warning message <i>msg_no</i> if a <i>macro</i> is expanded.
        </a>

            <p>
              If no message number is declared, the following message
              is displayed:
            </p>
            <pre>
1007 The macro 'macro_name' must not be expanded.
</pre>
            <p>
              This option ignores any message number which is not
              between 1 and 9998 inclusive.
            </p>
            <p>
              When <i>msg_no</i> is specified, the optional <code>prefix_</code>
              can be used to specify the Compliance Module that <i>msg_no</i> is
              associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-warnset " shortcut="-ws " cumulative="yes" argtype="string" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-warnset <i>qualified_member_name</i>[=[prefix_]implicit_msg_no[!filter_value],explicit_const_msg_no[!filter_value],explicit_nonconst_msg_no]]]></argument_syntax>
    <default_setting>no entry</default_setting>
    <description><![CDATA[
        <a id="WarnSet">Displays a warning if <i>qualified_member_name</i> is set. Which warning is displayed depends on context (see below for details).
        </a>

            <b>Note: in C++ the qualified_member_name must be specified using the mangled name format.</b>
            <p>
              If no message number is specified for C, the following default message is displayed:
            </p>
            <pre>
2033 The member 'member_name' must not be set.
</pre>
            <p>
              If no message number is specified for C++, the following default message is displayed:
            </p>
            <pre>
3998 Member variable 'member_name' modified.
</pre>
            <p><b>Warning Messages and Context</b></p>
            <p>Each -warnset may specify up to three warning messages per fully qualified member name. </p>
            <p>The first is the message to be raised if the member is set "implicitly". For example,
              if the non-static data member has a default value, and no other value is provided during
              construction of an object, the implicit_msg_no will be raised.
              <pre><code>
// QAC  : -warnset A::value -warnset A::seed=5001
// QAC++: -warnset .QNAN5value -warnset .QNAN4seed=5001

struct A
{
  int value =  1;            // default message raised
  int seed = 1;              // 5001 raised
};
</code></pre>
            </p>
            <p>The second is the message to be raised if the member is explicitly set to a compile-time constant
              value (i.e. a value which does not change between program runs). For example: passing a literal value
              to a member during construction will result in the explicit_const_msg_no being raised.
              <pre><code>
// QAC  : -warnset A::value -warnset A::seed=5001,5002
// QAC++: -warnset .QNAN5value -warnset .QNAN4seed=5001,5002

typedef struct
{
  int value;
  int seed;
} A;

A a {0,     // default raised
     0};    // 5002 raised
</code></pre>
            </p>
            <p>
              Finally, the third is the message to be raised if the member is explicitly set to a dynamic value
              (i.e. a value that is different every time the program runs). For example: passing the return value
              of a function call to a member during construction will result in the explicit_nonconst_msg_no being raised.
              <pre><code>
// QAC  : -warnset A::value -warnset A::seed=5001,5002,5003
// QAC++: -warnset .QNAN5value -warnset .QNAN4seed=5001,5002,5003

typedef struct
{
  unsigned value;
  unsigned seed;
} A;

unsigned getInitValue();
unsigned getInitSeed();

A a {getInitValue(),    // default raised
     getInitSeed()};    // 5003 raised
</code></pre>
            </p>
            <p>If at least one message number is specified but not <i>all</i> the messages are specified, then
            any that are unspecified will be ignored.</p>
            <p><b>!filtervalue</b></p>
            <p>The first two msg_no values can optionally take a "filter value". In the 2021.3 release this is an
              integer value that represents a single "valid" integer value. If analysis detects that the member is
              being to set to anything other than the "filter value" then the associated msg_no will be raised.</p>
            <p>
              The command line uses "!" to specify "not &lt;filter_value&gt;". The associated msg_no will be raised if
              <i>qualified_member_name</i> is set to a value that is <b>not</b> &lt;filter_value&gt;.
            <pre><code>
// QAC  : -warnset A::value=5001!1,5002!1,5003
// QAC++: -warnset .QNAN5value=5001!1,5002!1,5003

typedef struct
{
  unsigned value = 0;  // 5001 raised
} A;

A a_bad {128};  // 5002 raised
A a_ok  {1};    // 5002 NOT raised
</code></pre>
            </p>
            <p>
              When at least one message number is specified, the optional
              <code>prefix_</code> can be used to specify the Compliance Module
              that all messages are associated with.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-xcase" shortcut="-xc" cumulative="no" argtype="flag" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-xcase[{+|-}]]]></argument_syntax>
    <default_setting>-xcase-</default_setting>
    <description><![CDATA[
        <a id="XCase">Specifies if the case of external identifiers can be ignored.
        </a>

            <p>
              The C90 ISO Standard allows an implementation to ignore
              alphabetical case in external identifiers. When -xcase
              is enabled, this restriction is strictly imposed.
            </p>
          
        ]]></description>
   </cli_option>
   <cli_option name="-xnamelength " shortcut="-xn " cumulative="no" argtype="numeric" category="advanced" required="no" inheritable="no">
    <argument_syntax><![CDATA[-xnamelength <i>value</i>]]></argument_syntax>
    <default_setting>-xnamelength 31</default_setting>
    <description><![CDATA[
        <a id="XNameLength">Specifies the number of significant characters in an external identifier.
        </a>

            <p>
              The C90 ISO Standard states that an implementation may
              restrict the significance of an external name to only 6
              characters and may ignore alphabetical case. This is
              quite severe and many compilers and linkers relax this
              restriction.
            </p>
            <p>
              Message number 0777 will be generated for each external
              identifier it encounters that is not distinct within the
              number of characters you specified.
            </p>
          
        ]]></description>
   </cli_option>
   <preset_groups>
    <group name="Dataflow Presets" default="No Preset">
     <preset name="No Preset">
      <setting ref="-remark " value="No Preset Selected"/>
     </preset>
     <preset name="Depth 1">
      <setting ref="-remark " value="Depth 1 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=10000"/>
     </preset>
     <preset name="Depth 2">
      <setting ref="-remark " value="Depth 2 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=15000"/>
     </preset>
     <preset name="Depth 3">
      <setting ref="-remark " value="Depth 3 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=60000"/>
     </preset>
     <preset name="Depth 4">
      <setting ref="-remark " value="Depth 4 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=60000"/>
     </preset>
     <preset name="Depth 5">
      <setting ref="-remark " value="Depth 5 Selected"/>
      <setting ref="-prodoption " value="df::function_timeout=60000"/>
     </preset>
    </group>
   </preset_groups>
  </component_options>
 </executable>
 <messages>
  <message id="0010" level="QA_ERROR" help="doc-en_US/doc/messages/0010.html" severity="9">
   <text>[Q] Unable to open file '%s'.</text>
   <references>
      </references>
  </message>
  <message id="0040" level="QA_ERROR" help="doc-en_US/doc/messages/0040.html" severity="9">
   <text>[Q] Definition of size_t differs from configured type.</text>
   <references>
      </references>
  </message>
  <message id="0041" level="QA_ERROR" help="doc-en_US/doc/messages/0041.html" severity="9">
   <text>[Q] Definition of ptrdiff_t differs from configured type.</text>
   <references>
      </references>
  </message>
  <message id="0042" level="QA_ERROR" help="doc-en_US/doc/messages/0042.html" severity="9">
   <text>[Q] Definition of wchar_t differs from configured type.</text>
   <references>
      </references>
  </message>
  <message id="0050" level="QA_WARNING" help="doc-en_US/doc/messages/0050.html" severity="9">
   <text>Error in code replacement expression '%1s'. '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0097" level="QA_WARNING" help="doc-en_US/doc/messages/0097.html" severity="7">
   <text>Recoverable dataflow problem. Analysis continues. Please inform Programming Research.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0159" level="QA_INFORMATION" help="doc-en_US/doc/messages/0159.html" severity="7">
   <text>The maximum number of errors has been exceeded - the analysis has been aborted.</text>
   <references>
      </references>
  </message>
  <message id="0160" level="QA_WARNING" help="doc-en_US/doc/messages/0160.html" severity="7">
   <text>[U] Using unsupported conversion specifier number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0161" level="QA_WARNING" help="doc-en_US/doc/messages/0161.html" severity="7">
   <text>[U] Unknown length modifier used with 'i' or 'd' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0162" level="QA_WARNING" help="doc-en_US/doc/messages/0162.html" severity="7">
   <text>[U] Unknown length modifier used with 'o' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0163" level="QA_WARNING" help="doc-en_US/doc/messages/0163.html" severity="7">
   <text>[U] Unknown length modifier used with 'u' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0164" level="QA_WARNING" help="doc-en_US/doc/messages/0164.html" severity="7">
   <text>[U] Unknown length modifier used with 'x' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0165" level="QA_WARNING" help="doc-en_US/doc/messages/0165.html" severity="7">
   <text>[U] Unknown length modifier used with 'X' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0166" level="QA_WARNING" help="doc-en_US/doc/messages/0166.html" severity="7">
   <text>[U] Unknown length modifier used with 'f' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0167" level="QA_WARNING" help="doc-en_US/doc/messages/0167.html" severity="7">
   <text>[U] Unknown length modifier used with 'e' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0168" level="QA_WARNING" help="doc-en_US/doc/messages/0168.html" severity="7">
   <text>[U] Unknown length modifier used with 'E' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0169" level="QA_WARNING" help="doc-en_US/doc/messages/0169.html" severity="7">
   <text>[U] Unknown length modifier used with 'g' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0170" level="QA_WARNING" help="doc-en_US/doc/messages/0170.html" severity="7">
   <text>[U] Unknown length modifier used with 'G' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0171" level="QA_WARNING" help="doc-en_US/doc/messages/0171.html" severity="7">
   <text>[U] Unknown length modifier used with 'c' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0172" level="QA_WARNING" help="doc-en_US/doc/messages/0172.html" severity="7">
   <text>[U] Unknown length modifier used with '%%' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0173" level="QA_WARNING" help="doc-en_US/doc/messages/0173.html" severity="7">
   <text>[U] Unknown length modifier used with 's' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0174" level="QA_WARNING" help="doc-en_US/doc/messages/0174.html" severity="7">
   <text>[U] Unknown length modifier used with 'n' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0175" level="QA_WARNING" help="doc-en_US/doc/messages/0175.html" severity="7">
   <text>[U] Unknown length modifier used with 'p' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0176" level="QA_WARNING" help="doc-en_US/doc/messages/0176.html" severity="7">
   <text>[U] Incomplete conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0177" level="QA_WARNING" help="doc-en_US/doc/messages/0177.html" severity="7">
   <text>[U] Field width of format conversion specifier exceeds 509 characters.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0178" level="QA_WARNING" help="doc-en_US/doc/messages/0178.html" severity="7">
   <text>[U] Precision of format conversion specifier exceeds 509 characters.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0179" level="QA_WARNING" help="doc-en_US/doc/messages/0179.html" severity="7">
   <text>[U] Argument type does not match conversion specifier number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [7.9.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0180" level="QA_WARNING" help="doc-en_US/doc/messages/0180.html" severity="2">
   <text>[C99] Use of ll for conversion specifier.</text>
   <references>
    <reference source="ISO:C99 Language [7.19.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0181" level="QA_WARNING" help="doc-en_US/doc/messages/0181.html" severity="2">
   <text>[C99] Use of hh for conversion specifier.</text>
   <references>
    <reference source="ISO:C99 Language [7.19.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0184" level="QA_WARNING" help="doc-en_US/doc/messages/0184.html" severity="7">
   <text>[U] Insufficient arguments to satisfy conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [7.9.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0185" level="QA_WARNING" help="doc-en_US/doc/messages/0185.html" severity="7">
   <text>[U] Call contains more arguments than conversion specifiers.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [7.9.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0186" level="QA_WARNING" help="doc-en_US/doc/messages/0186.html" severity="7">
   <text>[U] A call to this function must include at least one argument.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0190" level="QA_WARNING" help="doc-en_US/doc/messages/0190.html" severity="7">
   <text>[U] Using unsupported conversion specifier number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0191" level="QA_WARNING" help="doc-en_US/doc/messages/0191.html" severity="7">
   <text>[U] Unknown length modifier used with 'd/i/n' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0192" level="QA_WARNING" help="doc-en_US/doc/messages/0192.html" severity="7">
   <text>[U] Unknown length modifier used with 'o' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0193" level="QA_WARNING" help="doc-en_US/doc/messages/0193.html" severity="7">
   <text>[U] Unknown length modifier used with 'u' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0194" level="QA_WARNING" help="doc-en_US/doc/messages/0194.html" severity="7">
   <text>[U] Unknown length modifier used with 'x/X' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0195" level="QA_WARNING" help="doc-en_US/doc/messages/0195.html" severity="7">
   <text>[U] Unknown length modifier used with 'e/E/f/F/g/G' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0196" level="QA_WARNING" help="doc-en_US/doc/messages/0196.html" severity="7">
   <text>[U] Unknown length modifier used with 's' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0197" level="QA_WARNING" help="doc-en_US/doc/messages/0197.html" severity="7">
   <text>[U] Unknown length modifier used with 'p' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0198" level="QA_WARNING" help="doc-en_US/doc/messages/0198.html" severity="7">
   <text>[U] Unknown length modifier used with '%%' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0199" level="QA_WARNING" help="doc-en_US/doc/messages/0199.html" severity="7">
   <text>[U] Unknown length modifier used with '[' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0200" level="QA_WARNING" help="doc-en_US/doc/messages/0200.html" severity="7">
   <text>[U] Unknown length modifier used with 'c' conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0201" level="QA_WARNING" help="doc-en_US/doc/messages/0201.html" severity="7">
   <text>[U] Incomplete conversion specifier, number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0202" level="QA_WARNING" help="doc-en_US/doc/messages/0202.html" severity="2">
   <text>[I] '-' character in '[]' conversion specification is implementation defined.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0203" level="QA_WARNING" help="doc-en_US/doc/messages/0203.html" severity="7">
   <text>[U] Value of character prior to '-' in '[]' is greater than following character.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0204" level="QA_WARNING" help="doc-en_US/doc/messages/0204.html" severity="7">
   <text>[U] Field width of format conversion specifier exceeds 509 characters.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0206" level="QA_WARNING" help="doc-en_US/doc/messages/0206.html" severity="7">
   <text>[U] Argument type does not match conversion specifier number %1s.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0207" level="QA_WARNING" help="doc-en_US/doc/messages/0207.html" severity="7">
   <text>[U] 'scanf' expects address of objects being stored into.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [7.9]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0208" level="QA_WARNING" help="doc-en_US/doc/messages/0208.html" severity="7">
   <text>[U] Same character occurs in scanset more than once.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0209" level="QA_WARNING" help="doc-en_US/doc/messages/0209.html" severity="7">
   <text>[U] Using a non-constant format string.</text>
   <references>
    <reference source="Library"/>
    <reference source="ISO:C90 Language [7.9.6.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0231" level="QA_ERROR" help="doc-en_US/doc/messages/0231.html" severity="9">
   <text>[S] Character constant contains an invalid hex escape sequence.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
   </references>
  </message>
  <message id="0232" level="QA_WARNING" help="doc-en_US/doc/messages/0232.html" severity="8">
   <text>[C] Value of hex escape sequence is not representable in type 'unsigned char'.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0233" level="QA_WARNING" help="doc-en_US/doc/messages/0233.html" severity="8">
   <text>[C] Value of octal escape sequence is not representable in type 'unsigned char'.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0234" level="QA_ERROR" help="doc-en_US/doc/messages/0234.html" severity="9">
   <text>[S] String literal contains an invalid hex escape sequence.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.4]"/>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
   </references>
  </message>
  <message id="0235" level="QA_WARNING" help="doc-en_US/doc/messages/0235.html" severity="7">
   <text>[U] Unknown escape sequence.</text>
   <references>
    <reference source="Library"/>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [6.9.2]"/>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0240" level="QA_WARNING" help="doc-en_US/doc/messages/0240.html" severity="2">
   <text>[I] This file contains the control-M character at the end of a line.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0241" level="QA_WARNING" help="doc-en_US/doc/messages/0241.html" severity="2">
   <text>[I] This file contains the control-Z character - was this transferred from a PC?</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0242" level="QA_WARNING" help="doc-en_US/doc/messages/0242.html" severity="2">
   <text>[I] This file contains the control-M character in the middle of a line.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0243" level="QA_WARNING" help="doc-en_US/doc/messages/0243.html" severity="2">
   <text>[I] Treating an invalid character as whitespace.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0244" level="QA_WARNING" help="doc-en_US/doc/messages/0244.html" severity="8">
   <text>[C] Value of character constant is not representable in type 'int'.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0245" level="QA_WARNING" help="doc-en_US/doc/messages/0245.html" severity="8">
   <text>[U] Empty character constant.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
   </references>
  </message>
  <message id="0246" level="QA_WARNING" help="doc-en_US/doc/messages/0246.html" severity="2">
   <text>[E] Binary integer constants are a language extension.</text>
   <references>
    <reference source="Constants"/>
    <reference source="ISO:C90 Language [6.1.3.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0247" level="QA_WARNING" help="doc-en_US/doc/messages/0247.html" severity="6">
   <text>'//' comment line ends with a backslash, continuing it to the next line.</text>
   <references>
    <reference source="ISO:C90 Language [5.1.1.2]"/>
   </references>
  </message>
  <message id="0249" level="QA_WARNING" help="doc-en_US/doc/messages/0249.html" severity="8">
   <text>[U] Character constant contains a new-line character.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
   </references>
  </message>
  <message id="0250" level="QA_ERROR" help="doc-en_US/doc/messages/0250.html" severity="9">
   <text>[S] Character constant contains a single backslash character.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
   </references>
  </message>
  <message id="0258" level="QA_ERROR" help="doc-en_US/doc/messages/0258.html" severity="9">
   <text>[S] String literal is not terminated. A backslash character has been used to define an escape sequence.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.4]"/>
   </references>
  </message>
  <message id="0259" level="QA_WARNING" help="doc-en_US/doc/messages/0259.html" severity="8">
   <text>[U] String literal is not terminated.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.4]"/>
   </references>
  </message>
  <message id="0268" level="QA_ERROR" help="doc-en_US/doc/messages/0268.html" severity="9">
   <text>[S] Comment open at end of translation unit.</text>
   <references>
    <reference source="ISO:C90 Language [5.1.1.2]"/>
   </references>
  </message>
  <message id="0275" level="QA_WARNING" help="doc-en_US/doc/messages/0275.html" severity="7">
   <text>[U] Floating value is out of range for conversion to destination type.</text>
   <references>
    <reference source="Floating Value Conversions"/>
    <reference source="Constant Expressions"/>
    <reference source="ISO:C90 Language [6.2.1.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0284" level="QA_WARNING" help="doc-en_US/doc/messages/0284.html" severity="2">
   <text>[I] Multiple character constants have implementation defined values.</text>
   <references>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0285" level="QA_WARNING" help="doc-en_US/doc/messages/0285.html" severity="2">
   <text>[I] Character constant contains character which is not a member of the basic source character set.</text>
   <references>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0286" level="QA_WARNING" help="doc-en_US/doc/messages/0286.html" severity="2">
   <text>[I] String literal contains character which is not a member of the basic source character set.</text>
   <references>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0287" level="QA_WARNING" help="doc-en_US/doc/messages/0287.html" severity="2">
   <text>[I] Header name contains character which is not a member of the basic source character set.</text>
   <references>
    <reference source="Characters"/>
    <reference source="Includes"/>
    <reference source="ISO:C90 Language [5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0288" level="QA_WARNING" help="doc-en_US/doc/messages/0288.html" severity="2">
   <text>[I] Source file '%s' has comments containing characters which are not members of the basic source character set.</text>
   <references>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0289" level="QA_WARNING" help="doc-en_US/doc/messages/0289.html" severity="2">
   <text>[I] Source file '%s' has preprocessing tokens containing characters which are not members of the basic source character set.</text>
   <references>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0292" level="QA_WARNING" help="doc-en_US/doc/messages/0292.html" severity="2">
   <text>[I] Source file '%s' has comments containing one of the characters '$', '@' or '`'.</text>
   <references>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [5.2.1]"/>
   </references>
  </message>
  <message id="0299" level="QA_WARNING" help="doc-en_US/doc/messages/0299.html" severity="2">
   <text>[I] Source file '%s' includes #pragma directives containing characters which are not members of the basic source character set.</text>
   <references>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0301" level="QA_WARNING" help="doc-en_US/doc/messages/0301.html" severity="7">
   <text>[u] Cast between a pointer to object and a floating type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="ISO:C99 Language [6.5.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0302" level="QA_WARNING" help="doc-en_US/doc/messages/0302.html" severity="7">
   <text>[u] Cast between a pointer to function and a floating type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0303" level="QA_WARNING" help="doc-en_US/doc/messages/0303.html" severity="2">
   <text>[I] Cast between a pointer to volatile object and an integral type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0304" level="QA_WARNING" help="doc-en_US/doc/messages/0304.html" severity="7">
   <text>[U] The address of an array declared 'register' may not be computed.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0305" level="QA_WARNING" help="doc-en_US/doc/messages/0305.html" severity="2">
   <text>[I] Cast between a pointer to function and an integral type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0306" level="QA_WARNING" help="doc-en_US/doc/messages/0306.html" severity="2">
   <text>[I] Cast between a pointer to object and an integral type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="ISO:C99 Language [6.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0307" level="QA_WARNING" help="doc-en_US/doc/messages/0307.html" severity="7">
   <text>[u] Cast between a pointer to object and a pointer to function.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0308" level="QA_WARNING" help="doc-en_US/doc/messages/0308.html" severity="2">
   <text>Non-portable cast involving pointer to an incomplete type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0309" level="QA_WARNING" help="doc-en_US/doc/messages/0309.html" severity="7">
   <text>[U] Integral type is not large enough to hold a pointer value.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0310" level="QA_WARNING" help="doc-en_US/doc/messages/0310.html" severity="2">
   <text>Casting to different object pointer type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0311" level="QA_WARNING" help="doc-en_US/doc/messages/0311.html" severity="4">
   <text>Dangerous pointer cast results in loss of const qualification.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Pointer Conversions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0312" level="QA_WARNING" help="doc-en_US/doc/messages/0312.html" severity="4">
   <text>Dangerous pointer cast results in loss of volatile qualification.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Pointer Conversions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0313" level="QA_WARNING" help="doc-en_US/doc/messages/0313.html" severity="3">
   <text>Casting to different function pointer type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0314" level="QA_WARNING" help="doc-en_US/doc/messages/0314.html" severity="2">
   <text>[I] Cast from a pointer to object type to a pointer to void.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0315" level="QA_WARNING" help="doc-en_US/doc/messages/0315.html" severity="2">
   <text>[I] Implicit conversion from a pointer to object type to a pointer to void.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0316" level="QA_WARNING" help="doc-en_US/doc/messages/0316.html" severity="2">
   <text>[I] Cast from a pointer to void to a pointer to object type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0317" level="QA_WARNING" help="doc-en_US/doc/messages/0317.html" severity="2">
   <text>[I] Implicit conversion from a pointer to void to a pointer to object type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0318" level="QA_WARNING" help="doc-en_US/doc/messages/0318.html" severity="4">
   <text>Redundant type qualifier used in cast</text>
   <references>
    <reference source="ISO:C90 Language [6.3.4]"/>
   </references>
  </message>
  <message id="0320" level="QA_WARNING" help="doc-en_US/doc/messages/0320.html" severity="2">
   <text>[C99] Declaration within 'for' statement.</text>
   <references>
    <reference source="For loops"/>
    <reference source="ISO:C99 Language [6.8.5]"/>
   </references>
  </message>
  <message id="0321" level="QA_WARNING" help="doc-en_US/doc/messages/0321.html" severity="8">
   <text>[C] Declaration within 'for' statement defines an identifier '%1s' which is not an object.</text>
   <references>
    <reference source="For loops"/>
    <reference source="ISO:C99 Language [6.8.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0322" level="QA_WARNING" help="doc-en_US/doc/messages/0322.html" severity="8">
   <text>[C] Illegal storage class specifier used in 'for' statement declaration.</text>
   <references>
    <reference source="For loops"/>
    <reference source="ISO:C99 Language [6.8.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0323" level="QA_WARNING" help="doc-en_US/doc/messages/0323.html" severity="8">
   <text>[C] Cast between a pointer to incomplete type and a floating type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="ISO:C99 Language [6.5.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0324" level="QA_WARNING" help="doc-en_US/doc/messages/0324.html" severity="7">
   <text>[u] Cast between a pointer to incomplete type and an integral type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="ISO:C99 Language [6.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0325" level="QA_WARNING" help="doc-en_US/doc/messages/0325.html" severity="7">
   <text>[u] Cast between a pointer to incomplete type and a pointer to function.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="ISO:C99 Language [6.5.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0326" level="QA_WARNING" help="doc-en_US/doc/messages/0326.html" severity="7">
   <text>[I] Cast between a pointer to void and an integral type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0327" level="QA_WARNING" help="doc-en_US/doc/messages/0327.html" severity="8">
   <text>[C] Cast between a pointer to void and a floating type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0328" level="QA_WARNING" help="doc-en_US/doc/messages/0328.html" severity="7">
   <text>[U] Cast between a pointer to object and an essential type other than signed/unsigned.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0336" level="QA_WARNING" help="doc-en_US/doc/messages/0336.html" severity="1">
   <text>Macro defined as an octal constant.</text>
   <references>
    <reference source="Constants"/>
   </references>
  </message>
  <message id="0337" level="QA_WARNING" help="doc-en_US/doc/messages/0337.html" severity="7">
   <text>[U] String literal has undefined value. This may be a result of using '#' on \\.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0338" level="QA_WARNING" help="doc-en_US/doc/messages/0338.html" severity="8">
   <text>[C] Octal or hex escape sequence value is too large for 'unsigned char' or 'wchar_t' type.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0339" level="QA_WARNING" help="doc-en_US/doc/messages/0339.html" severity="1">
   <text>Octal constant used.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0340" level="QA_WARNING" help="doc-en_US/doc/messages/0340.html" severity="2">
   <text>Using the '#error' preprocessing directive.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.8.5]"/>
   </references>
  </message>
  <message id="0341" level="QA_WARNING" help="doc-en_US/doc/messages/0341.html" severity="2">
   <text>Using the stringify operator '#'.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.8.3.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0342" level="QA_WARNING" help="doc-en_US/doc/messages/0342.html" severity="2">
   <text>Using the glue operator '##'.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.8.3.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0343" level="QA_WARNING" help="doc-en_US/doc/messages/0343.html" severity="2">
   <text>Using string literal concatenation.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [5.1.1.2]"/>
   </references>
  </message>
  <message id="0344" level="QA_WARNING" help="doc-en_US/doc/messages/0344.html" severity="2">
   <text>Using function prototype syntax.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
   </references>
  </message>
  <message id="0345" level="QA_WARNING" help="doc-en_US/doc/messages/0345.html" severity="2">
   <text>Using the keyword 'void'.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
   </references>
  </message>
  <message id="0346" level="QA_WARNING" help="doc-en_US/doc/messages/0346.html" severity="2">
   <text>Using one of the keywords 'signed', 'const' or 'volatile'.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="0347" level="QA_WARNING" help="doc-en_US/doc/messages/0347.html" severity="2">
   <text>Using 'extern' in the definition of a global variable.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="0348" level="QA_WARNING" help="doc-en_US/doc/messages/0348.html" severity="2">
   <text>Using a bit-field.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="0349" level="QA_WARNING" help="doc-en_US/doc/messages/0349.html" severity="2">
   <text>Using the unary '+' operator.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
   </references>
  </message>
  <message id="0350" level="QA_WARNING" help="doc-en_US/doc/messages/0350.html" severity="2">
   <text>Using the keyword 'enum'.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="0351" level="QA_WARNING" help="doc-en_US/doc/messages/0351.html" severity="2">
   <text>Using an initializer when defining an automatic object of struct, union or array type.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0352" level="QA_WARNING" help="doc-en_US/doc/messages/0352.html" severity="2">
   <text>Using the '#elif' preprocessing directive.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.8.1]"/>
   </references>
  </message>
  <message id="0360" level="QA_WARNING" help="doc-en_US/doc/messages/0360.html" severity="4">
   <text>An expression of pointer type is being converted to type _Bool on assignment.</text>
   <references>
    <reference source="ISO:C99 Language [6.5.16.1]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0361" level="QA_WARNING" help="doc-en_US/doc/messages/0361.html" severity="4">
   <text>An expression of pointer type is being cast to type _Bool.</text>
   <references>
    <reference source="ISO:C99 Language [6.3.1.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0362" level="QA_WARNING" help="doc-en_US/doc/messages/0362.html" severity="6">
   <text>An expression of essentially Boolean type is being cast to a pointer.</text>
   <references>
    <reference source="ISO:C99 Language [6.3.1.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0366" level="QA_WARNING" help="doc-en_US/doc/messages/0366.html" severity="8">
   <text>[C] Syntax error in '#embed' directive.</text>
   <references>
      </references>
  </message>
  <message id="0367" level="QA_WARNING" help="doc-en_US/doc/messages/0367.html" severity="7">
   <text>Unknown parameter '%1s' to '#embed' directive.</text>
   <references>
      </references>
  </message>
  <message id="0368" level="QA_WARNING" help="doc-en_US/doc/messages/0368.html" severity="6">
   <text>Cannot find or open binary resource file '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0371" level="QA_WARNING" help="doc-en_US/doc/messages/0371.html" severity="2">
   <text>[L] Nesting levels of blocks exceeds 127 - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0372" level="QA_WARNING" help="doc-en_US/doc/messages/0372.html" severity="2">
   <text>[L] More than 63 levels of nested conditional inclusion - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0375" level="QA_WARNING" help="doc-en_US/doc/messages/0375.html" severity="2">
   <text>[L] Nesting of parenthesized expressions exceeds 63 - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0376" level="QA_WARNING" help="doc-en_US/doc/messages/0376.html" severity="2">
   <text>Cast between a pointer to object type and an integral type that makes use of the intptr_t or uintptr_t typedef.</text>
   <references>
      </references>
  </message>
  <message id="0377" level="QA_WARNING" help="doc-en_US/doc/messages/0377.html" severity="7">
   <text>Cast between a pointer to void type and an integral type that makes use of the intptr_t or uintptr_t typedef.</text>
   <references>
      </references>
  </message>
  <message id="0380" level="QA_WARNING" help="doc-en_US/doc/messages/0380.html" severity="2">
   <text>[L] Number of macro definitions exceeds 4095 - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0388" level="QA_WARNING" help="doc-en_US/doc/messages/0388.html" severity="2">
   <text>[L] '#include "%s"' causes nesting to exceed 15 levels - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0390" level="QA_WARNING" help="doc-en_US/doc/messages/0390.html" severity="2">
   <text>[L] Number of members in 'struct' or 'union' exceeds 1023 - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0391" level="QA_WARNING" help="doc-en_US/doc/messages/0391.html" severity="2">
   <text>[L] Number of enumeration constants exceeds 1023 - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0392" level="QA_WARNING" help="doc-en_US/doc/messages/0392.html" severity="2">
   <text>[L] Nesting of 'struct' or 'union' types exceeds 63 - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0400" level="QA_WARNING" help="doc-en_US/doc/messages/0400.html" severity="7">
   <text>[U] '%1s' is modified more than once between sequence points - evaluation order unspecified.</text>
   <references>
    <reference source="Evaluation Order"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0401" level="QA_WARNING" help="doc-en_US/doc/messages/0401.html" severity="7">
   <text>[U] '%1s' may be modified more than once between sequence points - evaluation order unspecified.</text>
   <references>
    <reference source="Evaluation Order"/>
    <reference source="ISO:C90 Language [6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0402" level="QA_WARNING" help="doc-en_US/doc/messages/0402.html" severity="7">
   <text>[U] '%1s' is modified and accessed between sequence points - evaluation order unspecified.</text>
   <references>
    <reference source="Evaluation Order"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0403" level="QA_WARNING" help="doc-en_US/doc/messages/0403.html" severity="7">
   <text>[U] '%1s' may be modified and accessed between sequence points - evaluation order unspecified.</text>
   <references>
    <reference source="Evaluation Order"/>
    <reference source="ISO:C90 Language [6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0404" level="QA_WARNING" help="doc-en_US/doc/messages/0404.html" severity="7">
   <text>[U] More than one read access to volatile objects between sequence points.</text>
   <references>
    <reference source="Evaluation Order"/>
    <reference source="ISO:C90 Language [6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0405" level="QA_WARNING" help="doc-en_US/doc/messages/0405.html" severity="7">
   <text>[U] More than one modification of volatile objects between sequence points.</text>
   <references>
    <reference source="Evaluation Order"/>
    <reference source="ISO:C90 Language [6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0410" level="QA_WARNING" help="doc-en_US/doc/messages/0410.html" severity="2">
   <text>[L] Nesting of parentheses exceeds 32 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0422" level="QA_WARNING" help="doc-en_US/doc/messages/0422.html" severity="8">
   <text>[C] Function call contains fewer arguments than prototype specifies.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0423" level="QA_WARNING" help="doc-en_US/doc/messages/0423.html" severity="8">
   <text>[C] Function call contains more arguments than prototype specifies.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0426" level="QA_WARNING" help="doc-en_US/doc/messages/0426.html" severity="8">
   <text>[C] Called function has incomplete return type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0427" level="QA_WARNING" help="doc-en_US/doc/messages/0427.html" severity="8">
   <text>[C] Object identifier used as if it were a function or a function pointer identifier.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0428" level="QA_WARNING" help="doc-en_US/doc/messages/0428.html" severity="2">
   <text>Function identifier is not followed by () but a function call may be intended.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="ISO:C90 Language [6.2.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0429" level="QA_WARNING" help="doc-en_US/doc/messages/0429.html" severity="8">
   <text>[C] Function argument is not of arithmetic type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0430" level="QA_WARNING" help="doc-en_US/doc/messages/0430.html" severity="8">
   <text>[C] Function argument is not of compatible 'struct'/'union' type.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0431" level="QA_WARNING" help="doc-en_US/doc/messages/0431.html" severity="8">
   <text>[C] Function argument points to a more heavily qualified type.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Pointer Conversions"/>
    <reference source="Characters &amp; Strings"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0432" level="QA_WARNING" help="doc-en_US/doc/messages/0432.html" severity="8">
   <text>[C] Function argument is not of compatible pointer type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0433" level="QA_WARNING" help="doc-en_US/doc/messages/0433.html" severity="7">
   <text>[U] Function argument is not of any compatible type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0434" level="QA_ERROR" help="doc-en_US/doc/messages/0434.html" severity="9">
   <text>[S] The identifier '%s' has not been declared.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0435" level="QA_WARNING" help="doc-en_US/doc/messages/0435.html" severity="8">
   <text>[C] The 'struct'/'union' member '%s' does not exist.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0436" level="QA_WARNING" help="doc-en_US/doc/messages/0436.html" severity="8">
   <text>[C] Left operand of '.' must be a 'struct' or 'union' object.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0437" level="QA_WARNING" help="doc-en_US/doc/messages/0437.html" severity="8">
   <text>[C] Left operand of '-&gt;' must be a pointer to a 'struct' or 'union' object.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0446" level="QA_WARNING" help="doc-en_US/doc/messages/0446.html" severity="8">
   <text>[C] Operand of ++/-- must have scalar (arithmetic or pointer) type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.4]"/>
    <reference source="ISO:C90 Language [6.3.3.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0447" level="QA_WARNING" help="doc-en_US/doc/messages/0447.html" severity="8">
   <text>[C] Operand of ++/-- must be a modifiable object.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.4]"/>
    <reference source="ISO:C90 Language [6.3.3.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0448" level="QA_WARNING" help="doc-en_US/doc/messages/0448.html" severity="8">
   <text>[C] Operand of ++/-- must not be a pointer to an object of unknown size.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.4]"/>
    <reference source="ISO:C90 Language [6.3.3.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0449" level="QA_WARNING" help="doc-en_US/doc/messages/0449.html" severity="8">
   <text>[C] Operand of ++/-- must not be a pointer to a function.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.4]"/>
    <reference source="ISO:C90 Language [6.3.3.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0450" level="QA_WARNING" help="doc-en_US/doc/messages/0450.html" severity="7">
   <text>[U] Passing an array with temporary lifetime as a function parameter.</text>
   <references>
    <reference source="ISO:C99 Language [6.2.4]"/>
    <reference source="ISO:C11 Language [6.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0451" level="QA_WARNING" help="doc-en_US/doc/messages/0451.html" severity="8">
   <text>[C] Subscripting requires a pointer (or array lvalue).</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0452" level="QA_WARNING" help="doc-en_US/doc/messages/0452.html" severity="8">
   <text>[C] Cannot subscript a pointer to an object of unknown size.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0453" level="QA_WARNING" help="doc-en_US/doc/messages/0453.html" severity="8">
   <text>[C] An array subscript must have integral type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0454" level="QA_WARNING" help="doc-en_US/doc/messages/0454.html" severity="8">
   <text>[C] The address-of operator '&amp;' cannot be applied to an object declared with 'register'.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0455" level="QA_WARNING" help="doc-en_US/doc/messages/0455.html" severity="6">
   <text>[U] Passing an array with temporary lifetime as a constant function parameter.</text>
   <references>
    <reference source="ISO:C99 Language [6.2.4]"/>
    <reference source="ISO:C11 Language [6.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0456" level="QA_WARNING" help="doc-en_US/doc/messages/0456.html" severity="8">
   <text>[C] This expression does not have an address - '&amp;' may only be applied to an lvalue or a function designator.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0457" level="QA_WARNING" help="doc-en_US/doc/messages/0457.html" severity="8">
   <text>[C] The address-of operator '&amp;' cannot be applied to a bit-field.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0458" level="QA_WARNING" help="doc-en_US/doc/messages/0458.html" severity="8">
   <text>[C] Indirection operator '*' requires operand of pointer type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0459" level="QA_WARNING" help="doc-en_US/doc/messages/0459.html" severity="7">
   <text>[U] Modifying the contents of an array with temporary lifetime.</text>
   <references>
    <reference source="ISO:C99 Language [6.2.4]"/>
    <reference source="ISO:C11 Language [6.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0460" level="QA_WARNING" help="doc-en_US/doc/messages/0460.html" severity="8">
   <text>[C] The keyword static is used in the declaration of the index of an array which is not a function parameter.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.5.2]"/>
   </references>
  </message>
  <message id="0461" level="QA_WARNING" help="doc-en_US/doc/messages/0461.html" severity="8">
   <text>[C] The keyword static is used in the declaration of an inner index of a multi-dimensional array.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.5.2]"/>
   </references>
  </message>
  <message id="0462" level="QA_WARNING" help="doc-en_US/doc/messages/0462.html" severity="8">
   <text>[C] A type qualifier (const, volatile or restrict) is used in the declaration of the index of an array which is not a function parameter.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.5.2]"/>
   </references>
  </message>
  <message id="0463" level="QA_WARNING" help="doc-en_US/doc/messages/0463.html" severity="8">
   <text>[C] A type qualifier (const, volatile or restrict) is used in the declaration of an inner index of a multi-dimensional array.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.5.2]"/>
   </references>
  </message>
  <message id="0464" level="QA_WARNING" help="doc-en_US/doc/messages/0464.html" severity="7">
   <text>[U] Storing a pointer to an array with temporary lifetime.</text>
   <references>
    <reference source="ISO:C99 Language [6.2.4]"/>
    <reference source="ISO:C11 Language [6.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0465" level="QA_WARNING" help="doc-en_US/doc/messages/0465.html" severity="7">
   <text>[U] Returning a pointer to an array with temporary lifetime.</text>
   <references>
    <reference source="ISO:C99 Language [6.2.4]"/>
    <reference source="ISO:C11 Language [6.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0466" level="QA_WARNING" help="doc-en_US/doc/messages/0466.html" severity="8">
   <text>[C] Unary '+' requires arithmetic operand.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0467" level="QA_WARNING" help="doc-en_US/doc/messages/0467.html" severity="8">
   <text>[C] Operand of '!' must have scalar (arithmetic or pointer) type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0468" level="QA_WARNING" help="doc-en_US/doc/messages/0468.html" severity="8">
   <text>[C] Unary '-' requires arithmetic operand.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0469" level="QA_WARNING" help="doc-en_US/doc/messages/0469.html" severity="8">
   <text>[C] Bitwise not '~' requires integral operand.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0473" level="QA_ERROR" help="doc-en_US/doc/messages/0473.html" severity="9">
   <text>[Q] Result of 'sizeof' operation will not fit in configured type for 'size_t'.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.4]"/>
    <reference source="ISO:C90 Language [7.1.5]"/>
   </references>
  </message>
  <message id="0475" level="QA_WARNING" help="doc-en_US/doc/messages/0475.html" severity="7">
   <text>[u] Operand of 'sizeof' is an expression designating a bit-field.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.3.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0476" level="QA_WARNING" help="doc-en_US/doc/messages/0476.html" severity="8">
   <text>[C] 'sizeof' cannot be applied to a bit-field.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.3.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0477" level="QA_WARNING" help="doc-en_US/doc/messages/0477.html" severity="8">
   <text>[C] 'sizeof' cannot be applied to a function.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0478" level="QA_WARNING" help="doc-en_US/doc/messages/0478.html" severity="8">
   <text>[C] 'sizeof' cannot be applied to an object of unknown size.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0481" level="QA_WARNING" help="doc-en_US/doc/messages/0481.html" severity="8">
   <text>[C] Only scalar expressions may be cast to other types.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0482" level="QA_WARNING" help="doc-en_US/doc/messages/0482.html" severity="8">
   <text>[C] Expressions may only be cast to 'void' or scalar types.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0483" level="QA_WARNING" help="doc-en_US/doc/messages/0483.html" severity="8">
   <text>[C] A pointer to an object of unknown size cannot be the operand of an addition operator.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0484" level="QA_WARNING" help="doc-en_US/doc/messages/0484.html" severity="8">
   <text>[C] A pointer to an object of unknown size cannot be the operand of a subtraction operator.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0485" level="QA_WARNING" help="doc-en_US/doc/messages/0485.html" severity="8">
   <text>[C] Only integral expressions may be added to pointers.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0486" level="QA_WARNING" help="doc-en_US/doc/messages/0486.html" severity="8">
   <text>[C] Only integral expressions and compatible pointers may be subtracted from pointers.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0487" level="QA_WARNING" help="doc-en_US/doc/messages/0487.html" severity="8">
   <text>[C] If two pointers are subtracted, they must be pointers that address compatible types.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.3.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0488" level="QA_WARNING" help="doc-en_US/doc/messages/0488.html" severity="2">
   <text>Performing pointer arithmetic.</text>
   <references>
    <reference source="Pointer Usage"/>
    <reference source="ISO:C90 Language [6.3.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0489" level="QA_WARNING" help="doc-en_US/doc/messages/0489.html" severity="2">
   <text>The integer value 1 is being added or subtracted from a pointer.</text>
   <references>
    <reference source="Pointer Usage"/>
    <reference source="ISO:C90 Language [6.3.6]"/>
   </references>
  </message>
  <message id="0490" level="QA_WARNING" help="doc-en_US/doc/messages/0490.html" severity="2">
   <text>Relational operator used to compare two pointers.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Pointer Usage"/>
    <reference source="ISO:C90 Language [6.3.8]"/>
   </references>
  </message>
  <message id="0491" level="QA_WARNING" help="doc-en_US/doc/messages/0491.html" severity="2">
   <text>Array subscripting applied to an object of pointer type.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Pointer Usage"/>
    <reference source="ISO:C90 Language [6.3.2.1]"/>
    <reference source="ISO:C90 Language [6.2.2.1]"/>
    <reference source="ISO:C90 Language [6.7.1]"/>
   </references>
  </message>
  <message id="0492" level="QA_WARNING" help="doc-en_US/doc/messages/0492.html" severity="2">
   <text>Array subscripting applied to a function parameter declared as a pointer.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Pointer Usage"/>
    <reference source="ISO:C90 Language [6.3.2.1]"/>
    <reference source="ISO:C90 Language [6.2.2.1]"/>
    <reference source="ISO:C90 Language [6.7.1]"/>
   </references>
  </message>
  <message id="0493" level="QA_WARNING" help="doc-en_US/doc/messages/0493.html" severity="8">
   <text>[C] Type of left operand is not compatible with this operator.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0494" level="QA_WARNING" help="doc-en_US/doc/messages/0494.html" severity="8">
   <text>[C] Type of right operand is not compatible with this operator.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0495" level="QA_WARNING" help="doc-en_US/doc/messages/0495.html" severity="8">
   <text>[C] Left operand of '%', '&lt;&lt;', '&gt;&gt;', '&amp;', '^' or '|' must have integral type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.5]"/>
    <reference source="ISO:C90 Language [6.3.7]"/>
    <reference source="ISO:C90 Language [6.3.10]"/>
    <reference source="ISO:C90 Language [6.3.11]"/>
    <reference source="ISO:C90 Language [6.3.12]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0496" level="QA_WARNING" help="doc-en_US/doc/messages/0496.html" severity="8">
   <text>[C] Right operand of '%', '&lt;&lt;', '&gt;&gt;', '&amp;', '^' or '|' must have integral type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.5]"/>
    <reference source="ISO:C90 Language [6.3.7]"/>
    <reference source="ISO:C90 Language [6.3.10]"/>
    <reference source="ISO:C90 Language [6.3.11]"/>
    <reference source="ISO:C90 Language [6.3.12]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0497" level="QA_WARNING" help="doc-en_US/doc/messages/0497.html" severity="7">
   <text>[E] Performing pointer arithmetic on pointer to void.</text>
   <references>
      </references>
  </message>
  <message id="0498" level="QA_WARNING" help="doc-en_US/doc/messages/0498.html" severity="2">
   <text>A unary increment or decrement operator is being applied to a pointer.</text>
   <references>
    <reference source="Pointer Usage"/>
    <reference source="ISO:C90 Language [6.3.6]"/>
   </references>
  </message>
  <message id="0499" level="QA_WARNING" help="doc-en_US/doc/messages/0499.html" severity="2">
   <text>Right operand of shift operator is greater than or equal to the width of the essential type of the left operand.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0502" level="QA_WARNING" help="doc-en_US/doc/messages/0502.html" severity="2">
   <text>A right shift on signed data may be an arithmetic or a logical shift.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0513" level="QA_WARNING" help="doc-en_US/doc/messages/0513.html" severity="8">
   <text>[C] Relational operator used to compare pointers to incompatible types.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.8]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0514" level="QA_WARNING" help="doc-en_US/doc/messages/0514.html" severity="8">
   <text>[C] Relational operator used to compare a pointer with an incompatible operand.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.8]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0515" level="QA_WARNING" help="doc-en_US/doc/messages/0515.html" severity="8">
   <text>[C] Equality operator used to compare a pointer with an incompatible operand.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.9]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0536" level="QA_WARNING" help="doc-en_US/doc/messages/0536.html" severity="8">
   <text>[C] First operand of '&amp;&amp;', '||' or '?' must have scalar (arithmetic or pointer) type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.13.15]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0537" level="QA_WARNING" help="doc-en_US/doc/messages/0537.html" severity="8">
   <text>[C] Second operand of '&amp;&amp;' or '||' must have scalar (arithmetic or pointer) type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.13.14]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0540" level="QA_WARNING" help="doc-en_US/doc/messages/0540.html" severity="8">
   <text>[C] 2nd and 3rd operands of conditional operator '?' must have compatible types.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.15]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0541" level="QA_WARNING" help="doc-en_US/doc/messages/0541.html" severity="8">
   <text>[C] Argument no. %s does not have object type.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0542" level="QA_WARNING" help="doc-en_US/doc/messages/0542.html" severity="8">
   <text>[C] Controlling expression must have scalar (arithmetic or pointer) type.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.4.1]"/>
    <reference source="ISO:C90 Language [6.6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0543" level="QA_WARNING" help="doc-en_US/doc/messages/0543.html" severity="7">
   <text>[U] 'void' expressions have no value and may not be used in expressions.</text>
   <references>
    <reference source="ISO:C90 Language [6.2.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0544" level="QA_WARNING" help="doc-en_US/doc/messages/0544.html" severity="7">
   <text>[U] The value of an incomplete 'union' may not be used.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.2.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0545" level="QA_WARNING" help="doc-en_US/doc/messages/0545.html" severity="7">
   <text>[U] The value of an incomplete 'struct' may not be used.</text>
   <references>
    <reference source="ISO:C90 Language [6.2.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0546" level="QA_WARNING" help="doc-en_US/doc/messages/0546.html" severity="8">
   <text>[C] 'enum %1s' has unknown content. Use of an enum tag with undefined content is not permitted.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0547" level="QA_WARNING" help="doc-en_US/doc/messages/0547.html" severity="8">
   <text>[C] This declaration of tag '%1s' conflicts with a previous declaration.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="ISO:C90 Language [6.5.2.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0550" level="QA_WARNING" help="doc-en_US/doc/messages/0550.html" severity="8">
   <text>[C] Left operand of '+=' or '-=' is a pointer to an object of unknown size.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0551" level="QA_WARNING" help="doc-en_US/doc/messages/0551.html" severity="2">
   <text>[E] Cast may not operate on the left operand of the assignment operator.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0553" level="QA_WARNING" help="doc-en_US/doc/messages/0553.html" severity="2">
   <text>Translation unit contains no object or function definitions with external linkage.</text>
   <references>
      </references>
  </message>
  <message id="0554" level="QA_WARNING" help="doc-en_US/doc/messages/0554.html" severity="8">
   <text>[C] 'static %1s()' has been declared and called but no definition has been given.</text>
   <references>
    <reference source="ISO:C90 Language [6.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0555" level="QA_WARNING" help="doc-en_US/doc/messages/0555.html" severity="8">
   <text>[C] Invalid assignment to object of void type or array type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0556" level="QA_WARNING" help="doc-en_US/doc/messages/0556.html" severity="8">
   <text>[C] Left operand of assignment must be a modifiable object.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0557" level="QA_WARNING" help="doc-en_US/doc/messages/0557.html" severity="8">
   <text>[C] Right operand of assignment is not of arithmetic type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0558" level="QA_WARNING" help="doc-en_US/doc/messages/0558.html" severity="8">
   <text>[C] Right operand of '+=' or '-=' must have integral type when left operand is a pointer.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0559" level="QA_WARNING" help="doc-en_US/doc/messages/0559.html" severity="8">
   <text>[C] Right operand of '&lt;&lt;=', '&gt;&gt;=', '&amp;=', '|=', '^=' or '%=' must have integral type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0560" level="QA_WARNING" help="doc-en_US/doc/messages/0560.html" severity="8">
   <text>[C] Left operand of '&lt;&lt;=', '&gt;&gt;=', '&amp;=', '|=', '^=' or '%=' must have integral type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0561" level="QA_WARNING" help="doc-en_US/doc/messages/0561.html" severity="8">
   <text>[C] Right operand of assignment is not of compatible 'struct'/'union' type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0562" level="QA_WARNING" help="doc-en_US/doc/messages/0562.html" severity="8">
   <text>[C] Right operand of assignment points to a more heavily qualified type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="Type Qualifiers"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0563" level="QA_WARNING" help="doc-en_US/doc/messages/0563.html" severity="8">
   <text>[C] Right operand of assignment is not of compatible pointer type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="Type Qualifiers"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0564" level="QA_WARNING" help="doc-en_US/doc/messages/0564.html" severity="8">
   <text>[C] Left operand of assignment must be an lvalue (it must designate an object).</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0565" level="QA_WARNING" help="doc-en_US/doc/messages/0565.html" severity="8">
   <text>[C] Left operand of '+=' or '-=' must be of arithmetic or pointer to object type.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.16.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0570" level="QA_WARNING" help="doc-en_US/doc/messages/0570.html" severity="5">
   <text>This switch case label of 'essential type' '%1s', is not consistent with a controlling expression of essential type '%2s'.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="0571" level="QA_WARNING" help="doc-en_US/doc/messages/0571.html" severity="2">
   <text>This switch case label of 'essential type' '%1s' is not consistent with a controlling expression which has an essential type of higher rank (%2s).</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="0572" level="QA_WARNING" help="doc-en_US/doc/messages/0572.html" severity="3">
   <text>This switch case label of 'essential type' '%1s' is not consistent with a controlling expression which has an essential type of lower rank (%2s).</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="0580" level="QA_WARNING" help="doc-en_US/doc/messages/0580.html" severity="8">
   <text>[C] Constant is too large to be representable.</text>
   <references>
    <reference source="Unrepresentable Values"/>
    <reference source="Constant Expressions"/>
    <reference source="ISO:C90 Language [6.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0581" level="QA_WARNING" help="doc-en_US/doc/messages/0581.html" severity="2">
   <text>[I] Floating-point constant may be too small to be representable.</text>
   <references>
    <reference source="Constant Expressions"/>
    <reference source="ISO:C90 Language [5.2.4.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0582" level="QA_WARNING" help="doc-en_US/doc/messages/0582.html" severity="2">
   <text>[I] Multiplying the size of an integer by CHAR_BIT will include padding bits in the result.</text>
   <references>
    <reference source="Constant Expressions"/>
   </references>
  </message>
  <message id="0588" level="QA_WARNING" help="doc-en_US/doc/messages/0588.html" severity="8">
   <text>[C] Width of bit-field must be an integral constant expression.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0589" level="QA_WARNING" help="doc-en_US/doc/messages/0589.html" severity="8">
   <text>[C] Enumeration constant must be an integral constant expression.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0590" level="QA_WARNING" help="doc-en_US/doc/messages/0590.html" severity="8">
   <text>[C] Array bound must be an integral constant expression.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0591" level="QA_WARNING" help="doc-en_US/doc/messages/0591.html" severity="8">
   <text>[C] A 'case' label must be an integral constant expression.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0594" level="QA_WARNING" help="doc-en_US/doc/messages/0594.html" severity="3">
   <text>Negative 'case' label expression is incompatible with unsigned controlling expression in 'switch' statement.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0596" level="QA_WARNING" help="doc-en_US/doc/messages/0596.html" severity="1">
   <text>Value of 'case' label expression is too large for type of controlling expression in 'switch' statement.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0597" level="QA_WARNING" help="doc-en_US/doc/messages/0597.html" severity="5">
   <text>Type of 'case' label expression is not consistent with type of controlling expression in 'switch' statement.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0601" level="QA_WARNING" help="doc-en_US/doc/messages/0601.html" severity="2">
   <text>[E] Function 'main()' is not of type 'int (void)' or 'int (int, char *[])'.</text>
   <references>
    <reference source="ISO:C90 Language [5.1.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0602" level="QA_WARNING" help="doc-en_US/doc/messages/0602.html" severity="7">
   <text>[U] The identifier '%1s' is reserved for use by the library.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0603" level="QA_WARNING" help="doc-en_US/doc/messages/0603.html" severity="7">
   <text>[U] The macro identifier '%1s' is reserved.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0604" level="QA_WARNING" help="doc-en_US/doc/messages/0604.html" severity="2">
   <text>[C99] Declaration appears after statements in a compound statement.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.2]"/>
   </references>
  </message>
  <message id="0605" level="QA_WARNING" help="doc-en_US/doc/messages/0605.html" severity="8">
   <text>[C] A declaration must declare a tag or an identifier.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0606" level="QA_WARNING" help="doc-en_US/doc/messages/0606.html" severity="2">
   <text>Object '%s' is declared using typedefs which are different to those in a previous declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.1.2.6]"/>
   </references>
  </message>
  <message id="0609" level="QA_WARNING" help="doc-en_US/doc/messages/0609.html" severity="2">
   <text>[L] More than 12 pointer, array or function declarators modifying a declaration - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0611" level="QA_WARNING" help="doc-en_US/doc/messages/0611.html" severity="2">
   <text>[L] Nesting of 'struct' or 'union' types exceeds 15 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0612" level="QA_WARNING" help="doc-en_US/doc/messages/0612.html" severity="2">
   <text>[L] Size of object '%1s' exceeds 32767 bytes - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0613" level="QA_WARNING" help="doc-en_US/doc/messages/0613.html" severity="2">
   <text>[L] Size of object '%1s' exceeds 65535 bytes - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0614" level="QA_WARNING" help="doc-en_US/doc/messages/0614.html" severity="2">
   <text>[L] More than 127 block scope identifiers defined within a block - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0615" level="QA_WARNING" help="doc-en_US/doc/messages/0615.html" severity="2">
   <text>[L] More than 511 block scope identifiers defined within a block - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0616" level="QA_WARNING" help="doc-en_US/doc/messages/0616.html" severity="8">
   <text>[C] Illegal combination of type specifiers or storage class specifiers.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.1]"/>
    <reference source="ISO:C90 Language [6.5.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0617" level="QA_WARNING" help="doc-en_US/doc/messages/0617.html" severity="2">
   <text>[C99] 'const' qualifier has been duplicated.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.3]"/>
    <reference source="ISO:C99 Language [6.7.3]"/>
   </references>
  </message>
  <message id="0618" level="QA_WARNING" help="doc-en_US/doc/messages/0618.html" severity="2">
   <text>[C99] 'volatile' qualifier has been duplicated.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.3]"/>
    <reference source="ISO:C99 Language [6.7.3]"/>
   </references>
  </message>
  <message id="0619" level="QA_WARNING" help="doc-en_US/doc/messages/0619.html" severity="8">
   <text>[C] The identifier '%1s' has already been defined in the current scope within the ordinary identifier namespace.</text>
   <references>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="ISO:C90 Language [6.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0620" level="QA_WARNING" help="doc-en_US/doc/messages/0620.html" severity="8">
   <text>[C] Cannot initialize '%1s' because it has unknown size.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0621" level="QA_WARNING" help="doc-en_US/doc/messages/0621.html" severity="8">
   <text>[C] The struct/union '%s' cannot be initialized because it has unknown size.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0622" level="QA_WARNING" help="doc-en_US/doc/messages/0622.html" severity="8">
   <text>[C] The identifier '%s' has been declared both with and without linkage in the same scope.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0623" level="QA_WARNING" help="doc-en_US/doc/messages/0623.html" severity="7">
   <text>[U] '%s' has incomplete type and no linkage - this is undefined.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Arrays"/>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0624" level="QA_WARNING" help="doc-en_US/doc/messages/0624.html" severity="2">
   <text>Function '%s' is declared using typedefs which are different to those in a previous declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.1.2.6]"/>
   </references>
  </message>
  <message id="0625" level="QA_WARNING" help="doc-en_US/doc/messages/0625.html" severity="7">
   <text>[U] '%s' has been declared with both internal and external linkage - the behaviour is undefined.</text>
   <references>
    <reference source="Linkage"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0626" level="QA_WARNING" help="doc-en_US/doc/messages/0626.html" severity="7">
   <text>[U] '%s' has different type to previous declaration (which is no longer in scope).</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.1.2.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0627" level="QA_WARNING" help="doc-en_US/doc/messages/0627.html" severity="8">
   <text>[C] '%s' has different type to previous declaration in the same scope.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0628" level="QA_WARNING" help="doc-en_US/doc/messages/0628.html" severity="8">
   <text>[C] '%s' has different type to previous declaration at wider scope.</text>
   <references>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0629" level="QA_WARNING" help="doc-en_US/doc/messages/0629.html" severity="8">
   <text>[C] More than one definition of '%s' (with internal linkage).</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0630" level="QA_WARNING" help="doc-en_US/doc/messages/0630.html" severity="7">
   <text>[U] More than one definition of '%s' (with external linkage).</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0631" level="QA_WARNING" help="doc-en_US/doc/messages/0631.html" severity="8">
   <text>[C] More than one declaration of '%s' (with no linkage).</text>
   <references>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0632" level="QA_WARNING" help="doc-en_US/doc/messages/0632.html" severity="7">
   <text>[U] Tentative definition of '%s' with internal linkage cannot have unknown size.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.7.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0633" level="QA_WARNING" help="doc-en_US/doc/messages/0633.html" severity="2">
   <text>[E] Empty structures and unions are a language extension.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0634" level="QA_WARNING" help="doc-en_US/doc/messages/0634.html" severity="2">
   <text>[I] Bit-field %1s in %2s has not been declared explicitly as unsigned or signed.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0635" level="QA_WARNING" help="doc-en_US/doc/messages/0635.html" severity="2">
   <text>[C99] Bit-field %1s in %2s has been declared with a type not explicitly supported.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0636" level="QA_WARNING" help="doc-en_US/doc/messages/0636.html" severity="7">
   <text>[U] There are no named members in this 'struct' or 'union'.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0637" level="QA_ERROR" help="doc-en_US/doc/messages/0637.html" severity="9">
   <text>[S] Storage class specifier is illegal on 'struct' or 'union' member.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
   </references>
  </message>
  <message id="0638" level="QA_WARNING" help="doc-en_US/doc/messages/0638.html" severity="8">
   <text>[C] Duplicate member name '%s' in 'struct' or 'union'.</text>
   <references>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0639" level="QA_WARNING" help="doc-en_US/doc/messages/0639.html" severity="2">
   <text>[L] Number of members in 'struct' or 'union' exceeds 127 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0640" level="QA_WARNING" help="doc-en_US/doc/messages/0640.html" severity="8">
   <text>[C] '%s' in 'struct' or 'union' type may not have 'void' type.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0641" level="QA_WARNING" help="doc-en_US/doc/messages/0641.html" severity="8">
   <text>[C] '%s' in 'struct' or 'union' type may not have function type.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0642" level="QA_WARNING" help="doc-en_US/doc/messages/0642.html" severity="8">
   <text>[C] '%s' in 'struct' or 'union' type may not be an array of unknown size.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0643" level="QA_WARNING" help="doc-en_US/doc/messages/0643.html" severity="8">
   <text>[C] '%s' in 'struct' or 'union' type may not be a 'struct' or 'union' with unknown content.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0644" level="QA_WARNING" help="doc-en_US/doc/messages/0644.html" severity="8">
   <text>[C] Width of bit-field must be no bigger than the width of its declared type.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0645" level="QA_WARNING" help="doc-en_US/doc/messages/0645.html" severity="8">
   <text>[C] A zero width bit-field cannot be given a name.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0646" level="QA_WARNING" help="doc-en_US/doc/messages/0646.html" severity="8">
   <text>[C] Enumeration constants must have values representable as 'int's.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0647" level="QA_WARNING" help="doc-en_US/doc/messages/0647.html" severity="2">
   <text>[L] Number of enumeration constants exceeds 127 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0648" level="QA_ERROR" help="doc-en_US/doc/messages/0648.html" severity="9">
   <text>[S] Unexpected '{' encountered at file scope.</text>
   <references>
      </references>
  </message>
  <message id="0649" level="QA_WARNING" help="doc-en_US/doc/messages/0649.html" severity="8">
   <text>[C] K&amp;R style declaration of parameters is not legal after a function header that includes a parameter list.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.7.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0650" level="QA_WARNING" help="doc-en_US/doc/messages/0650.html" severity="8">
   <text>[C] Illegal storage class specifier on named function parameter.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.7.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0651" level="QA_WARNING" help="doc-en_US/doc/messages/0651.html" severity="8">
   <text>[C] Missing type specifiers in function declaration.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0652" level="QA_WARNING" help="doc-en_US/doc/messages/0652.html" severity="3">
   <text>Identifiers have been provided for some but not all of the parameters in a function prototype.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
   </references>
  </message>
  <message id="0653" level="QA_WARNING" help="doc-en_US/doc/messages/0653.html" severity="8">
   <text>[C] Duplicate definition of 'struct', 'union' or 'enum' tag '%s'.</text>
   <references>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="ISO:C90 Language [6.5.2.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0654" level="QA_WARNING" help="doc-en_US/doc/messages/0654.html" severity="4">
   <text>Using 'const' or 'volatile' qualification on a function return type is meaningless.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0655" level="QA_WARNING" help="doc-en_US/doc/messages/0655.html" severity="8">
   <text>[C] Illegal storage class specifier on unnamed function parameter.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.7.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0656" level="QA_WARNING" help="doc-en_US/doc/messages/0656.html" severity="8">
   <text>[C] Function return type cannot be function or array type, or an incomplete struct/union (for function definition).</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.7.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0657" level="QA_WARNING" help="doc-en_US/doc/messages/0657.html" severity="8">
   <text>[C] Unnamed parameter specified in function definition.</text>
   <references>
    <reference source="ISO:C90 Language [6.7.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0658" level="QA_WARNING" help="doc-en_US/doc/messages/0658.html" severity="7">
   <text>[U] Parameter cannot have 'void' type.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0659" level="QA_WARNING" help="doc-en_US/doc/messages/0659.html" severity="8">
   <text>[C] The identifier '%s' was not given in the parameter list.</text>
   <references>
    <reference source="ISO:C90 Language [6.7.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0660" level="QA_WARNING" help="doc-en_US/doc/messages/0660.html" severity="2">
   <text>[C11] Defining an unnamed member in a struct or union.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0661" level="QA_WARNING" help="doc-en_US/doc/messages/0661.html" severity="7">
   <text>[U] '%1s()' may not have a storage class specifier of '%2s' when declared at block scope.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0662" level="QA_WARNING" help="doc-en_US/doc/messages/0662.html" severity="2">
   <text>[C11] Accessing a member of an unnamed struct or union member.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0664" level="QA_WARNING" help="doc-en_US/doc/messages/0664.html" severity="8">
   <text>[C] Parameter specified with type 'void'.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0665" level="QA_WARNING" help="doc-en_US/doc/messages/0665.html" severity="8">
   <text>[C] Two parameters have been declared with the same name '%1s'.</text>
   <references>
    <reference source="ISO:C90 Language [6.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0666" level="QA_ERROR" help="doc-en_US/doc/messages/0666.html" severity="9">
   <text>[S] Only type qualifiers 'const' or 'volatile' are legal here in a pointer declaration.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4]"/>
   </references>
  </message>
  <message id="0667" level="QA_WARNING" help="doc-en_US/doc/messages/0667.html" severity="7">
   <text>[U] '%s' is declared as a typedef and may not be redeclared as an object at an inner scope without an explicit type specifier.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0668" level="QA_WARNING" help="doc-en_US/doc/messages/0668.html" severity="7">
   <text>[U] '%s' is declared as a typedef and may not be redeclared as a member of a 'struct' or 'union' without an explicit type specifier.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.6]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0669" level="QA_WARNING" help="doc-en_US/doc/messages/0669.html" severity="8">
   <text>[C] The restrict qualifier can only be applied to pointer types derived from object or incomplete types.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.3.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0670" level="QA_ERROR" help="doc-en_US/doc/messages/0670.html" severity="9">
   <text>[S] Function defined with invalid function header syntax.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4]"/>
   </references>
  </message>
  <message id="0671" level="QA_WARNING" help="doc-en_US/doc/messages/0671.html" severity="8">
   <text>[C] Initializer for object of arithmetic type is not of arithmetic type.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0672" level="QA_WARNING" help="doc-en_US/doc/messages/0672.html" severity="7">
   <text>[U] The initializer for a 'struct', 'union' or array is not enclosed in braces.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0673" level="QA_WARNING" help="doc-en_US/doc/messages/0673.html" severity="8">
   <text>[C] Initializer points to a more heavily qualified type.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="Type Qualifiers"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0674" level="QA_WARNING" help="doc-en_US/doc/messages/0674.html" severity="8">
   <text>[C] Initializer for pointer is of incompatible type.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0675" level="QA_WARNING" help="doc-en_US/doc/messages/0675.html" severity="8">
   <text>[C] Initializer is not of compatible 'struct'/'union' type.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0676" level="QA_WARNING" help="doc-en_US/doc/messages/0676.html" severity="7">
   <text>[u] Array element is of function type. Arrays cannot be constructed from function types.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0677" level="QA_WARNING" help="doc-en_US/doc/messages/0677.html" severity="8">
   <text>[C] Array size is negative, or unrepresentable.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0678" level="QA_WARNING" help="doc-en_US/doc/messages/0678.html" severity="7">
   <text>[u] Array element is array of unknown size. Arrays cannot be constructed from incomplete types.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0680" level="QA_WARNING" help="doc-en_US/doc/messages/0680.html" severity="7">
   <text>[u] Array element is 'void' or an incomplete 'struct' or 'union'. Arrays cannot be constructed from incomplete types.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0681" level="QA_WARNING" help="doc-en_US/doc/messages/0681.html" severity="7">
   <text>[U] Assignment between two incompatible members of the same union.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0682" level="QA_WARNING" help="doc-en_US/doc/messages/0682.html" severity="8">
   <text>[C] Initializer for object of a character type is a string literal.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0683" level="QA_WARNING" help="doc-en_US/doc/messages/0683.html" severity="8">
   <text>[C] Initializer for object of a character type is a wide string literal.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0684" level="QA_WARNING" help="doc-en_US/doc/messages/0684.html" severity="8">
   <text>[C] Too many initializers.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0685" level="QA_WARNING" help="doc-en_US/doc/messages/0685.html" severity="8">
   <text>[C] Initializer for any object with static storage duration must be a constant expression.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0686" level="QA_WARNING" help="doc-en_US/doc/messages/0686.html" severity="3">
   <text>Array has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0687" level="QA_WARNING" help="doc-en_US/doc/messages/0687.html" severity="5">
   <text>Array has been initialized using concatenated strings and has fewer initializers than its declared size.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0688" level="QA_WARNING" help="doc-en_US/doc/messages/0688.html" severity="5">
   <text>Array size determined by number of initializers which include concatenated string literals.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [5.1.1.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0690" level="QA_WARNING" help="doc-en_US/doc/messages/0690.html" severity="8">
   <text>[C] String literal contains too many characters to initialize object.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0691" level="QA_WARNING" help="doc-en_US/doc/messages/0691.html" severity="3">
   <text>Array initialized with designators has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0692" level="QA_WARNING" help="doc-en_US/doc/messages/0692.html" severity="2">
   <text>Union initializer is missing the optional {.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0693" level="QA_WARNING" help="doc-en_US/doc/messages/0693.html" severity="2">
   <text>Struct initializer is missing the optional {.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0694" level="QA_WARNING" help="doc-en_US/doc/messages/0694.html" severity="2">
   <text>Array initializer is missing the optional {.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0695" level="QA_WARNING" help="doc-en_US/doc/messages/0695.html" severity="5">
   <text>Type given in sizeof is not compatible with the pointed to type used to cast malloc.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0696" level="QA_WARNING" help="doc-en_US/doc/messages/0696.html" severity="5">
   <text>The size of the allocated memory block is smaller than the size of the object type addressed by the pointer cast.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0697" level="QA_WARNING" help="doc-en_US/doc/messages/0697.html" severity="5">
   <text>The size of the allocated memory block is not an integral multiple of the size of the object type addressed by the pointer cast.</text>
   <references>
    <reference source="Library"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0698" level="QA_WARNING" help="doc-en_US/doc/messages/0698.html" severity="8">
   <text>[C] String literal used to initialize an object of incompatible type.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0699" level="QA_WARNING" help="doc-en_US/doc/messages/0699.html" severity="8">
   <text>[C] String literal used to initialize a pointer of incompatible type.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0701" level="QA_WARNING" help="doc-en_US/doc/messages/0701.html" severity="3">
   <text>Argument for memory size does not refer to 'sizeof (%1s)'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0702" level="QA_WARNING" help="doc-en_US/doc/messages/0702.html" severity="2">
   <text>Result of sizeof operator is not explicitly cast.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="0703" level="QA_WARNING" help="doc-en_US/doc/messages/0703.html" severity="4">
   <text>Structure has fewer initializers than its declared size. Default initialization is applied to the remainder of the members.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0704" level="QA_WARNING" help="doc-en_US/doc/messages/0704.html" severity="4">
   <text>Structure initialized with designators has fewer initializers than its declared size. Default initialization is applied to the remainder of the members.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="0705" level="QA_WARNING" help="doc-en_US/doc/messages/0705.html" severity="3">
   <text>Argument for memory size of a wide string does not add space for a null terminator.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0706" level="QA_WARNING" help="doc-en_US/doc/messages/0706.html" severity="7">
   <text>[U] Label '%s' is not unique within this function.</text>
   <references>
    <reference source="Goto and Labels"/>
    <reference source="ISO:C90 Language [6.1.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0708" level="QA_WARNING" help="doc-en_US/doc/messages/0708.html" severity="8">
   <text>[C] No definition found for the label '%s' in this function.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.6.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0709" level="QA_WARNING" help="doc-en_US/doc/messages/0709.html" severity="8">
   <text>[C] Initialization of locally declared 'extern %s' is illegal.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0710" level="QA_WARNING" help="doc-en_US/doc/messages/0710.html" severity="2">
   <text>[E] This character array is being initialized by a parenthesized string literal.</text>
   <references>
    <reference source="ISO:C11 Language [6.7.9]"/>
   </references>
  </message>
  <message id="0711" level="QA_WARNING" help="doc-en_US/doc/messages/0711.html" severity="7">
   <text>[U] This array is being initialized by a compound literal array instead of a braced initializer list.</text>
   <references>
    <reference source="ISO:C11 Language [6.7.9]"/>
   </references>
  </message>
  <message id="0715" level="QA_WARNING" help="doc-en_US/doc/messages/0715.html" severity="2">
   <text>[L] Nesting of control structures (statements) exceeds 15 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0722" level="QA_WARNING" help="doc-en_US/doc/messages/0722.html" severity="2">
   <text>Enum constant not explicitly initialized, but a previous constant has been.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="0723" level="QA_WARNING" help="doc-en_US/doc/messages/0723.html" severity="2">
   <text>Initialize none, first only, or all entries in this enumerator list.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="0724" level="QA_WARNING" help="doc-en_US/doc/messages/0724.html" severity="2">
   <text>The value of this implicitly-specified enumeration constant is not unique.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0735" level="QA_WARNING" help="doc-en_US/doc/messages/0735.html" severity="5">
   <text>Switch expression is of essentially Boolean type.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0736" level="QA_WARNING" help="doc-en_US/doc/messages/0736.html" severity="8">
   <text>[C] 'case' label does not have unique value within this 'switch' statement.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0737" level="QA_WARNING" help="doc-en_US/doc/messages/0737.html" severity="8">
   <text>[C] More than one 'default' label found in 'switch' statement.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0738" level="QA_WARNING" help="doc-en_US/doc/messages/0738.html" severity="8">
   <text>[C] Controlling expression in a 'switch' statement must have integral type.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0739" level="QA_WARNING" help="doc-en_US/doc/messages/0739.html" severity="2">
   <text>[L] Number of 'case' labels exceeds 257 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0745" level="QA_WARNING" help="doc-en_US/doc/messages/0745.html" severity="7">
   <text>[U] 'return;' found in '%s()', which has been defined with a non-'void' return type.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Function Returns"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0746" level="QA_WARNING" help="doc-en_US/doc/messages/0746.html" severity="8">
   <text>[C] 'return exp;' found in '%s()' whose return type is 'void'.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0747" level="QA_WARNING" help="doc-en_US/doc/messages/0747.html" severity="8">
   <text>[C] 'return exp;' found in '%s()' whose return type is qualified 'void'.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0750" level="QA_WARNING" help="doc-en_US/doc/messages/0750.html" severity="2">
   <text>A union type specifier has been defined.</text>
   <references>
    <reference source="Structures and Unions"/>
   </references>
  </message>
  <message id="0751" level="QA_WARNING" help="doc-en_US/doc/messages/0751.html" severity="2">
   <text>Casting to char pointer type.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Pointer Conversions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0752" level="QA_WARNING" help="doc-en_US/doc/messages/0752.html" severity="2">
   <text>String literal passed as argument to function whose parameter is not a 'pointer to const'.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Characters &amp; Strings"/>
    <reference source="ISO:C90 Language [6.1.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0753" level="QA_WARNING" help="doc-en_US/doc/messages/0753.html" severity="2">
   <text>String literal assigned to pointer which is not a 'pointer to const'.</text>
   <references>
    <reference source="Characters &amp; Strings"/>
    <reference source="Type Qualifiers"/>
    <reference source="ISO:C90 Language [6.1.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0754" level="QA_WARNING" help="doc-en_US/doc/messages/0754.html" severity="7">
   <text>[U] String literal is being modified.</text>
   <references>
    <reference source="Characters &amp; Strings"/>
    <reference source="Type Qualifiers"/>
    <reference source="ISO:C90 Language [6.1.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0755" level="QA_WARNING" help="doc-en_US/doc/messages/0755.html" severity="8">
   <text>[C] 'return' expression is not of arithmetic type.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0756" level="QA_WARNING" help="doc-en_US/doc/messages/0756.html" severity="8">
   <text>[C] 'return' expression is not of compatible 'struct'/'union' type.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0757" level="QA_WARNING" help="doc-en_US/doc/messages/0757.html" severity="8">
   <text>[C] 'return' expression points to a more heavily qualified type.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0758" level="QA_WARNING" help="doc-en_US/doc/messages/0758.html" severity="8">
   <text>[C] 'return' expression is not of compatible pointer type.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="ISO:C90 Language [6.3.16.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0759" level="QA_WARNING" help="doc-en_US/doc/messages/0759.html" severity="2">
   <text>An object of union type has been defined.</text>
   <references>
    <reference source="Structures and Unions"/>
   </references>
  </message>
  <message id="0766" level="QA_WARNING" help="doc-en_US/doc/messages/0766.html" severity="8">
   <text>[C] 'continue' statement found outside an iteration statement.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.6.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0767" level="QA_WARNING" help="doc-en_US/doc/messages/0767.html" severity="8">
   <text>[C] 'break' statement found outside a 'switch' or iteration statement.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.6.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0768" level="QA_WARNING" help="doc-en_US/doc/messages/0768.html" severity="8">
   <text>[C] 'case' or 'default' found outside a 'switch' statement.</text>
   <references>
    <reference source="ISO:C90 Language [6.6.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0769" level="QA_WARNING" help="doc-en_US/doc/messages/0769.html" severity="1">
   <text>A 'break' statement has been used to terminate an iteration statement.</text>
   <references>
    <reference source="Control"/>
   </references>
  </message>
  <message id="0770" level="QA_WARNING" help="doc-en_US/doc/messages/0770.html" severity="1">
   <text>A 'continue' statement has been used.</text>
   <references>
    <reference source="Control"/>
   </references>
  </message>
  <message id="0771" level="QA_WARNING" help="doc-en_US/doc/messages/0771.html" severity="2">
   <text>More than one 'break' statement has been used to terminate this iteration statement.</text>
   <references>
    <reference source="Control"/>
   </references>
  </message>
  <message id="0772" level="QA_WARNING" help="doc-en_US/doc/messages/0772.html" severity="2">
   <text>Multiple jump statements are used to terminate this iteration statement, including 'goto'.</text>
   <references>
    <reference source="Control"/>
   </references>
  </message>
  <message id="0773" level="QA_WARNING" help="doc-en_US/doc/messages/0773.html" severity="2">
   <text>Multiple jump statements are used to terminate this iteration statement, including 'return'.</text>
   <references>
    <reference source="Control"/>
   </references>
  </message>
  <message id="0774" level="QA_WARNING" help="doc-en_US/doc/messages/0774.html" severity="8">
   <text>[C] 'auto' may not be specified on global declaration of '%s'.</text>
   <references>
    <reference source="ISO:C90 Language [6.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0775" level="QA_WARNING" help="doc-en_US/doc/messages/0775.html" severity="8">
   <text>[C] 'register' may not be specified on global declaration of '%s'.</text>
   <references>
    <reference source="ISO:C90 Language [6.7]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0776" level="QA_WARNING" help="doc-en_US/doc/messages/0776.html" severity="2">
   <text>[L] External identifier matches other external identifier(s) (e.g. '%1s') in first 6 characters - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0777" level="QA_WARNING" help="doc-en_US/doc/messages/0777.html" severity="7">
   <text>[U] External identifier does not differ from other identifier(s) (e.g. '%1s') within the specified number of significant characters.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0778" level="QA_WARNING" help="doc-en_US/doc/messages/0778.html" severity="2">
   <text>[L] Identifier matches other identifier(s) (e.g. '%1s') in first 31 characters - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0779" level="QA_WARNING" help="doc-en_US/doc/messages/0779.html" severity="7">
   <text>[U] Identifier does not differ from other identifier(s) (e.g. '%1s') within the specified number of significant characters.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0780" level="QA_WARNING" help="doc-en_US/doc/messages/0780.html" severity="2">
   <text>Another identifier '%1s' is already in scope in a different namespace.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.1.2.3]"/>
   </references>
  </message>
  <message id="0781" level="QA_WARNING" help="doc-en_US/doc/messages/0781.html" severity="2">
   <text>'%1s' is being used as a structure/union member as well as being a label, tag or ordinary identifier.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.1.2.3]"/>
   </references>
  </message>
  <message id="0782" level="QA_WARNING" help="doc-en_US/doc/messages/0782.html" severity="2">
   <text>This identifier, '%1s', will still be in scope when the same identifier is declared later in a different namespace.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2.3]"/>
   </references>
  </message>
  <message id="0783" level="QA_WARNING" help="doc-en_US/doc/messages/0783.html" severity="2">
   <text>A subsequent declaration of '%1s' means that it is being used both as a structure/union member and also as a label, tag or ordinary identifier.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2.3]"/>
   </references>
  </message>
  <message id="0784" level="QA_WARNING" help="doc-en_US/doc/messages/0784.html" severity="3">
   <text>Identifier '%1s' is also used as a macro name.</text>
   <references>
      </references>
  </message>
  <message id="0785" level="QA_WARNING" help="doc-en_US/doc/messages/0785.html" severity="3">
   <text>[L] Identifier matches other macro name(s) (e.g. '%1s') in first 31 characters.</text>
   <references>
    <reference source="ISO:C90 Language [3.1.2]"/>
   </references>
  </message>
  <message id="0786" level="QA_WARNING" help="doc-en_US/doc/messages/0786.html" severity="3">
   <text>[L] Identifier matches other macro name(s) (e.g. '%1s') in first 63 characters.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0787" level="QA_WARNING" help="doc-en_US/doc/messages/0787.html" severity="3">
   <text>Identifier does not differ from other macro name(s) (e.g. '%1s') within the specified number of significant characters.</text>
   <references>
    <reference source="ISO:C90 Language [6.3.2]"/>
   </references>
  </message>
  <message id="0788" level="QA_WARNING" help="doc-en_US/doc/messages/0788.html" severity="2">
   <text>This identifier, '%1s', is used as both a macro name and a function-like macro parameter name.</text>
   <references>
      </references>
  </message>
  <message id="0789" level="QA_WARNING" help="doc-en_US/doc/messages/0789.html" severity="2">
   <text>[L] Identifier matches other identifier(s) (e.g. '%1s') in first 63 characters - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0790" level="QA_WARNING" help="doc-en_US/doc/messages/0790.html" severity="2">
   <text>This translation unit makes use of floating types.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0791" level="QA_WARNING" help="doc-en_US/doc/messages/0791.html" severity="7">
   <text>[U] Macro identifier does not differ from other macro identifier(s) (e.g. '%1s') within the specified number of significant characters.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0792" level="QA_WARNING" help="doc-en_US/doc/messages/0792.html" severity="2">
   <text>[L] Macro identifier matches other macro identifier(s) (e.g. '%1s') in first 31 characters - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0793" level="QA_WARNING" help="doc-en_US/doc/messages/0793.html" severity="2">
   <text>[L] Macro identifier matches other macro identifier(s) (e.g. '%1s') in first 63 characters - program does not conform strictly to ISO:C99.</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0794" level="QA_WARNING" help="doc-en_US/doc/messages/0794.html" severity="7">
   <text>Identifier matches other identifier(s) (e.g. '%1s') in an outer scope within the ISO:C90 limit of 31 significant characters.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0795" level="QA_WARNING" help="doc-en_US/doc/messages/0795.html" severity="7">
   <text>Identifier matches other identifier(s) (e.g. '%1s') in an outer scope within the specified number of significant characters.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0796" level="QA_WARNING" help="doc-en_US/doc/messages/0796.html" severity="2">
   <text>Identifier matches other identifier(s) (e.g. '%1s') in an outer scope within the ISO:C99 limit of 63 significant characters</text>
   <references>
    <reference source="ISO:C99 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0797" level="QA_WARNING" help="doc-en_US/doc/messages/0797.html" severity="2">
   <text>This identifier, '%1s', is used as both a macro name and a function-like macro parameter name.</text>
   <references>
      </references>
  </message>
  <message id="0798" level="QA_WARNING" help="doc-en_US/doc/messages/0798.html" severity="2">
   <text>This identifier, '%1s', is used as both a macro name and a function-like macro parameter name.</text>
   <references>
      </references>
  </message>
  <message id="0801" level="QA_WARNING" help="doc-en_US/doc/messages/0801.html" severity="8">
   <text>[C] The '##' operator may not be the first token in a macro replacement list.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0802" level="QA_WARNING" help="doc-en_US/doc/messages/0802.html" severity="8">
   <text>[C] The '##' operator may not be the last token in a macro replacement list.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0803" level="QA_WARNING" help="doc-en_US/doc/messages/0803.html" severity="8">
   <text>[C] The '#' operator may only appear before a macro parameter.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0804" level="QA_WARNING" help="doc-en_US/doc/messages/0804.html" severity="8">
   <text>[C] Macro parameter '%s' is not unique.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0805" level="QA_ERROR" help="doc-en_US/doc/messages/0805.html" severity="9">
   <text>[S] Invalid identifier encountered in macro parameter list.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3]"/>
   </references>
  </message>
  <message id="0808" level="QA_ERROR" help="doc-en_US/doc/messages/0808.html" severity="9">
   <text>[Q] '#include "%s"' causes itself to be included recursively. QA·C terminates execution after 8 occurrences.</text>
   <references>
      </references>
  </message>
  <message id="0809" level="QA_WARNING" help="doc-en_US/doc/messages/0809.html" severity="5">
   <text>[Q] Filename '%1s' in include directive doesn't match case of filesystem name '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="0810" level="QA_WARNING" help="doc-en_US/doc/messages/0810.html" severity="2">
   <text>[L] '#include "%s"' causes nesting to exceed 8 levels - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0811" level="QA_WARNING" help="doc-en_US/doc/messages/0811.html" severity="8">
   <text>[C] The glue operator '##' may only appear in a '#define' preprocessing directive.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0813" level="QA_WARNING" help="doc-en_US/doc/messages/0813.html" severity="7">
   <text>[U] Using any of the characters ' " or /* in '#include &lt;%s&gt;' gives undefined behaviour.</text>
   <references>
    <reference source="Includes"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.7]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0814" level="QA_WARNING" help="doc-en_US/doc/messages/0814.html" severity="7">
   <text>[U] Using the characters ' or /* in '#include "%s"' gives undefined behaviour.</text>
   <references>
    <reference source="Includes"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.7]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0815" level="QA_WARNING" help="doc-en_US/doc/messages/0815.html" severity="2">
   <text>[L] #include &lt;...&gt;  file name does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="Includes"/>
    <reference source="ISO:C90 Language [6.8.2]"/>
   </references>
  </message>
  <message id="0816" level="QA_WARNING" help="doc-en_US/doc/messages/0816.html" severity="2">
   <text>[L] #include "..."  file name does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="Includes"/>
    <reference source="ISO:C90 Language [6.8.2]"/>
   </references>
  </message>
  <message id="0817" level="QA_WARNING" help="doc-en_US/doc/messages/0817.html" severity="9">
   <text>[S] Closing quote or bracket '&gt;' missing from include filename.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.7]"/>
   </references>
  </message>
  <message id="0818" level="QA_ERROR" help="doc-en_US/doc/messages/0818.html" severity="9">
   <text>[Q] Cannot find '%s' - Perhaps the appropriate search path was not given ?</text>
   <references>
    <reference source="ISO:C90 Language [6.8.2]"/>
   </references>
  </message>
  <message id="0819" level="QA_ERROR" help="doc-en_US/doc/messages/0819.html" severity="9">
   <text>[Q] Cannot open '%s' - Perhaps the appropriate search path was not given ?</text>
   <references>
    <reference source="ISO:C90 Language [6.8.2]"/>
   </references>
  </message>
  <message id="0820" level="QA_ERROR" help="doc-en_US/doc/messages/0820.html" severity="9">
   <text>[S] '#include' requires a header name.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0821" level="QA_WARNING" help="doc-en_US/doc/messages/0821.html" severity="8">
   <text>[C] '#include' does not identify a header or source file that can be processed.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0822" level="QA_ERROR" help="doc-en_US/doc/messages/0822.html" severity="9">
   <text>[Q] Cannot find forceinclude file '%s'.</text>
   <references>
      </references>
  </message>
  <message id="0823" level="QA_ERROR" help="doc-en_US/doc/messages/0823.html" severity="9">
   <text>[S] Unexpected '#else' or '#elif' directive follows '#else'.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0824" level="QA_ERROR" help="doc-en_US/doc/messages/0824.html" severity="9">
   <text>[S] Unexpected '#else' or '#elif' directive found outside a '#if' block.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0825" level="QA_ERROR" help="doc-en_US/doc/messages/0825.html" severity="9">
   <text>[S] Unexpected '#endif' found outside a '#if' block.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0826" level="QA_ERROR" help="doc-en_US/doc/messages/0826.html" severity="9">
   <text>[S] Unexpected ':' found without a preceding '?' in a '#if' or '#elif' expression.</text>
   <references>
      </references>
  </message>
  <message id="0827" level="QA_ERROR" help="doc-en_US/doc/messages/0827.html" severity="9">
   <text>[S] Missing ':' after '?' in a '#if' or '#elif' expression.</text>
   <references>
      </references>
  </message>
  <message id="0828" level="QA_WARNING" help="doc-en_US/doc/messages/0828.html" severity="2">
   <text>[L] More than 8 levels of nested conditional inclusion - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0829" level="QA_ERROR" help="doc-en_US/doc/messages/0829.html" severity="9">
   <text>[S] Could not find '#endif' preprocessing directive to close '#if...'.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0830" level="QA_WARNING" help="doc-en_US/doc/messages/0830.html" severity="2">
   <text>[E] Unrecognized text encountered after a preprocessing directive.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0831" level="QA_WARNING" help="doc-en_US/doc/messages/0831.html" severity="2">
   <text>[E] Use of '\\' in this '#include' line is a PC extension - this usage is non-portable.</text>
   <references>
    <reference source="Includes"/>
    <reference source="ISO:C90 Language [6.1.7]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0832" level="QA_WARNING" help="doc-en_US/doc/messages/0832.html" severity="2">
   <text>Macro substitution in #include preprocessing directive.</text>
   <references>
    <reference source="Includes"/>
   </references>
  </message>
  <message id="0833" level="QA_ERROR" help="doc-en_US/doc/messages/0833.html" severity="9">
   <text>[S] '#ifdef' or '#ifndef' must be followed by an identifier.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0834" level="QA_WARNING" help="doc-en_US/doc/messages/0834.html" severity="8">
   <text>[C] Function-like macro '%s()' is being redefined as an object-like macro.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0835" level="QA_WARNING" help="doc-en_US/doc/messages/0835.html" severity="8">
   <text>[C] Macro '%s' is being redefined with different parameter names.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0836" level="QA_WARNING" help="doc-en_US/doc/messages/0836.html" severity="7">
   <text>[U] Definition of macro named 'defined'.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.8]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0837" level="QA_WARNING" help="doc-en_US/doc/messages/0837.html" severity="7">
   <text>[U] Use of '#undef' to remove the operator 'defined'.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.8]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0838" level="QA_WARNING" help="doc-en_US/doc/messages/0838.html" severity="2">
   <text>File '%1s' has already been included directly from within file '%2s'.</text>
   <references>
    <reference source="Includes"/>
   </references>
  </message>
  <message id="0839" level="QA_WARNING" help="doc-en_US/doc/messages/0839.html" severity="2">
   <text>File '%1s' has already been included indirectly from within file '%2s'.</text>
   <references>
    <reference source="Includes"/>
   </references>
  </message>
  <message id="0840" level="QA_WARNING" help="doc-en_US/doc/messages/0840.html" severity="2">
   <text>[E] Extra tokens at end of #include directive.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0841" level="QA_WARNING" help="doc-en_US/doc/messages/0841.html" severity="2">
   <text>Using '#undef'.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.3.5]"/>
   </references>
  </message>
  <message id="0842" level="QA_WARNING" help="doc-en_US/doc/messages/0842.html" severity="2">
   <text>Using #define or #undef inside a function.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.3.5]"/>
   </references>
  </message>
  <message id="0843" level="QA_WARNING" help="doc-en_US/doc/messages/0843.html" severity="2">
   <text>/ character used in an include file name.</text>
   <references>
    <reference source="Includes"/>
   </references>
  </message>
  <message id="0844" level="QA_WARNING" help="doc-en_US/doc/messages/0844.html" severity="8">
   <text>[C] Macro '%s' is being redefined with a different replacement list.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0845" level="QA_WARNING" help="doc-en_US/doc/messages/0845.html" severity="8">
   <text>[C] Object-like macro '%s' is being redefined as a function-like macro.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0846" level="QA_WARNING" help="doc-en_US/doc/messages/0846.html" severity="9">
   <text>[S] '#%1s' must be followed by an identifier.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0847" level="QA_WARNING" help="doc-en_US/doc/messages/0847.html" severity="2">
   <text>Using '#undef' in a conditionally-excluded block.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.3.5]"/>
   </references>
  </message>
  <message id="0848" level="QA_WARNING" help="doc-en_US/doc/messages/0848.html" severity="7">
   <text>[U] Attempting to #undef '%1s', which is a predefined macro name.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.8]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0849" level="QA_ERROR" help="doc-en_US/doc/messages/0849.html" severity="9">
   <text>[S] Preprocessing directive appears in the middle of a line.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0850" level="QA_WARNING" help="doc-en_US/doc/messages/0850.html" severity="2">
   <text>[C99] Macro argument is empty.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="ISO:C99 Language [6.10.3]"/>
   </references>
  </message>
  <message id="0851" level="QA_ERROR" help="doc-en_US/doc/messages/0851.html" severity="8">
   <text>[C] Function macro '%1s' requires %2s argument(s).</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0852" level="QA_ERROR" help="doc-en_US/doc/messages/0852.html" severity="9">
   <text>[S] Unable to find the ')' that marks the end of the macro call.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0853" level="QA_WARNING" help="doc-en_US/doc/messages/0853.html" severity="7">
   <text>[U] Macro arguments contain a sequence of tokens that has the form of a preprocessing directive.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0854" level="QA_WARNING" help="doc-en_US/doc/messages/0854.html" severity="7">
   <text>[U] Attempting to #define '%1s', which is a predefined macro name.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.8.8]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0855" level="QA_WARNING" help="doc-en_US/doc/messages/0855.html" severity="5">
   <text>Preprocessing results in a sequence of tokens that has the form of a preprocessing directive.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.3.4]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0857" level="QA_WARNING" help="doc-en_US/doc/messages/0857.html" severity="2">
   <text>[L] Number of macro definitions exceeds 1024 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0858" level="QA_WARNING" help="doc-en_US/doc/messages/0858.html" severity="2">
   <text>[L] Number of macro parameters exceeds 31 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0859" level="QA_WARNING" help="doc-en_US/doc/messages/0859.html" severity="2">
   <text>[L] Number of arguments in macro call exceeds 31 - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0861" level="QA_WARNING" help="doc-en_US/doc/messages/0861.html" severity="3">
   <text>This #include &lt;%1s&gt; directive is redundant.</text>
   <references>
    <reference source="Includes"/>
   </references>
  </message>
  <message id="0862" level="QA_WARNING" help="doc-en_US/doc/messages/0862.html" severity="3">
   <text>This #include "%1s" directive is redundant.</text>
   <references>
    <reference source="Includes"/>
   </references>
  </message>
  <message id="0863" level="QA_ERROR" help="doc-en_US/doc/messages/0863.html" severity="9">
   <text>[S] '#line' encountered without a following line number.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="0864" level="QA_WARNING" help="doc-en_US/doc/messages/0864.html" severity="7">
   <text>[U] '#line' directive specifies line number which is not in the range 1 to 32767.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0865" level="QA_WARNING" help="doc-en_US/doc/messages/0865.html" severity="7">
   <text>[U] '#line' directive is badly formed.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0866" level="QA_WARNING" help="doc-en_US/doc/messages/0866.html" severity="8">
   <text>[C] The string literal in a '#line' directive cannot be a 'wide string literal'.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0867" level="QA_WARNING" help="doc-en_US/doc/messages/0867.html" severity="7">
   <text>[U] '#line' has not been followed by a line number.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0868" level="QA_WARNING" help="doc-en_US/doc/messages/0868.html" severity="2">
   <text>An absolute path has been specified in a #include statement.</text>
   <references>
    <reference source="Includes"/>
   </references>
  </message>
  <message id="0869" level="QA_ERROR" help="doc-en_US/doc/messages/0869.html" severity="9">
   <text>[Q] '#error' directive: %s Analysis terminated due to '#error' directive.</text>
   <references>
      </references>
  </message>
  <message id="0870" level="QA_WARNING" help="doc-en_US/doc/messages/0870.html" severity="6">
   <text>[Q] '#warning' directive: %s.</text>
   <references>
      </references>
  </message>
  <message id="0872" level="QA_WARNING" help="doc-en_US/doc/messages/0872.html" severity="7">
   <text>[U] Result of '##' operator is not a legal preprocessing token.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.3.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0873" level="QA_WARNING" help="doc-en_US/doc/messages/0873.html" severity="8">
   <text>[C] Preprocessing token cannot be converted to an actual token.</text>
   <references>
    <reference source="ISO:C90 Language [6.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0874" level="QA_WARNING" help="doc-en_US/doc/messages/0874.html" severity="7">
   <text>[U] Character string literal and wide character string literal are adjacent.</text>
   <references>
    <reference source="Characters"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0875" level="QA_WARNING" help="doc-en_US/doc/messages/0875.html" severity="2">
   <text>[L] String literal exceeds 509 characters - program does not conform strictly to ISO:C90.</text>
   <references>
    <reference source="Constants"/>
    <reference source="ISO:C90 Language [5.2.4.1]"/>
   </references>
  </message>
  <message id="0876" level="QA_WARNING" help="doc-en_US/doc/messages/0876.html" severity="6">
   <text>[S] Ill-formed universal character.</text>
   <references>
    <reference source="ISO:C11 Language [6.4.3]"/>
   </references>
  </message>
  <message id="0877" level="QA_WARNING" help="doc-en_US/doc/messages/0877.html" severity="8">
   <text>[C] '#if' and '#elif' expressions may contain only integral constants.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0878" level="QA_WARNING" help="doc-en_US/doc/messages/0878.html" severity="1">
   <text>Using wide character or string literals.</text>
   <references>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="0879" level="QA_ERROR" help="doc-en_US/doc/messages/0879.html" severity="9">
   <text>[S] Illegal operator in '#if' or '#elif' expression.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0880" level="QA_WARNING" help="doc-en_US/doc/messages/0880.html" severity="2">
   <text>Using # and ## operators in the same macro definition.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.3.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0881" level="QA_WARNING" help="doc-en_US/doc/messages/0881.html" severity="2">
   <text>Using multiple ## operators in the same macro definition.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.3.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0882" level="QA_WARNING" help="doc-en_US/doc/messages/0882.html" severity="2">
   <text>The forceinclude file '%1s' is redundant in this translation unit.</text>
   <references>
      </references>
  </message>
  <message id="0883" level="QA_WARNING" help="doc-en_US/doc/messages/0883.html" severity="2">
   <text>Include file code is not protected against repeated inclusion</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0884" level="QA_WARNING" help="doc-en_US/doc/messages/0884.html" severity="2">
   <text>Using multiple # operators in the same macro definition.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.3.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0885" level="QA_WARNING" help="doc-en_US/doc/messages/0885.html" severity="7">
   <text>[U] The token 'defined' is generated in the expansion of this macro.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0886" level="QA_ERROR" help="doc-en_US/doc/messages/0886.html" severity="9">
   <text>[S] Missing or invalid expression in '#if' or '#elif' directive.</text>
   <references>
      </references>
  </message>
  <message id="0887" level="QA_ERROR" help="doc-en_US/doc/messages/0887.html" severity="9">
   <text>[U] Use of 'defined' must match either 'defined(identifier)' or 'defined identifier'.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0888" level="QA_WARNING" help="doc-en_US/doc/messages/0888.html" severity="7">
   <text>[U] 'defined' requires an identifier as an argument.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0889" level="QA_WARNING" help="doc-en_US/doc/messages/0889.html" severity="2">
   <text>#undef refers to a macro that has previously been #undef'd.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="Macro Usage"/>
   </references>
  </message>
  <message id="0890" level="QA_WARNING" help="doc-en_US/doc/messages/0890.html" severity="2">
   <text>#ifdef refers to a macro that has been #undef'd in a previous #if block.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0891" level="QA_WARNING" help="doc-en_US/doc/messages/0891.html" severity="2">
   <text>#ifdef refers to a macro that has been #undef'd previously.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0892" level="QA_WARNING" help="doc-en_US/doc/messages/0892.html" severity="3">
   <text>This macro parameter is preceded by '#' and followed by '##'.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0893" level="QA_WARNING" help="doc-en_US/doc/messages/0893.html" severity="3">
   <text>Macro argument '%1s' is both expanded as a macro and used with the '%2s' operator.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0894" level="QA_WARNING" help="doc-en_US/doc/messages/0894.html" severity="2">
   <text>'#%s' directive controlling expression does not evaluate to zero or one.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0895" level="QA_WARNING" help="doc-en_US/doc/messages/0895.html" severity="3">
   <text>Macro parameter '%s' is inconsistently subject to macro replacement.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0896" level="QA_ERROR" help="doc-en_US/doc/messages/0896.html" severity="9">
   <text>[S] Missing operand in '#if' or '#elif' expression.</text>
   <references>
      </references>
  </message>
  <message id="0897" level="QA_ERROR" help="doc-en_US/doc/messages/0897.html" severity="9">
   <text>[S] Missing operator in '#if' or '#elif' expression.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="0898" level="QA_ERROR" help="doc-en_US/doc/messages/0898.html" severity="9">
   <text>[S] Unexpected ')' or ':' in '#if' or '#elif' expression.</text>
   <references>
      </references>
  </message>
  <message id="0899" level="QA_WARNING" help="doc-en_US/doc/messages/0899.html" severity="2">
   <text>[E] Unrecognized preprocessing directive has been ignored - assumed to be a language extension.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
    <reference source="ISO:C90 Language [6.8.3.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0901" level="QA_WARNING" help="doc-en_US/doc/messages/0901.html" severity="9">
   <text>Source skipped to this point after error in top level declaration.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0902" level="QA_WARNING" help="doc-en_US/doc/messages/0902.html" severity="9">
   <text>Source skipped to this point after error in parameter declaration.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0903" level="QA_WARNING" help="doc-en_US/doc/messages/0903.html" severity="9">
   <text>Source skipped to this point after error in member declaration.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0904" level="QA_ERROR" help="doc-en_US/doc/messages/0904.html" severity="9">
   <text>[S] Invalid designator.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.8]"/>
   </references>
  </message>
  <message id="0905" level="QA_WARNING" help="doc-en_US/doc/messages/0905.html" severity="6">
   <text>[U] Producing a universal character name through token concatenation is undefined.</text>
   <references>
    <reference source="ISO:C11 Language [5.1.1.2/4]"/>
   </references>
  </message>
  <message id="0906" level="QA_ERROR" help="doc-en_US/doc/messages/0906.html" severity="9">
   <text>[S] Unrecognized suffix or invalid digits in literal constant '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="0907" level="QA_ERROR" help="doc-en_US/doc/messages/0907.html" severity="9">
   <text>[S] Unexpected token.</text>
   <references>
      </references>
  </message>
  <message id="0908" level="QA_WARNING" help="doc-en_US/doc/messages/0908.html" severity="9">
   <text>Skipped tokens until here.</text>
   <references>
      </references>
  </message>
  <message id="0911" level="QA_WARNING" help="doc-en_US/doc/messages/0911.html" severity="9">
   <text>Inserted '%1s' token in an attempt to continue parsing.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0913" level="QA_WARNING" help="doc-en_US/doc/messages/0913.html" severity="9">
   <text>Source skipped to this point after error in 'case' label.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0914" level="QA_WARNING" help="doc-en_US/doc/messages/0914.html" severity="7">
   <text>[U] Source file does not end with a newline character.</text>
   <references>
    <reference source="ISO:C90 Language [5.1.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0915" level="QA_WARNING" help="doc-en_US/doc/messages/0915.html" severity="7">
   <text>[U] Source file ends with a backslash character followed by a newline.</text>
   <references>
    <reference source="ISO:C90 Language [5.1.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0917" level="QA_ERROR" help="doc-en_US/doc/messages/0917.html" severity="9">
   <text>[S] Unable to recover from syntax errors in this source file.</text>
   <references>
      </references>
  </message>
  <message id="0920" level="QA_WARNING" help="doc-en_US/doc/messages/0920.html" severity="9">
   <text>Source skipped to this point after error in expression.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="0925" level="QA_ERROR" help="doc-en_US/doc/messages/0925.html" severity="9">
   <text>[S] Unexpected end of file.</text>
   <references>
      </references>
  </message>
  <message id="0926" level="QA_ERROR" help="doc-en_US/doc/messages/0926.html" severity="9">
   <text>[S] Expected:%1s.</text>
   <references>
      </references>
  </message>
  <message id="0927" level="QA_ERROR" help="doc-en_US/doc/messages/0927.html" severity="9">
   <text>[S] Unexpected ')'.</text>
   <references>
      </references>
  </message>
  <message id="0928" level="QA_ERROR" help="doc-en_US/doc/messages/0928.html" severity="9">
   <text>[S] Missing comma ',' between enumerators.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="0930" level="QA_WARNING" help="doc-en_US/doc/messages/0930.html" severity="2">
   <text>[C99] Trailing comma at the end of an enumerator-list.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="0940" level="QA_WARNING" help="doc-en_US/doc/messages/0940.html" severity="8">
   <text>[C] Illegal usage of a variably modified type.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.5.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0941" level="QA_WARNING" help="doc-en_US/doc/messages/0941.html" severity="8">
   <text>[C] A variable length array may not be initialized.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.8]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0942" level="QA_WARNING" help="doc-en_US/doc/messages/0942.html" severity="7">
   <text>[U] A * can only be used to specify array size within function prototype scope.</text>
   <references>
    <reference source="ISO:C99 Language [6.7.5.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0943" level="QA_WARNING" help="doc-en_US/doc/messages/0943.html" severity="8">
   <text>[C] Jump to label '%s' is a jump into the scope of an identifier with variably modified type.</text>
   <references>
    <reference source="ISO:C99 Language [6.8.6.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0944" level="QA_WARNING" help="doc-en_US/doc/messages/0944.html" severity="8">
   <text>[C] The label '%s' is inside the scope of an identifier with variably modified type.</text>
   <references>
    <reference source="ISO:C99 Language [6.8.6.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="0945" level="QA_WARNING" help="doc-en_US/doc/messages/0945.html" severity="2">
   <text>[C99] Operand of sizeof is an expression of variable length array type with side effects.</text>
   <references>
    <reference source="ISO:C99 Language [6.5.3.4]"/>
   </references>
  </message>
  <message id="0970" level="QA_ERROR" help="doc-en_US/doc/messages/0970.html" severity="9">
   <text>[Q] Unable to create preprocessed file.</text>
   <references>
      </references>
  </message>
  <message id="0981" level="QA_WARNING" help="doc-en_US/doc/messages/0981.html" severity="2">
   <text>[E] Redundant semicolon in 'struct' or 'union' member declaration list is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1001" level="QA_WARNING" help="doc-en_US/doc/messages/1001.html" severity="2">
   <text>[E] '#include %s' is a VMS extension.</text>
   <references>
    <reference source="ISO:C90 Language [6.8.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1002" level="QA_WARNING" help="doc-en_US/doc/messages/1002.html" severity="2">
   <text>[E] '%s' is not a legal identifier in ISO C.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1003" level="QA_WARNING" help="doc-en_US/doc/messages/1003.html" severity="2">
   <text>[E] '#%1s' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C90 Language [6.8]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1004" level="QA_ERROR" help="doc-en_US/doc/messages/1004.html" severity="9">
   <text>[S] '#endasm' found without matching '#asm' preprocessing directive.</text>
   <references>
      </references>
  </message>
  <message id="1005" level="QA_ERROR" help="doc-en_US/doc/messages/1005.html" severity="9">
   <text>[S] End-of-file encountered when expecting '#endif' preprocessing directive.</text>
   <references>
      </references>
  </message>
  <message id="1006" level="QA_WARNING" help="doc-en_US/doc/messages/1006.html" severity="2">
   <text>[E] This in-line assembler construct is a language extension. The code has been ignored.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1007" level="QA_WARNING" help="doc-en_US/doc/messages/1007.html" severity="5">
   <text>The macro '%s' must not be expanded.</text>
   <references>
      </references>
  </message>
  <message id="1008" level="QA_WARNING" help="doc-en_US/doc/messages/1008.html" severity="2">
   <text>[E] '#%s' is not a legal ISO C preprocessing directive.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1009" level="QA_ERROR" help="doc-en_US/doc/messages/1009.html" severity="9">
   <text>[S] Unrecognizable expression in '#if' preprocessing directive.</text>
   <references>
      </references>
  </message>
  <message id="1010" level="QA_ERROR" help="doc-en_US/doc/messages/1010.html" severity="9">
   <text>[S] '#%1s' is not a valid form of '#if' syntax.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="1011" level="QA_WARNING" help="doc-en_US/doc/messages/1011.html" severity="2">
   <text>[C99] Use of '//' comment.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C99 Language [6.4.9]"/>
   </references>
  </message>
  <message id="1012" level="QA_WARNING" help="doc-en_US/doc/messages/1012.html" severity="2">
   <text>[E] Use of a C++ reference type ('type &amp;') will be treated as a language extension.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1013" level="QA_ERROR" help="doc-en_US/doc/messages/1013.html" severity="9">
   <text>[S] Use of a C++ reference type ('type &amp;').</text>
   <references>
      </references>
  </message>
  <message id="1014" level="QA_WARNING" help="doc-en_US/doc/messages/1014.html" severity="2">
   <text>[E] Non-standard enum type specifier.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1015" level="QA_WARNING" help="doc-en_US/doc/messages/1015.html" severity="2">
   <text>[E] '%s' is not a legal keyword in ISO C - this will be treated as a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1016" level="QA_WARNING" help="doc-en_US/doc/messages/1016.html" severity="3">
   <text>[E] Using pre-standard field designator syntax.</text>
   <references>
    <reference source="Language Extension"/>
   </references>
  </message>
  <message id="1017" level="QA_WARNING" help="doc-en_US/doc/messages/1017.html" severity="3">
   <text>[E] Omitting the '=' after an array element designator is a pre-standard extension.</text>
   <references>
    <reference source="Language Extension"/>
   </references>
  </message>
  <message id="1018" level="QA_WARNING" help="doc-en_US/doc/messages/1018.html" severity="2">
   <text>[C99] Use of LL suffix.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C99 Language [6.4.4.1]"/>
   </references>
  </message>
  <message id="1019" level="QA_WARNING" help="doc-en_US/doc/messages/1019.html" severity="2">
   <text>[E] '@ address' is not supported in ISO C - this will be treated as a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1020" level="QA_WARNING" help="doc-en_US/doc/messages/1020.html" severity="2">
   <text>[E] '%1s' is not supported in ISO C, and is treated as a language extension.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1021" level="QA_WARNING" help="doc-en_US/doc/messages/1021.html" severity="2">
   <text>[E] A statement expression is not supported in ISO C, and is treated as a language extension.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1022" level="QA_WARNING" help="doc-en_US/doc/messages/1022.html" severity="2">
   <text>[E] '__alignof__' is a language extension. It is mapped to the standard '_Alignof' operator.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1023" level="QA_WARNING" help="doc-en_US/doc/messages/1023.html" severity="8">
   <text>[C] Using '_Alignof' on function types is illegal.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1024" level="QA_WARNING" help="doc-en_US/doc/messages/1024.html" severity="8">
   <text>[C] Using '_Alignof' on incomplete types is illegal.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1025" level="QA_WARNING" help="doc-en_US/doc/messages/1025.html" severity="8">
   <text>[C] Using '_Alignof' on bit-fields is illegal.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1026" level="QA_WARNING" help="doc-en_US/doc/messages/1026.html" severity="2">
   <text>[E] The indicated @word construct has been ignored.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1027" level="QA_WARNING" help="doc-en_US/doc/messages/1027.html" severity="2">
   <text>[C99] Use of type 'long long'.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C99 Language [6.2.5]"/>
   </references>
  </message>
  <message id="1028" level="QA_WARNING" help="doc-en_US/doc/messages/1028.html" severity="2">
   <text>[E] Use of the sizeof operator in a preprocessing directive is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C90 Language [6.8.1]"/>
    <reference source="ISO:C90 Language [6.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1029" level="QA_WARNING" help="doc-en_US/doc/messages/1029.html" severity="2">
   <text>[E] Whitespace encountered between backslash and new-line has been ignored.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C90 Language [5.1.1.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1030" level="QA_WARNING" help="doc-en_US/doc/messages/1030.html" severity="2">
   <text>[C99] Macro defined with variable argument list.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C99 Language [6.10]"/>
   </references>
  </message>
  <message id="1031" level="QA_WARNING" help="doc-en_US/doc/messages/1031.html" severity="2">
   <text>[C99] Initializer for 'struct', 'union' or array type is not a constant expression.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
   </references>
  </message>
  <message id="1032" level="QA_WARNING" help="doc-en_US/doc/messages/1032.html" severity="2">
   <text>[C99] The identifier '__func__' has been used.</text>
   <references>
    <reference source="ISO:C99 Language [6.4.2.2]"/>
   </references>
  </message>
  <message id="1033" level="QA_WARNING" help="doc-en_US/doc/messages/1033.html" severity="8">
   <text>[C] The identifier %1s may only be used in the replacement list of a variadic macro.</text>
   <references>
    <reference source="ISO:C99 Language [6.10.3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1034" level="QA_WARNING" help="doc-en_US/doc/messages/1034.html" severity="2">
   <text>[E] Macro defined with named variable argument list. This is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1035" level="QA_WARNING" help="doc-en_US/doc/messages/1035.html" severity="2">
   <text>[E] No macro arguments supplied for variable argument list. This is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1036" level="QA_WARNING" help="doc-en_US/doc/messages/1036.html" severity="2">
   <text>[E] Comma before ## ignored in expansion of variadic macro. This is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1037" level="QA_WARNING" help="doc-en_US/doc/messages/1037.html" severity="2">
   <text>[E] Arrays of length zero are a language extension.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1038" level="QA_WARNING" help="doc-en_US/doc/messages/1038.html" severity="2">
   <text>[E] The sequence ", ##__VA_ARGS__" is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1039" level="QA_WARNING" help="doc-en_US/doc/messages/1039.html" severity="2">
   <text>[E] Treating array of length one as potentially flexible member.</text>
   <references>
      </references>
  </message>
  <message id="1040" level="QA_WARNING" help="doc-en_US/doc/messages/1040.html" severity="2">
   <text>[E] The identifier '%1s' is an extension to get the name of the current function.</text>
   <references>
    <reference source="Language Extension"/>
   </references>
  </message>
  <message id="1041" level="QA_WARNING" help="doc-en_US/doc/messages/1041.html" severity="2">
   <text>[E] Empty aggregate initializers are a language extension.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1042" level="QA_WARNING" help="doc-en_US/doc/messages/1042.html" severity="2">
   <text>[E] Using I64 or UI64 as an integer constant suffix. This is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1043" level="QA_WARNING" help="doc-en_US/doc/messages/1043.html" severity="2">
   <text>[E] Defining an anonymous union object. This is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1044" level="QA_WARNING" help="doc-en_US/doc/messages/1044.html" severity="2">
   <text>[E] Defining an anonymous struct object. This is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1045" level="QA_WARNING" help="doc-en_US/doc/messages/1045.html" severity="2">
   <text>[E] Use of the #include_next preprocessing directive is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1046" level="QA_WARNING" help="doc-en_US/doc/messages/1046.html" severity="2">
   <text>[E] Function is being declared with default argument syntax. This is a language extension.</text>
   <references>
    <reference source="Language Extension"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1047" level="QA_WARNING" help="doc-en_US/doc/messages/1047.html" severity="8">
   <text>[EE] Function is being declared with default argument syntax after a previous call to the function. This is not allowed.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1048" level="QA_WARNING" help="doc-en_US/doc/messages/1048.html" severity="8">
   <text>[EE] Default argument values are missing for some parameters in this function declaration. This is not allowed.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1049" level="QA_WARNING" help="doc-en_US/doc/messages/1049.html" severity="6">
   <text>[E] Nested functions are a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1050" level="QA_WARNING" help="doc-en_US/doc/messages/1050.html" severity="8">
   <text>[EE] Nested functions cannot be 'extern' or 'static'.</text>
   <references>
      </references>
  </message>
  <message id="1051" level="QA_WARNING" help="doc-en_US/doc/messages/1051.html" severity="2">
   <text>[C99] A variable length array has been declared.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C99 Language [6.7.5.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1052" level="QA_WARNING" help="doc-en_US/doc/messages/1052.html" severity="2">
   <text>[C99] A parameter has been declared with a variable length array size.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C99 Language [6.7.5.2]"/>
   </references>
  </message>
  <message id="1053" level="QA_WARNING" help="doc-en_US/doc/messages/1053.html" severity="2">
   <text>[C99] Designators have been used in this initialization list.</text>
   <references>
    <reference source="Designated Initializers"/>
    <reference source="ISO:C99 Language [6.7.8]"/>
   </references>
  </message>
  <message id="1054" level="QA_WARNING" help="doc-en_US/doc/messages/1054.html" severity="2">
   <text>[C99] A compound literal has been used.</text>
   <references>
    <reference source="Compound Literals"/>
    <reference source="ISO:C99 Language [6.5.2.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1055" level="QA_WARNING" help="doc-en_US/doc/messages/1055.html" severity="2">
   <text>[C99] The keyword 'inline' has been used.</text>
   <references>
    <reference source="ISO:C99 Language [6.5.2.5]"/>
   </references>
  </message>
  <message id="1056" level="QA_WARNING" help="doc-en_US/doc/messages/1056.html" severity="2">
   <text>[C99] The keyword '_Bool' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1057" level="QA_WARNING" help="doc-en_US/doc/messages/1057.html" severity="2">
   <text>[C99] The keyword 'restrict' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1058" level="QA_WARNING" help="doc-en_US/doc/messages/1058.html" severity="2">
   <text>[C99] The keyword 'static' is used in the declaration of a function parameter of array type.</text>
   <references>
      </references>
  </message>
  <message id="1059" level="QA_WARNING" help="doc-en_US/doc/messages/1059.html" severity="2">
   <text>[C99] A type qualifier (const, volatile or restrict) is used in the declaration of a function parameter of array type.</text>
   <references>
      </references>
  </message>
  <message id="1060" level="QA_WARNING" help="doc-en_US/doc/messages/1060.html" severity="2">
   <text>[C99] A flexible array member has been declared.</text>
   <references>
      </references>
  </message>
  <message id="1061" level="QA_WARNING" help="doc-en_US/doc/messages/1061.html" severity="8">
   <text>[C] Structure '%1s' with flexible array member '%2s' cannot be used in the declaration of structure member '%3s'.</text>
   <references>
      </references>
  </message>
  <message id="1062" level="QA_WARNING" help="doc-en_US/doc/messages/1062.html" severity="8">
   <text>[C] Structure '%1s' with flexible array member '%2s' cannot be used in the declaration of array elements.</text>
   <references>
      </references>
  </message>
  <message id="1063" level="QA_WARNING" help="doc-en_US/doc/messages/1063.html" severity="3">
   <text>[C99] '%s' is an automatically-allocated object of a type declared with a flexible array member.</text>
   <references>
      </references>
  </message>
  <message id="1064" level="QA_WARNING" help="doc-en_US/doc/messages/1064.html" severity="3">
   <text>[C99] '%s' is a statically-allocated object of a type declared with a flexible array member.</text>
   <references>
      </references>
  </message>
  <message id="1065" level="QA_WARNING" help="doc-en_US/doc/messages/1065.html" severity="2">
   <text>[EW] '%s' is an automatically-allocated object of a type declared with a potentially-flexible array member.</text>
   <references>
      </references>
  </message>
  <message id="1066" level="QA_WARNING" help="doc-en_US/doc/messages/1066.html" severity="2">
   <text>[EW] '%s' is a statically-allocated object of a type declared with a potentially-flexible array member.</text>
   <references>
      </references>
  </message>
  <message id="1067" level="QA_WARNING" help="doc-en_US/doc/messages/1067.html" severity="3">
   <text>[C99] Union member is a struct declared with a flexible array member.</text>
   <references>
      </references>
  </message>
  <message id="1068" level="QA_WARNING" help="doc-en_US/doc/messages/1068.html" severity="2">
   <text>[EW] Union member is a struct declared with a potentially-flexible array member.</text>
   <references>
      </references>
  </message>
  <message id="1069" level="QA_WARNING" help="doc-en_US/doc/messages/1069.html" severity="3">
   <text>[C99] Taking sizeof a struct with a flexible array member without adding the array size.</text>
   <references>
      </references>
  </message>
  <message id="1070" level="QA_WARNING" help="doc-en_US/doc/messages/1070.html" severity="2">
   <text>[EW] Taking sizeof a struct with a potentially-flexible array member without explicitly adding an array size.</text>
   <references>
      </references>
  </message>
  <message id="1071" level="QA_WARNING" help="doc-en_US/doc/messages/1071.html" severity="2">
   <text>[C99] Taking sizeof a struct with a flexible array member without explicitly adding the array size in terms of element sizes.</text>
   <references>
      </references>
  </message>
  <message id="1072" level="QA_WARNING" help="doc-en_US/doc/messages/1072.html" severity="2">
   <text>[EW] Taking sizeof a struct with a potentially-flexible array member without explicitly adding an array size in terms of element sizes.</text>
   <references>
      </references>
  </message>
  <message id="1073" level="QA_WARNING" help="doc-en_US/doc/messages/1073.html" severity="3">
   <text>[C99] Taking sizeof a struct with a flexible array member while adding an array size based on the wrong element type.</text>
   <references>
      </references>
  </message>
  <message id="1074" level="QA_WARNING" help="doc-en_US/doc/messages/1074.html" severity="3">
   <text>[EW] Taking sizeof a struct with a potentially-flexible array member while adding an array size based on the wrong element type.</text>
   <references>
      </references>
  </message>
  <message id="1075" level="QA_WARNING" help="doc-en_US/doc/messages/1075.html" severity="3">
   <text>[E] Passing a type name as the controlling operand of '_Generic' is an extension.</text>
   <references>
      </references>
  </message>
  <message id="1076" level="QA_WARNING" help="doc-en_US/doc/messages/1076.html" severity="3">
   <text>[C99] Use of hexadecimal floating constant.</text>
   <references>
      </references>
  </message>
  <message id="1077" level="QA_WARNING" help="doc-en_US/doc/messages/1077.html" severity="1">
   <text>[C11] The keyword '_Noreturn' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1078" level="QA_WARNING" help="doc-en_US/doc/messages/1078.html" severity="1">
   <text>[C11] The keyword '_Alignas' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1079" level="QA_WARNING" help="doc-en_US/doc/messages/1079.html" severity="1">
   <text>[C11] The keyword '_Alignof' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1080" level="QA_WARNING" help="doc-en_US/doc/messages/1080.html" severity="8">
   <text>[EE] A typedef or pointer to function is being declared with default argument syntax. This is not allowed.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1081" level="QA_WARNING" help="doc-en_US/doc/messages/1081.html" severity="1">
   <text>[C11] The keyword '_Atomic' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1082" level="QA_WARNING" help="doc-en_US/doc/messages/1082.html" severity="1">
   <text>[C11] The keyword '_Generic' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1083" level="QA_WARNING" help="doc-en_US/doc/messages/1083.html" severity="1">
   <text>[C11] The keyword '_Static_assert' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1084" level="QA_WARNING" help="doc-en_US/doc/messages/1084.html" severity="1">
   <text>[C11] The keyword '_Thread_local' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1085" level="QA_WARNING" help="doc-en_US/doc/messages/1085.html" severity="5">
   <text>The function '%s' is being declared as _Noreturn but has a non-void return type.</text>
   <references>
      </references>
  </message>
  <message id="1086" level="QA_WARNING" help="doc-en_US/doc/messages/1086.html" severity="4">
   <text>[E] '_Alignof (expression)' is a common non-standard extension. ISO C11 only defines '_Alignof (type)'.</text>
   <references>
      </references>
  </message>
  <message id="1087" level="QA_WARNING" help="doc-en_US/doc/messages/1087.html" severity="8">
   <text>[C] Objects declared with '_Thread_local' must have linkage or static storage duration.</text>
   <references>
      </references>
  </message>
  <message id="1088" level="QA_WARNING" help="doc-en_US/doc/messages/1088.html" severity="8">
   <text>[C] '_Thread_local' must appear on every declaration of an object, or on none.</text>
   <references>
      </references>
  </message>
  <message id="1089" level="QA_WARNING" help="doc-en_US/doc/messages/1089.html" severity="8">
   <text>[C] '_Thread_local' may not form part of a function declaration.</text>
   <references>
      </references>
  </message>
  <message id="1090" level="QA_WARNING" help="doc-en_US/doc/messages/1090.html" severity="3">
   <text>[E] '__label__' is not supported in ISO C, and is treated as a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1091" level="QA_WARNING" help="doc-en_US/doc/messages/1091.html" severity="3">
   <text>[EE] Declaration of a GNU local label must be the first statement in the block.</text>
   <references>
      </references>
  </message>
  <message id="1092" level="QA_WARNING" help="doc-en_US/doc/messages/1092.html" severity="3">
   <text>[EE] No definition found for the label '%s' in this scope.</text>
   <references>
      </references>
  </message>
  <message id="1093" level="QA_WARNING" help="doc-en_US/doc/messages/1093.html" severity="8">
   <text>[C] Failed static assertion '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1094" level="QA_WARNING" help="doc-en_US/doc/messages/1094.html" severity="4">
   <text>[E] '_Static_assert (expression)' with no message is a common non-standard extension.</text>
   <references>
      </references>
  </message>
  <message id="1095" level="QA_WARNING" help="doc-en_US/doc/messages/1095.html" severity="9">
   <text>[S] The message passed to '_Static_assert' must be a string literal.</text>
   <references>
      </references>
  </message>
  <message id="1096" level="QA_WARNING" help="doc-en_US/doc/messages/1096.html" severity="8">
   <text>[C] The expression passed to '_Static_assert' must be an integer constant expression.</text>
   <references>
      </references>
  </message>
  <message id="1097" level="QA_WARNING" help="doc-en_US/doc/messages/1097.html" severity="2">
   <text>[C99] Using a universal character name in an identifier.</text>
   <references>
      </references>
  </message>
  <message id="1098" level="QA_WARNING" help="doc-en_US/doc/messages/1098.html" severity="2">
   <text>[C99] Using a universal character name in a literal.</text>
   <references>
      </references>
  </message>
  <message id="1099" level="QA_WARNING" help="doc-en_US/doc/messages/1099.html" severity="8">
   <text>[EE] Using a variably-modified type name as the operand of '_Generic'.</text>
   <references>
      </references>
  </message>
  <message id="1100" level="QA_WARNING" help="doc-en_US/doc/messages/1100.html" severity="2">
   <text>The label '%1s' is also declared as a typedef.</text>
   <references>
    <reference source="Identifiers"/>
    <reference source="ISO:C90 Language [6.1.2.3]"/>
   </references>
  </message>
  <message id="1101" level="QA_WARNING" help="doc-en_US/doc/messages/1101.html" severity="2">
   <text>[E] Taking the address of a label is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1102" level="QA_WARNING" help="doc-en_US/doc/messages/1102.html" severity="2">
   <text>[E] Jumping to a dynamic target is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1103" level="QA_WARNING" help="doc-en_US/doc/messages/1103.html" severity="8">
   <text>[EE] Using a dynamic jump target in a function without any label address expressions.</text>
   <references>
      </references>
  </message>
  <message id="1104" level="QA_WARNING" help="doc-en_US/doc/messages/1104.html" severity="5">
   <text>[EW] Taking the address of a label in a function without any dynamic jumps.</text>
   <references>
      </references>
  </message>
  <message id="1105" level="QA_WARNING" help="doc-en_US/doc/messages/1105.html" severity="7">
   <text>[EW] This function appears to export the address of one of its labels.</text>
   <references>
      </references>
  </message>
  <message id="1106" level="QA_WARNING" help="doc-en_US/doc/messages/1106.html" severity="7">
   <text>[EW] This function appears to import an address used as a dynamic jump target.</text>
   <references>
      </references>
  </message>
  <message id="1107" level="QA_WARNING" help="doc-en_US/doc/messages/1107.html" severity="7">
   <text>[EW] Using a pointer to non-void as a dynamic jump target.</text>
   <references>
      </references>
  </message>
  <message id="1108" level="QA_WARNING" help="doc-en_US/doc/messages/1108.html" severity="7">
   <text>[EW] This appears to convert the address of a label to an object pointer.</text>
   <references>
      </references>
  </message>
  <message id="1109" level="QA_WARNING" help="doc-en_US/doc/messages/1109.html" severity="2">
   <text>[E] Range-constant expressions are a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1110" level="QA_WARNING" help="doc-en_US/doc/messages/1110.html" severity="4">
   <text>[EW] An empty range used as a case label will always be ignored.</text>
   <references>
      </references>
  </message>
  <message id="1111" level="QA_WARNING" help="doc-en_US/doc/messages/1111.html" severity="7">
   <text>[EE] Using an empty range as an array designator is an error.</text>
   <references>
      </references>
  </message>
  <message id="1112" level="QA_WARNING" help="doc-en_US/doc/messages/1112.html" severity="8">
   <text>[C] The _Atomic specifier may not be used to qualify this type.</text>
   <references>
      </references>
  </message>
  <message id="1113" level="QA_WARNING" help="doc-en_US/doc/messages/1113.html" severity="8">
   <text>[C] Implicit conversion may not add or remove the _Atomic qualifier.</text>
   <references>
      </references>
  </message>
  <message id="1114" level="QA_WARNING" help="doc-en_US/doc/messages/1114.html" severity="5">
   <text>This atomic variable is referenced directly twice in the same expression.</text>
   <references>
      </references>
  </message>
  <message id="1115" level="QA_WARNING" help="doc-en_US/doc/messages/1115.html" severity="5">
   <text>This atomic lvalue appears to be referenced twice in the same expression.</text>
   <references>
      </references>
  </message>
  <message id="1116" level="QA_WARNING" help="doc-en_US/doc/messages/1116.html" severity="6">
   <text>The atomic variable '%1s' appears to be updated non-atomically.</text>
   <references>
      </references>
  </message>
  <message id="1117" level="QA_WARNING" help="doc-en_US/doc/messages/1117.html" severity="8">
   <text>[C] This is not a valid alignment expression.</text>
   <references>
      </references>
  </message>
  <message id="1118" level="QA_WARNING" help="doc-en_US/doc/messages/1118.html" severity="8">
   <text>[C] An explicitly specified alignment must be at least as strict as the default.</text>
   <references>
      </references>
  </message>
  <message id="1119" level="QA_WARNING" help="doc-en_US/doc/messages/1119.html" severity="7">
   <text>[U] Multiple declarations of '%1s' have different explicit alignments.</text>
   <references>
      </references>
  </message>
  <message id="1120" level="QA_WARNING" help="doc-en_US/doc/messages/1120.html" severity="8">
   <text>[C] This is not an object which can be declared with an alignment specifier.</text>
   <references>
      </references>
  </message>
  <message id="1121" level="QA_WARNING" help="doc-en_US/doc/messages/1121.html" severity="4">
   <text>The alignment of an array type is the alignment of its element type.</text>
   <references>
      </references>
  </message>
  <message id="1122" level="QA_WARNING" help="doc-en_US/doc/messages/1122.html" severity="4">
   <text>[EW] This non-standard usage of '_Alignof' retrieves the alignment of an array.</text>
   <references>
      </references>
  </message>
  <message id="1123" level="QA_WARNING" help="doc-en_US/doc/messages/1123.html" severity="4">
   <text>Declaring an array with an explicit alignment aligns the base of the array, not the elements.</text>
   <references>
      </references>
  </message>
  <message id="1124" level="QA_WARNING" help="doc-en_US/doc/messages/1124.html" severity="8">
   <text>[C] This '_Generic' selection contains multiple 'default' associations.</text>
   <references>
      </references>
  </message>
  <message id="1125" level="QA_WARNING" help="doc-en_US/doc/messages/1125.html" severity="8">
   <text>[C] This association does not describe a unique type in the '_Generic' selection.</text>
   <references>
      </references>
  </message>
  <message id="1126" level="QA_WARNING" help="doc-en_US/doc/messages/1126.html" severity="8">
   <text>[C] The controlling expression of this '_Generic' selection does not match any association.</text>
   <references>
      </references>
  </message>
  <message id="1127" level="QA_WARNING" help="doc-en_US/doc/messages/1127.html" severity="8">
   <text>[C] This '_Generic' association describes an incomplete or variably-modified type.</text>
   <references>
      </references>
  </message>
  <message id="1128" level="QA_WARNING" help="doc-en_US/doc/messages/1128.html" severity="4">
   <text>[C11] The type in this '_Generic' association will never be considered for matching.</text>
   <references>
      </references>
  </message>
  <message id="1129" level="QA_WARNING" help="doc-en_US/doc/messages/1129.html" severity="2">
   <text>[C11] Matching the default association in this '_Generic' selection.</text>
   <references>
      </references>
  </message>
  <message id="1130" level="QA_WARNING" help="doc-en_US/doc/messages/1130.html" severity="2">
   <text>[E] The '__has_include' operator is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1131" level="QA_WARNING" help="doc-en_US/doc/messages/1131.html" severity="2">
   <text>[E] The '__has_include_next' operator is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1132" level="QA_WARNING" help="doc-en_US/doc/messages/1132.html" severity="8">
   <text>[EE] Syntax error in '__has_include' or '__has_include_next' operand.</text>
   <references>
      </references>
  </message>
  <message id="1133" level="QA_WARNING" help="doc-en_US/doc/messages/1133.html" severity="8">
   <text>[EE] Using the '%1s' operator outside of an #if or #elif directive.</text>
   <references>
      </references>
  </message>
  <message id="1134" level="QA_WARNING" help="doc-en_US/doc/messages/1134.html" severity="2">
   <text>[C11] This '#error' directive can be trivially rewritten as a static assertion.</text>
   <references>
      </references>
  </message>
  <message id="1135" level="QA_WARNING" help="doc-en_US/doc/messages/1135.html" severity="3">
   <text>[C99] Using the '_Pragma' operator.</text>
   <references>
      </references>
  </message>
  <message id="1136" level="QA_WARNING" help="doc-en_US/doc/messages/1136.html" severity="6">
   <text>[C99] This is passing a prefixed string as the operand to '_Pragma'. The prefix '%1s' will be ignored.</text>
   <references>
      </references>
  </message>
  <message id="1137" level="QA_WARNING" help="doc-en_US/doc/messages/1137.html" severity="6">
   <text>[I] Evaluating the '_Pragma' operator within a directive is not universally supported.</text>
   <references>
      </references>
  </message>
  <message id="1138" level="QA_WARNING" help="doc-en_US/doc/messages/1138.html" severity="6">
   <text>[S] This '_Pragma' operator expression is ill-formed.</text>
   <references>
      </references>
  </message>
  <message id="1139" level="QA_WARNING" help="doc-en_US/doc/messages/1139.html" severity="6">
   <text>[I] Using the '_Pragma' operator with '#%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1140" level="QA_WARNING" help="doc-en_US/doc/messages/1140.html" severity="2">
   <text>Unrecognized _Pragma arguments '%s'. This _Pragma operator has been ignored.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C99 Language [6.10.9]"/>
   </references>
  </message>
  <message id="1141" level="QA_WARNING" help="doc-en_US/doc/messages/1141.html" severity="2">
   <text>The '__VA_OPT__' operator is a language extension.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="1142" level="QA_WARNING" help="doc-en_US/doc/messages/1142.html" severity="2">
   <text>'__VA_OPT__' elided in expansion of '%1s'.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="1143" level="QA_WARNING" help="doc-en_US/doc/messages/1143.html" severity="2">
   <text>Operand to '__VA_OPT__' is empty.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="1144" level="QA_WARNING" help="doc-en_US/doc/messages/1144.html" severity="8">
   <text>[EE] Operand to '__VA_OPT__' is ill-formed.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="1145" level="QA_WARNING" help="doc-en_US/doc/messages/1145.html" severity="8">
   <text>[EE] Operand to '__VA_OPT__' is not terminated by a closing parenthesis.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="1146" level="QA_WARNING" help="doc-en_US/doc/messages/1146.html" severity="8">
   <text>[EE] '__VA_OPT__' may only be used in a variadic function-like macro.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="1147" level="QA_WARNING" help="doc-en_US/doc/messages/1147.html" severity="7">
   <text>[U] Qualifying a function type is undefined.</text>
   <references>
    <reference source="ISO:C11 Language [6.7.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1148" level="QA_WARNING" help="doc-en_US/doc/messages/1148.html" severity="2">
   <text>[C99] The keyword '_Imaginary' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1149" level="QA_WARNING" help="doc-en_US/doc/messages/1149.html" severity="2">
   <text>[C99] The keyword '_Complex' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1150" level="QA_WARNING" help="doc-en_US/doc/messages/1150.html" severity="8">
   <text>[C] Using the relational operators with values in the imaginary or complex domain is a constraint violation.</text>
   <references>
      </references>
  </message>
  <message id="1151" level="QA_WARNING" help="doc-en_US/doc/messages/1151.html" severity="3">
   <text>Comparing arithmetic values in two different domains.</text>
   <references>
      </references>
  </message>
  <message id="1152" level="QA_WARNING" help="doc-en_US/doc/messages/1152.html" severity="3">
   <text>[E] Specifying complex or imaginary integer types is an extension.</text>
   <references>
      </references>
  </message>
  <message id="1153" level="QA_WARNING" help="doc-en_US/doc/messages/1153.html" severity="2">
   <text>This operation will produce a complex result because the operands are in different domains.</text>
   <references>
      </references>
  </message>
  <message id="1154" level="QA_WARNING" help="doc-en_US/doc/messages/1154.html" severity="2">
   <text>This operation on imaginary values has a real-valued result.</text>
   <references>
      </references>
  </message>
  <message id="1155" level="QA_WARNING" help="doc-en_US/doc/messages/1155.html" severity="2">
   <text>This is converting a real value to a complex value.</text>
   <references>
      </references>
  </message>
  <message id="1156" level="QA_WARNING" help="doc-en_US/doc/messages/1156.html" severity="2">
   <text>This is converting an imaginary value to a complex value.</text>
   <references>
      </references>
  </message>
  <message id="1157" level="QA_WARNING" help="doc-en_US/doc/messages/1157.html" severity="2">
   <text>This is converting a complex value to a real value.</text>
   <references>
      </references>
  </message>
  <message id="1158" level="QA_WARNING" help="doc-en_US/doc/messages/1158.html" severity="2">
   <text>This is converting a complex value to an imaginary value.</text>
   <references>
      </references>
  </message>
  <message id="1159" level="QA_WARNING" help="doc-en_US/doc/messages/1159.html" severity="6">
   <text>This conversion is between a real value and an imaginary value.</text>
   <references>
      </references>
  </message>
  <message id="1160" level="QA_WARNING" help="doc-en_US/doc/messages/1160.html" severity="7">
   <text>[U] Passing an argument to '%1s' that has complex type.</text>
   <references>
      </references>
  </message>
  <message id="1161" level="QA_WARNING" help="doc-en_US/doc/messages/1161.html" severity="6">
   <text>[U] Passing an argument to '%1s' that has imaginary type.</text>
   <references>
      </references>
  </message>
  <message id="1162" level="QA_WARNING" help="doc-en_US/doc/messages/1162.html" severity="6">
   <text>[U] Passing an argument to '%1s' that does not have essentially integer or essentially floating type.</text>
   <references>
      </references>
  </message>
  <message id="1163" level="QA_WARNING" help="doc-en_US/doc/messages/1163.html" severity="4">
   <text>Not all arguments to '%1s' have the same type.</text>
   <references>
      </references>
  </message>
  <message id="1164" level="QA_WARNING" help="doc-en_US/doc/messages/1164.html" severity="4">
   <text>Specifier list contains more than one alignment specifier.</text>
   <references>
      </references>
  </message>
  <message id="1165" level="QA_WARNING" help="doc-en_US/doc/messages/1165.html" severity="4">
   <text>Specifying an zero alignment.</text>
   <references>
      </references>
  </message>
  <message id="1166" level="QA_WARNING" help="doc-en_US/doc/messages/1166.html" severity="3">
   <text>Using inconsistent alignment specification for object '%1s' with external linkage.</text>
   <references>
      </references>
  </message>
  <message id="1167" level="QA_WARNING" help="doc-en_US/doc/messages/1167.html" severity="3">
   <text>Using inconsistent alignment specification for object '%1s' with internal linkage.</text>
   <references>
      </references>
  </message>
  <message id="1168" level="QA_WARNING" help="doc-en_US/doc/messages/1168.html" severity="4">
   <text>Taking the alignment of a syntactic array type.</text>
   <references>
      </references>
  </message>
  <message id="1169" level="QA_WARNING" help="doc-en_US/doc/messages/1169.html" severity="7">
   <text>Attempting to undefine the stdbool.h macro '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1170" level="QA_WARNING" help="doc-en_US/doc/messages/1170.html" severity="7">
   <text>Attempting to undefine the keyword macro '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1171" level="QA_WARNING" help="doc-en_US/doc/messages/1171.html" severity="3">
   <text>[C11] This generic selection only contains a default association.</text>
   <references>
      </references>
  </message>
  <message id="1172" level="QA_WARNING" help="doc-en_US/doc/messages/1172.html" severity="3">
   <text>[C11] This generic controlling expression has a side effect but does not originate from a macro argument.</text>
   <references>
      </references>
  </message>
  <message id="1173" level="QA_WARNING" help="doc-en_US/doc/messages/1173.html" severity="4">
   <text>[C11] This controlling expression for this generic selection has decaying type.</text>
   <references>
      </references>
  </message>
  <message id="1174" level="QA_WARNING" help="doc-en_US/doc/messages/1174.html" severity="3">
   <text>[C11] This controlling expression for this generic selection will not convert to a pointer to void.</text>
   <references>
      </references>
  </message>
  <message id="1175" level="QA_WARNING" help="doc-en_US/doc/messages/1175.html" severity="3">
   <text>[C11] This controlling expression for this generic selection matches a different association from its essential type.</text>
   <references>
      </references>
  </message>
  <message id="1176" level="QA_WARNING" help="doc-en_US/doc/messages/1176.html" severity="3">
   <text>[C11] This generic argument is not consistently evaluated.</text>
   <references>
      </references>
  </message>
  <message id="1177" level="QA_WARNING" help="doc-en_US/doc/messages/1177.html" severity="3">
   <text>[C11] This generic selection was not expanded from a macro.</text>
   <references>
      </references>
  </message>
  <message id="1178" level="QA_WARNING" help="doc-en_US/doc/messages/1178.html" severity="3">
   <text>[C11] The default association is not in first or last position in this generic association list.</text>
   <references>
      </references>
  </message>
  <message id="1180" level="QA_WARNING" help="doc-en_US/doc/messages/1180.html" severity="2">
   <text>[E] The '__auto_type' specifier is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="1181" level="QA_WARNING" help="doc-en_US/doc/messages/1181.html" severity="4">
   <text>Using 'auto' to deduce the type of a declarator.</text>
   <references>
      </references>
  </message>
  <message id="1182" level="QA_WARNING" help="doc-en_US/doc/messages/1182.html" severity="8">
   <text>[EE] Combining '__auto_type' with an explicit type specifier.</text>
   <references>
      </references>
  </message>
  <message id="1183" level="QA_WARNING" help="doc-en_US/doc/messages/1183.html" severity="8">
   <text>[EE] Specifying a partially-deduced type.</text>
   <references>
      </references>
  </message>
  <message id="1184" level="QA_WARNING" help="doc-en_US/doc/messages/1184.html" severity="8">
   <text>[C] An identifier with an underspecified declaration appears in its own initializer.</text>
   <references>
      </references>
  </message>
  <message id="1185" level="QA_WARNING" help="doc-en_US/doc/messages/1185.html" severity="8">
   <text>[EE] Using '__auto_type' without an initializer expression.</text>
   <references>
      </references>
  </message>
  <message id="1186" level="QA_WARNING" help="doc-en_US/doc/messages/1186.html" severity="2">
   <text>[E] Declaring a variadic function without any named parameters.</text>
   <references>
      </references>
  </message>
  <message id="1187" level="QA_WARNING" help="doc-en_US/doc/messages/1187.html" severity="3">
   <text>This defines a pointer to a variable length array.</text>
   <references>
      </references>
  </message>
  <message id="1188" level="QA_WARNING" help="doc-en_US/doc/messages/1188.html" severity="3">
   <text>This is specifying a variable length array type.</text>
   <references>
      </references>
  </message>
  <message id="1189" level="QA_WARNING" help="doc-en_US/doc/messages/1189.html" severity="3">
   <text>This is specifying a pointer type to a variable length array.</text>
   <references>
      </references>
  </message>
  <message id="1190" level="QA_WARNING" help="doc-en_US/doc/messages/1190.html" severity="2">
   <text>[E] Using Unicode characters in a C identifier name.</text>
   <references>
      </references>
  </message>
  <message id="1191" level="QA_WARNING" help="doc-en_US/doc/messages/1191.html" severity="8">
   <text>[EE] The lead character of the identifier '%1s' is not in XID_Start.</text>
   <references>
      </references>
  </message>
  <message id="1192" level="QA_WARNING" help="doc-en_US/doc/messages/1192.html" severity="8">
   <text>[EE] A body character of the identifier '%1s' is not in XID_Continue.</text>
   <references>
      </references>
  </message>
  <message id="1193" level="QA_WARNING" help="doc-en_US/doc/messages/1193.html" severity="5">
   <text>This operation does not statically use sequentially consistent memory ordering.</text>
   <references>
      </references>
  </message>
  <message id="1194" level="QA_WARNING" help="doc-en_US/doc/messages/1194.html" severity="5">
   <text>[E] Using digit separators in a numeric literal.</text>
   <references>
      </references>
  </message>
  <message id="1195" level="QA_WARNING" help="doc-en_US/doc/messages/1195.html" severity="3">
   <text>[E] Digits in this literal are not separated to form groups of %1s digits.</text>
   <references>
      </references>
  </message>
  <message id="1196" level="QA_WARNING" help="doc-en_US/doc/messages/1196.html" severity="3">
   <text>[E] Numeric literal exceeds maximum number of digits %1s without using separators.</text>
   <references>
      </references>
  </message>
  <message id="1197" level="QA_WARNING" help="doc-en_US/doc/messages/1197.html" severity="5">
   <text>Using an explicit enum type specifier.</text>
   <references>
      </references>
  </message>
  <message id="1198" level="QA_WARNING" help="doc-en_US/doc/messages/1198.html" severity="8">
   <text>[C] An enum type specifier must name a suitable integer type.</text>
   <references>
      </references>
  </message>
  <message id="1199" level="QA_WARNING" help="doc-en_US/doc/messages/1199.html" severity="8">
   <text>[C] Enum '%1s' is being redeclared with a conflicting type specification.</text>
   <references>
      </references>
  </message>
  <message id="1200" level="QA_WARNING" help="doc-en_US/doc/messages/1200.html" severity="4">
   <text>[E] This is declaring an overloaded function.</text>
   <references>
      </references>
  </message>
  <message id="1201" level="QA_WARNING" help="doc-en_US/doc/messages/1201.html" severity="2">
   <text>[E] This is resolving an overload of function '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1202" level="QA_WARNING" help="doc-en_US/doc/messages/1202.html" severity="8">
   <text>[EE] This is resolving an unavailable overload of function '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1203" level="QA_WARNING" help="doc-en_US/doc/messages/1203.html" severity="8">
   <text>[EE] Overloading can only be applied to function declarations.</text>
   <references>
      </references>
  </message>
  <message id="1204" level="QA_WARNING" help="doc-en_US/doc/messages/1204.html" severity="5">
   <text>[E] This declaration of '%1s' shadows an overload set in an outer scope.</text>
   <references>
      </references>
  </message>
  <message id="1205" level="QA_WARNING" help="doc-en_US/doc/messages/1205.html" severity="5">
   <text>[E] This overloaded declaration of '%1s' shadows functions declared in an outer scope.</text>
   <references>
      </references>
  </message>
  <message id="1206" level="QA_WARNING" help="doc-en_US/doc/messages/1206.html" severity="6">
   <text>[E] This is declaring an overloaded nested function.</text>
   <references>
      </references>
  </message>
  <message id="1207" level="QA_WARNING" help="doc-en_US/doc/messages/1207.html" severity="8">
   <text>[EE] Overloading can only be applied to functions declared with a prototype.</text>
   <references>
      </references>
  </message>
  <message id="1208" level="QA_WARNING" help="doc-en_US/doc/messages/1208.html" severity="8">
   <text>[EE] Unable to resolve an overload for this use of '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1209" level="QA_WARNING" help="doc-en_US/doc/messages/1209.html" severity="8">
   <text>[EE] Inexact match for '%1s' with only one overload.</text>
   <references>
      </references>
  </message>
  <message id="1210" level="QA_WARNING" help="doc-en_US/doc/messages/1210.html" severity="2">
   <text>[E] This declaration is implicitly overloaded.</text>
   <references>
      </references>
  </message>
  <message id="1211" level="QA_WARNING" help="doc-en_US/doc/messages/1211.html" severity="8">
   <text>[EE] '%1s' is declared both with and without the 'overloadable' attribute for the same signature.</text>
   <references>
      </references>
  </message>
  <message id="1212" level="QA_WARNING" help="doc-en_US/doc/messages/1212.html" severity="1">
   <text>The keyword 'constexpr' has been used.</text>
   <references>
      </references>
  </message>
  <message id="1213" level="QA_WARNING" help="doc-en_US/doc/messages/1213.html" severity="8">
   <text>[C] The constexpr object '%1s' is not initialized.</text>
   <references>
      </references>
  </message>
  <message id="1214" level="QA_WARNING" help="doc-en_US/doc/messages/1214.html" severity="8">
   <text>[C] The constexpr object '%1s' is not initialized with a constant.</text>
   <references>
      </references>
  </message>
  <message id="1215" level="QA_WARNING" help="doc-en_US/doc/messages/1215.html" severity="7">
   <text>[U] The constexpr specifier is being used in the declaration of function '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1216" level="QA_WARNING" help="doc-en_US/doc/messages/1216.html" severity="8">
   <text>[C] The constexpr specifier cannot be used with object '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1217" level="QA_WARNING" help="doc-en_US/doc/messages/1217.html" severity="8">
   <text>[C] The constexpr specifier cannot be combined with the '%1s' storage class.</text>
   <references>
      </references>
  </message>
  <message id="1218" level="QA_WARNING" help="doc-en_US/doc/messages/1218.html" severity="8">
   <text>[C] This is accessing the member '%1s' of a union constant, but '%2s' was initialized.</text>
   <references>
      </references>
  </message>
  <message id="1219" level="QA_WARNING" help="doc-en_US/doc/messages/1219.html" severity="3">
   <text>Using a qualified or atomic type for an enum type specifier.</text>
   <references>
      </references>
  </message>
  <message id="1220" level="QA_WARNING" help="doc-en_US/doc/messages/1220.html" severity="8">
   <text>[C] The value for this enumerator is not in range for the explicitly specified underlying type.</text>
   <references>
      </references>
  </message>
  <message id="1245" level="QA_WARNING" help="doc-en_US/doc/messages/1245.html" severity="1">
   <text>This bitwise literal has fewer digits than the destination type.</text>
   <references>
      </references>
  </message>
  <message id="1246" level="QA_WARNING" help="doc-en_US/doc/messages/1246.html" severity="1">
   <text>This bitwise literal explicitly sets every bit.</text>
   <references>
      </references>
  </message>
  <message id="1247" level="QA_WARNING" help="doc-en_US/doc/messages/1247.html" severity="1">
   <text>This bitwise literal has a destination type with an implementation-defined size.</text>
   <references>
      </references>
  </message>
  <message id="1250" level="QA_WARNING" help="doc-en_US/doc/messages/1250.html" severity="1">
   <text>Unsuffixed integer constant causes implicit conversion of other operand.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1251" level="QA_WARNING" help="doc-en_US/doc/messages/1251.html" severity="1">
   <text>Suffixed integer constant causes implicit conversion of other operand.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1252" level="QA_WARNING" help="doc-en_US/doc/messages/1252.html" severity="1">
   <text>Suffixed integer constant implicitly converted to different integer type.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1253" level="QA_WARNING" help="doc-en_US/doc/messages/1253.html" severity="1">
   <text>Unsuffixed integer constant implicitly converted to different integer type.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1254" level="QA_WARNING" help="doc-en_US/doc/messages/1254.html" severity="1">
   <text>Suffix is not consistent with a type of unsigned long.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1255" level="QA_WARNING" help="doc-en_US/doc/messages/1255.html" severity="1">
   <text>Unsuffixed integer constant is not of type int.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Constants"/>
   </references>
  </message>
  <message id="1256" level="QA_WARNING" help="doc-en_US/doc/messages/1256.html" severity="1">
   <text>An integer constant suffixed with L is being converted to type signed or unsigned long long on assignment.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1257" level="QA_WARNING" help="doc-en_US/doc/messages/1257.html" severity="1">
   <text>An integer constant suffixed with L or LL is being converted to a type of lower rank on assignment.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1258" level="QA_WARNING" help="doc-en_US/doc/messages/1258.html" severity="1">
   <text>Suffixed integer constant cast to a different integral type.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1259" level="QA_WARNING" help="doc-en_US/doc/messages/1259.html" severity="1">
   <text>Unsuffixed integer constant cast to a different integral type.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1260" level="QA_WARNING" help="doc-en_US/doc/messages/1260.html" severity="1">
   <text>Integer constant implicitly converted to a floating type.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1261" level="QA_WARNING" help="doc-en_US/doc/messages/1261.html" severity="1">
   <text>Suffixed floating constant implicitly converted to different floating type.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1262" level="QA_WARNING" help="doc-en_US/doc/messages/1262.html" severity="1">
   <text>Unsuffixed floating constant implicitly converted to different floating type.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1263" level="QA_WARNING" help="doc-en_US/doc/messages/1263.html" severity="1">
   <text>Floating constant causes implicit conversion of other (integral) operand.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1264" level="QA_WARNING" help="doc-en_US/doc/messages/1264.html" severity="1">
   <text>A suffixed floating constant is being converted to a different floating type on assignment.</text>
   <references>
      </references>
  </message>
  <message id="1265" level="QA_WARNING" help="doc-en_US/doc/messages/1265.html" severity="1">
   <text>An unsuffixed floating constant is being converted to a different floating type on assignment.</text>
   <references>
      </references>
  </message>
  <message id="1266" level="QA_WARNING" help="doc-en_US/doc/messages/1266.html" severity="1">
   <text>A floating constant is being converted to integral type on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1267" level="QA_WARNING" help="doc-en_US/doc/messages/1267.html" severity="1">
   <text>Suffixed floating constant cast to another type.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1268" level="QA_WARNING" help="doc-en_US/doc/messages/1268.html" severity="1">
   <text>Unsuffixed floating constant cast to another type.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1269" level="QA_WARNING" help="doc-en_US/doc/messages/1269.html" severity="1">
   <text>Floating constant cast to integral type.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1271" level="QA_WARNING" help="doc-en_US/doc/messages/1271.html" severity="3">
   <text>Using a non-int expression to define an enum constant.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1272" level="QA_WARNING" help="doc-en_US/doc/messages/1272.html" severity="1">
   <text>Redundant leading zeroes on a numeric constant.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1274" level="QA_WARNING" help="doc-en_US/doc/messages/1274.html" severity="1">
   <text>Unsuffixed floating constant causes implicit conversion of other (floating) operand.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1275" level="QA_WARNING" help="doc-en_US/doc/messages/1275.html" severity="1">
   <text>Suffixed floating constant causes implicit conversion of other (floating) operand.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1276" level="QA_WARNING" help="doc-en_US/doc/messages/1276.html" severity="1">
   <text>An integer constant is being converted to floating type on assignment.</text>
   <references>
      </references>
  </message>
  <message id="1277" level="QA_WARNING" help="doc-en_US/doc/messages/1277.html" severity="1">
   <text>Hex constant does not include a "U" suffix.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1278" level="QA_WARNING" help="doc-en_US/doc/messages/1278.html" severity="1">
   <text>Decimal constant includes a suffix.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1279" level="QA_WARNING" help="doc-en_US/doc/messages/1279.html" severity="1">
   <text>Hex constant includes an "L" suffix.</text>
   <references>
    <reference source="Suffixes"/>
   </references>
  </message>
  <message id="1280" level="QA_WARNING" help="doc-en_US/doc/messages/1280.html" severity="1">
   <text>A lowercase letter L (l) has been used in an integer or floating suffix.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="ISO:C90 Language [6.1.3.1]"/>
    <reference source="ISO:C90 Language [6.1.3.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1281" level="QA_WARNING" help="doc-en_US/doc/messages/1281.html" severity="1">
   <text>Integer literal constant is of an unsigned type but does not include a "U" suffix.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Constants"/>
    <reference source="ISO:C90 Language [6.1.3.2]"/>
   </references>
  </message>
  <message id="1282" level="QA_WARNING" help="doc-en_US/doc/messages/1282.html" severity="3">
   <text>A '%1s' suffix has been used to give a literal constant complex type.</text>
   <references>
    <reference source="Suffixes"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1283" level="QA_WARNING" help="doc-en_US/doc/messages/1283.html" severity="3">
   <text>A hexadecimal floating constant requires both a fractional part and an explicit exponent.</text>
   <references>
    <reference source="ISO:C11 Language [6.4.4.2]"/>
   </references>
  </message>
  <message id="1284" level="QA_WARNING" help="doc-en_US/doc/messages/1284.html" severity="2">
   <text>The '%1s' operator is being used to access part of a complex value.</text>
   <references>
      </references>
  </message>
  <message id="1290" level="QA_WARNING" help="doc-en_US/doc/messages/1290.html" severity="2">
   <text>An integer constant of 'essentially signed' type is being converted to unsigned type on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1291" level="QA_WARNING" help="doc-en_US/doc/messages/1291.html" severity="3">
   <text>An integer constant of 'essentially unsigned' type is being converted to signed type on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1292" level="QA_WARNING" help="doc-en_US/doc/messages/1292.html" severity="3">
   <text>An integer constant of 'essentially signed' type is being converted to type char on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1293" level="QA_WARNING" help="doc-en_US/doc/messages/1293.html" severity="3">
   <text>An integer constant of 'essentially unsigned' type is being converted to type char on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1294" level="QA_WARNING" help="doc-en_US/doc/messages/1294.html" severity="4">
   <text>An integer constant of 'essentially signed' type is being converted to type _Bool on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1295" level="QA_WARNING" help="doc-en_US/doc/messages/1295.html" severity="4">
   <text>An integer constant of 'essentially unsigned' type is being converted to type _Bool on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1296" level="QA_WARNING" help="doc-en_US/doc/messages/1296.html" severity="5">
   <text>An integer constant of 'essentially signed' type is being converted to enum type on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1297" level="QA_WARNING" help="doc-en_US/doc/messages/1297.html" severity="5">
   <text>An integer constant of 'essentially unsigned' type is being converted to enum type on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1298" level="QA_WARNING" help="doc-en_US/doc/messages/1298.html" severity="2">
   <text>An integer constant of 'essentially signed' type is being converted to floating type on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1299" level="QA_WARNING" help="doc-en_US/doc/messages/1299.html" severity="3">
   <text>An integer constant of 'essentially unsigned' type is being converted to floating type on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1300" level="QA_WARNING" help="doc-en_US/doc/messages/1300.html" severity="1">
   <text>'%s' is a keyword in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1301" level="QA_WARNING" help="doc-en_US/doc/messages/1301.html" severity="1">
   <text>'%s' is a keyword in some C++ implementations.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1303" level="QA_WARNING" help="doc-en_US/doc/messages/1303.html" severity="1">
   <text>An empty parameter list in a function type has a different meaning in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.9.4]"/>
   </references>
  </message>
  <message id="1304" level="QA_WARNING" help="doc-en_US/doc/messages/1304.html" severity="2">
   <text>Old style definition of function '%1s()' is not portable to C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Functions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1305" level="QA_WARNING" help="doc-en_US/doc/messages/1305.html" severity="1">
   <text>The global object '%1s' declared 'const' has external linkage in C but internal linkage in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1306" level="QA_WARNING" help="doc-en_US/doc/messages/1306.html" severity="1">
   <text>Multiple tentative definitions of '%s'. This is not allowed in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="1307" level="QA_WARNING" help="doc-en_US/doc/messages/1307.html" severity="1">
   <text>Unnamed 'struct' and 'union' types may cause portability problems when moving to C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1308" level="QA_WARNING" help="doc-en_US/doc/messages/1308.html" severity="1">
   <text>The tag '%1s' would clash with an existing typedef in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1309" level="QA_WARNING" help="doc-en_US/doc/messages/1309.html" severity="1">
   <text>The typedef '%1s' would clash with an existing 'struct' / 'union' / 'enum' tag in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1310" level="QA_WARNING" help="doc-en_US/doc/messages/1310.html" severity="2">
   <text>'%1s' is used as a tag and a typedef for the same 'struct' / 'union' / 'enum'.</text>
   <references>
      </references>
  </message>
  <message id="1311" level="QA_WARNING" help="doc-en_US/doc/messages/1311.html" severity="1">
   <text>'void *' and 'const T *' pointers used as operands to an equality or conditional operator.</text>
   <references>
      </references>
  </message>
  <message id="1312" level="QA_WARNING" help="doc-en_US/doc/messages/1312.html" severity="5">
   <text>The array being initialized is not large enough to hold a terminating null byte for the string initializer.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="C++ Compatibility"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1313" level="QA_WARNING" help="doc-en_US/doc/messages/1313.html" severity="1">
   <text>Executing 'goto %s' will cause local initialization to be skipped.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2.4]"/>
   </references>
  </message>
  <message id="1314" level="QA_WARNING" help="doc-en_US/doc/messages/1314.html" severity="1">
   <text>The tag '%1s' is defined within another 'struct' / 'union'.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1315" level="QA_WARNING" help="doc-en_US/doc/messages/1315.html" severity="5">
   <text>The 'static' qualifier has been used in the declaration of a tag.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1316" level="QA_WARNING" help="doc-en_US/doc/messages/1316.html" severity="6">
   <text>Resolving ordinary identifier '%2s' as the name of '%1s %2s'.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1317" level="QA_WARNING" help="doc-en_US/doc/messages/1317.html" severity="4">
   <text>Value of constant expression is not in the enum type to which it is being converted.</text>
   <references>
    <reference source="Enums"/>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="1318" level="QA_WARNING" help="doc-en_US/doc/messages/1318.html" severity="1">
   <text>Object of enum type is being modified with a compound assignment operator.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1319" level="QA_WARNING" help="doc-en_US/doc/messages/1319.html" severity="1">
   <text>Object of enum type is being modified with an increment or decrement operator.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1320" level="QA_WARNING" help="doc-en_US/doc/messages/1320.html" severity="1">
   <text>Entry point name '%1s' immediately followed by '(' token.</text>
   <references>
    <reference source="Identifiers"/>
   </references>
  </message>
  <message id="1321" level="QA_WARNING" help="doc-en_US/doc/messages/1321.html" severity="3">
   <text>Operand of sizeof is a function parameter of array type.</text>
   <references>
      </references>
  </message>
  <message id="1322" level="QA_WARNING" help="doc-en_US/doc/messages/1322.html" severity="1">
   <text>In C, sizeof('c') == sizeof(int), but in C++, sizeof('c') == sizeof(char) == 1.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.1.3.4]"/>
   </references>
  </message>
  <message id="1323" level="QA_WARNING" help="doc-en_US/doc/messages/1323.html" severity="2">
   <text>The sizeof operator has been applied to an enum constant.</text>
   <references>
    <reference source="Enums"/>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1324" level="QA_WARNING" help="doc-en_US/doc/messages/1324.html" severity="1">
   <text>Function 'main' cannot be called or have its address taken in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1325" level="QA_WARNING" help="doc-en_US/doc/messages/1325.html" severity="2">
   <text>'%s()'  is defined with a non-void return type but contains 'return;'. This is not allowed in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1326" level="QA_WARNING" help="doc-en_US/doc/messages/1326.html" severity="6">
   <text>The tag '%1s' is hiding an ordinary identifier in a wider scope.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1327" level="QA_WARNING" help="doc-en_US/doc/messages/1327.html" severity="1">
   <text>The macro __STDC__ has been used. It may not be present in a C++ environment.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.8.8]"/>
   </references>
  </message>
  <message id="1328" level="QA_WARNING" help="doc-en_US/doc/messages/1328.html" severity="3">
   <text>Tag type defined within a function declaration.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Function Returns"/>
   </references>
  </message>
  <message id="1329" level="QA_WARNING" help="doc-en_US/doc/messages/1329.html" severity="1">
   <text>The global object '%1s' declared 'const' has been defined without an explicit initializer. This is not allowed in C++.</text>
   <references>
    <reference source="C++ Compatibility"/>
   </references>
  </message>
  <message id="1330" level="QA_WARNING" help="doc-en_US/doc/messages/1330.html" severity="2">
   <text>The parameter identifiers in this function declaration differ from those in a previous declaration.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1331" level="QA_WARNING" help="doc-en_US/doc/messages/1331.html" severity="4">
   <text>Type or number of arguments doesn't match previous use of the function.</text>
   <references>
    <reference source="Functions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1332" level="QA_WARNING" help="doc-en_US/doc/messages/1332.html" severity="4">
   <text>Type or number of arguments doesn't match prototype found later.</text>
   <references>
    <reference source="Functions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1333" level="QA_WARNING" help="doc-en_US/doc/messages/1333.html" severity="4">
   <text>Type or number of arguments doesn't match function definition found later.</text>
   <references>
    <reference source="Functions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1334" level="QA_WARNING" help="doc-en_US/doc/messages/1334.html" severity="2">
   <text>The parameter identifiers in the prototypes of these functions/function pointers are different.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1335" level="QA_WARNING" help="doc-en_US/doc/messages/1335.html" severity="2">
   <text>Parameter identifiers missing in function prototype declaration.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1336" level="QA_WARNING" help="doc-en_US/doc/messages/1336.html" severity="2">
   <text>Parameter identifiers missing in declaration of a function type.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1337" level="QA_WARNING" help="doc-en_US/doc/messages/1337.html" severity="3">
   <text>Function defined with a variable number of parameters.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1338" level="QA_WARNING" help="doc-en_US/doc/messages/1338.html" severity="2">
   <text>The parameter '%1s' is being modified.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1339" level="QA_WARNING" help="doc-en_US/doc/messages/1339.html" severity="2">
   <text>Evaluating the address of the parameter '%1s'.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1340" level="QA_WARNING" help="doc-en_US/doc/messages/1340.html" severity="2">
   <text>Storing the address of the parameter '%1s' in a constant pointer.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="1394" level="QA_WARNING" help="doc-en_US/doc/messages/1394.html" severity="2">
   <text>Using a chained designator.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="1395" level="QA_WARNING" help="doc-en_US/doc/messages/1395.html" severity="2">
   <text>This initializer specifies both chained designators and positional initializers.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="1396" level="QA_WARNING" help="doc-en_US/doc/messages/1396.html" severity="2">
   <text>This chained designator modifies part of a previously-initialized member.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="1397" level="QA_WARNING" help="doc-en_US/doc/messages/1397.html" severity="2">
   <text>Array element '%1s' has already been initialized.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="1398" level="QA_WARNING" help="doc-en_US/doc/messages/1398.html" severity="2">
   <text>Structure member '%1s' has already been initialized.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="1399" level="QA_WARNING" help="doc-en_US/doc/messages/1399.html" severity="2">
   <text>A union member has already been initialized.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="1400" level="QA_WARNING" help="doc-en_US/doc/messages/1400.html" severity="3">
   <text>Enum object is being compared with an enum constant of a different enum type using an equality operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1401" level="QA_WARNING" help="doc-en_US/doc/messages/1401.html" severity="4">
   <text>An enum constant is being passed as argument to a function parameter of a different enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1402" level="QA_WARNING" help="doc-en_US/doc/messages/1402.html" severity="4">
   <text>An enum constant is being assigned to an object of a different enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1403" level="QA_WARNING" help="doc-en_US/doc/messages/1403.html" severity="4">
   <text>An enum constant is being returned from a function with a different enum return type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1404" level="QA_WARNING" help="doc-en_US/doc/messages/1404.html" severity="3">
   <text>Enum object is being compared with an enum constant of a different enum type using a relational operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1410" level="QA_WARNING" help="doc-en_US/doc/messages/1410.html" severity="3">
   <text>Enum object is being compared with a constant, non-enum expression using an equality operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1411" level="QA_WARNING" help="doc-en_US/doc/messages/1411.html" severity="4">
   <text>A constant expression of non-enum type is being passed as argument to a function parameter of enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1412" level="QA_WARNING" help="doc-en_US/doc/messages/1412.html" severity="4">
   <text>A constant expression of non-enum type is being assigned to an object of enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1413" level="QA_WARNING" help="doc-en_US/doc/messages/1413.html" severity="4">
   <text>A constant expression of non-enum type is being returned from a function with an enum return type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1414" level="QA_WARNING" help="doc-en_US/doc/messages/1414.html" severity="3">
   <text>Enum object is being compared with a constant, non-enum expression using a relational operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1420" level="QA_WARNING" help="doc-en_US/doc/messages/1420.html" severity="3">
   <text>Enum object is being compared with an object of a different enum type using an equality operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1421" level="QA_WARNING" help="doc-en_US/doc/messages/1421.html" severity="4">
   <text>An enum object is being passed as argument to a function parameter of a different enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1422" level="QA_WARNING" help="doc-en_US/doc/messages/1422.html" severity="4">
   <text>An enum object is being assigned to an object of a different enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1423" level="QA_WARNING" help="doc-en_US/doc/messages/1423.html" severity="4">
   <text>An enum object is being returned from a function with a different enum return type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1424" level="QA_WARNING" help="doc-en_US/doc/messages/1424.html" severity="3">
   <text>Enum object is being compared with an object of a different enum type using a relational operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1431" level="QA_WARNING" help="doc-en_US/doc/messages/1431.html" severity="2">
   <text>An enum object is being passed as argument to a function parameter of non-enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1432" level="QA_WARNING" help="doc-en_US/doc/messages/1432.html" severity="2">
   <text>An enum object is being assigned to an object of non-enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1433" level="QA_WARNING" help="doc-en_US/doc/messages/1433.html" severity="2">
   <text>An enum object is being returned from a function with a non-enum return type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1434" level="QA_WARNING" help="doc-en_US/doc/messages/1434.html" severity="1">
   <text>[I] This enum constant is not representable in a 16 bit integer type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1440" level="QA_WARNING" help="doc-en_US/doc/messages/1440.html" severity="2">
   <text>Enum object is being compared with a non-constant, non-enum expression using an equality operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1441" level="QA_WARNING" help="doc-en_US/doc/messages/1441.html" severity="4">
   <text>A non-constant expression of non-enum type is being passed as argument to a function parameter of enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1442" level="QA_WARNING" help="doc-en_US/doc/messages/1442.html" severity="4">
   <text>A non-constant expression of non-enum type is being assigned to an object of enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1443" level="QA_WARNING" help="doc-en_US/doc/messages/1443.html" severity="4">
   <text>A non-constant expression of non-enum type is being returned from a function with an enum return type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1444" level="QA_WARNING" help="doc-en_US/doc/messages/1444.html" severity="2">
   <text>Enum object is being compared with a non-constant, non-enum expression using a relational operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1460" level="QA_WARNING" help="doc-en_US/doc/messages/1460.html" severity="4">
   <text>'Switch' label value, %1s, not contained in enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1461" level="QA_WARNING" help="doc-en_US/doc/messages/1461.html" severity="4">
   <text>Value of constant expression is not in the enum type to which it is being converted, but is bitwise OR of constants in the enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1470" level="QA_WARNING" help="doc-en_US/doc/messages/1470.html" severity="4">
   <text>Numeric constant used as 'case' label with 'switch' expression of enum type.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1472" level="QA_WARNING" help="doc-en_US/doc/messages/1472.html" severity="4">
   <text>Enum constant used as 'case' label with 'switch' expression of different enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="Switch Statements"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1473" level="QA_WARNING" help="doc-en_US/doc/messages/1473.html" severity="3">
   <text>The 2nd and 3rd operands of this conditional operator (? :) are of different enum types.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1474" level="QA_WARNING" help="doc-en_US/doc/messages/1474.html" severity="4">
   <text>Object of enum type is being modified with a bitwise compound assignment operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1475" level="QA_WARNING" help="doc-en_US/doc/messages/1475.html" severity="1">
   <text>Range of possible enum values suggests this test is always true.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1476" level="QA_WARNING" help="doc-en_US/doc/messages/1476.html" severity="1">
   <text>Range of possible enum values suggests this test is always false.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1477" level="QA_WARNING" help="doc-en_US/doc/messages/1477.html" severity="1">
   <text>Object of enum type is being implicitly compared against zero in a controlling expression.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1478" level="QA_WARNING" help="doc-en_US/doc/messages/1478.html" severity="1">
   <text>Object of an enum type which does not include a zero value, is being implicitly compared against zero in a controlling expression.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1479" level="QA_WARNING" help="doc-en_US/doc/messages/1479.html" severity="4">
   <text>Object of enum type is being modified with an arithmetic compound assignment operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1480" level="QA_WARNING" help="doc-en_US/doc/messages/1480.html" severity="3">
   <text>Objects or constants of different enum types are operands of a bitwise operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1481" level="QA_WARNING" help="doc-en_US/doc/messages/1481.html" severity="4">
   <text>Object of enum type is being modified with an increment or decrement operator.</text>
   <references>
    <reference source="Enums"/>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1482" level="QA_WARNING" help="doc-en_US/doc/messages/1482.html" severity="4">
   <text>Non-constant expression cast to enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1483" level="QA_WARNING" help="doc-en_US/doc/messages/1483.html" severity="2">
   <text>Enum object or constant passed as argument to function declared in K&amp;R style.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1484" level="QA_WARNING" help="doc-en_US/doc/messages/1484.html" severity="3">
   <text>Constant expression cast to enum type.</text>
   <references>
    <reference source="Enums"/>
    <reference source="ISO:C90 Language [6.5.2.2]"/>
   </references>
  </message>
  <message id="1485" level="QA_WARNING" help="doc-en_US/doc/messages/1485.html" severity="3">
   <text>A pointer to a FILE object is dereferenced.</text>
   <references>
    <reference source="ISO:C90 Language [7.9.3]"/>
    <reference source="ISO:C99 Language [7.19.3]"/>
   </references>
  </message>
  <message id="1486" level="QA_WARNING" help="doc-en_US/doc/messages/1486.html" severity="3">
   <text>A pointer to a FILE object is converted to a different type.</text>
   <references>
    <reference source="ISO:C90 Language [7.9.3]"/>
    <reference source="ISO:C99 Language [7.19.3]"/>
   </references>
  </message>
  <message id="1487" level="QA_WARNING" help="doc-en_US/doc/messages/1487.html" severity="6">
   <text>[I] Comparing the representations of objects of different types.</text>
   <references>
    <reference source="ISO:C90 Language [7.11.4.1]"/>
    <reference source="ISO:C99 Language [7.21.4.1]"/>
   </references>
  </message>
  <message id="1488" level="QA_WARNING" help="doc-en_US/doc/messages/1488.html" severity="6">
   <text>[I] Comparison of a struct object representation.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
    <reference source="ISO:C99 Language [6.2.6.1]"/>
   </references>
  </message>
  <message id="1489" level="QA_WARNING" help="doc-en_US/doc/messages/1489.html" severity="6">
   <text>[I] Comparison of a union object representation.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
    <reference source="ISO:C99 Language [6.2.6.1]"/>
   </references>
  </message>
  <message id="1490" level="QA_WARNING" help="doc-en_US/doc/messages/1490.html" severity="6">
   <text>[I] Comparison of a floating point object representation.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
    <reference source="ISO:C99 Language [6.2.6.1]"/>
   </references>
  </message>
  <message id="1491" level="QA_WARNING" help="doc-en_US/doc/messages/1491.html" severity="6">
   <text>[I] Comparison of an object representation.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
    <reference source="ISO:C99 Language [6.2.6.1]"/>
   </references>
  </message>
  <message id="1492" level="QA_WARNING" help="doc-en_US/doc/messages/1492.html" severity="2">
   <text>The result of library function '%1s' is used to modify the referenced object.</text>
   <references>
      </references>
  </message>
  <message id="1493" level="QA_WARNING" help="doc-en_US/doc/messages/1493.html" severity="2">
   <text>The result of library function '%1s' is used as a pointer to a modifiable object.</text>
   <references>
      </references>
  </message>
  <message id="1494" level="QA_WARNING" help="doc-en_US/doc/messages/1494.html" severity="2">
   <text>The result of library function '%1s' might be modified.</text>
   <references>
      </references>
  </message>
  <message id="1495" level="QA_WARNING" help="doc-en_US/doc/messages/1495.html" severity="6">
   <text>[I] Destination and source objects have incompatible types.</text>
   <references>
    <reference source="ISO:C90 Language [7.11.2.1]"/>
    <reference source="ISO:C90 Language [7.11.2.2]"/>
    <reference source="ISO:C99 Language [7.21.2.1]"/>
    <reference source="ISO:C99 Language [7.21.2.2]"/>
   </references>
  </message>
  <message id="1496" level="QA_WARNING" help="doc-en_US/doc/messages/1496.html" severity="6">
   <text>[I] Destination and source objects may have incompatible types.</text>
   <references>
    <reference source="ISO:C90 Language [7.11.2.1]"/>
    <reference source="ISO:C90 Language [7.11.2.2]"/>
    <reference source="ISO:C99 Language [7.21.2.1]"/>
    <reference source="ISO:C99 Language [7.21.2.2]"/>
   </references>
  </message>
  <message id="1497" level="QA_WARNING" help="doc-en_US/doc/messages/1497.html" severity="2">
   <text>Comparison of a string object representation.</text>
   <references>
    <reference source="ISO:C90 Language [7.11.4.1]"/>
    <reference source="ISO:C99 Language [7.21.4.1]"/>
   </references>
  </message>
  <message id="1498" level="QA_WARNING" help="doc-en_US/doc/messages/1498.html" severity="2">
   <text>The string referenced by &lt;locale.h&gt; type 'struct lconv' member '%1s' is being modified.</text>
   <references>
      </references>
  </message>
  <message id="1561" level="QA_INFORMATION" help="" severity="0">
   <text>Lambda stored here.</text>
   <references>
      </references>
  </message>
  <message id="1562" level="QA_INFORMATION" help="" severity="0">
   <text>Offending type '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1563" level="QA_INFORMATION" help="" severity="0">
   <text>Entity '%1s' accessed or called here.</text>
   <references>
      </references>
  </message>
  <message id="1564" level="QA_INFORMATION" help="" severity="0">
   <text>Statement stops function returning normally to caller.</text>
   <references>
      </references>
  </message>
  <message id="1565" level="QA_INFORMATION" help="" severity="0">
   <text>Resource was orphaned here.</text>
   <references>
      </references>
  </message>
  <message id="1566" level="QA_INFORMATION" help="" severity="0">
   <text>Thread '%1s' created here'%3s' by thread '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="1568" level="QA_INFORMATION" help="" severity="0">
   <text>Thread '%1s' holds lock '%2s' and attempts to lock '%3s'.</text>
   <references>
      </references>
  </message>
  <message id="1569" level="QA_INFORMATION" help="" severity="0">
   <text>Issue for message '%1s' found here (even if not visible).</text>
   <references>
      </references>
  </message>
  <message id="1570" level="QA_INFORMATION" help="" severity="0">
   <text>Called from here.</text>
   <references>
      </references>
  </message>
  <message id="1571" level="QA_INFORMATION" help="" severity="0">
   <text>Occurs on %1s iteration.</text>
   <references>
      </references>
  </message>
  <message id="1572" level="QA_INFORMATION" help="" severity="0">
   <text>Return statement here.</text>
   <references>
      </references>
  </message>
  <message id="1573" level="QA_INFORMATION" help="" severity="0">
   <text>Last unreachable statement.</text>
   <references>
      </references>
  </message>
  <message id="1574" level="QA_INFORMATION" help="" severity="0">
   <text>Viable path.</text>
   <references>
      </references>
  </message>
  <message id="1575" level="QA_INFORMATION" help="" severity="0">
   <text>Variable '%1s' previously seen here. (Specimen value: '%2s').</text>
   <references>
      </references>
  </message>
  <message id="1576" level="QA_INFORMATION" help="" severity="0">
   <text>Label statement here.</text>
   <references>
      </references>
  </message>
  <message id="1577" level="QA_INFORMATION" help="" severity="0">
   <text>Next seen here.</text>
   <references>
      </references>
  </message>
  <message id="1578" level="QA_INFORMATION" help="" severity="0">
   <text>Found in directory: '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="1579" level="QA_INFORMATION" help="" severity="0">
   <text>Referenced here.</text>
   <references>
      </references>
  </message>
  <message id="1580" level="QA_INFORMATION" help="" severity="0">
   <text>Function '%1s' calls '%2s' here.</text>
   <references>
      </references>
  </message>
  <message id="1581" level="QA_INFORMATION" help="" severity="0">
   <text>%1s %2s here.</text>
   <references>
      </references>
  </message>
  <message id="1582" level="QA_INFORMATION" help="" severity="0">
   <text>Previously seen here.</text>
   <references>
      </references>
  </message>
  <message id="1585" level="QA_INFORMATION" help="" severity="0">
   <text>Next set here.</text>
   <references>
      </references>
  </message>
  <message id="1586" level="QA_INFORMATION" help="" severity="0">
   <text>Previously set here.</text>
   <references>
      </references>
  </message>
  <message id="1590" level="QA_INFORMATION" help="" severity="0">
   <text>Offending operand.</text>
   <references>
      </references>
  </message>
  <message id="1592" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' declared in %2s '%3s'.</text>
   <references>
      </references>
  </message>
  <message id="1593" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' defined here.</text>
   <references>
      </references>
  </message>
  <message id="1594" level="QA_INFORMATION" help="" severity="0">
   <text>'%1s' declared here.</text>
   <references>
      </references>
  </message>
  <message id="1598" level="QA_INFORMATION" help="" severity="0">
   <text>Expanded from macro '%1s' here.</text>
   <references>
      </references>
  </message>
  <message id="1599" level="QA_INFORMATION" help="" severity="0">
   <text>Included from here.</text>
   <references>
      </references>
  </message>
  <message id="1690" level="QA_WARNING" help="doc-en_US/doc/messages/1690.html" severity="2">
   <text>Null preprocessing directive used.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.7]"/>
   </references>
  </message>
  <message id="1691" level="QA_WARNING" help="doc-en_US/doc/messages/1691.html" severity="2">
   <text>Null preprocessing directive used in an excluded section of code.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.7]"/>
   </references>
  </message>
  <message id="1800" level="QA_WARNING" help="doc-en_US/doc/messages/1800.html" severity="3">
   <text>The %1s operand (essential type: '%2s') will be implicitly converted to a floating type, '%3s', in this arithmetic operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1802" level="QA_WARNING" help="doc-en_US/doc/messages/1802.html" severity="4">
   <text>The %1s operand (essential type: '%2s') will be implicitly converted to a floating type, '%3s', in this relational operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1803" level="QA_WARNING" help="doc-en_US/doc/messages/1803.html" severity="4">
   <text>The %1s operand (essential type: '%2s') will be implicitly converted to a floating type, '%3s', in this equality operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1804" level="QA_WARNING" help="doc-en_US/doc/messages/1804.html" severity="4">
   <text>The %1s operand (essential type: '%2s') will be implicitly converted to a floating type, '%3s', in this conditional operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1810" level="QA_WARNING" help="doc-en_US/doc/messages/1810.html" severity="5">
   <text>An operand of 'essentially character' type is being added to another operand of 'essentially character' type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1811" level="QA_WARNING" help="doc-en_US/doc/messages/1811.html" severity="5">
   <text>An operand of 'essentially character' type is being subtracted from an operand of 'essentially signed' type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1812" level="QA_WARNING" help="doc-en_US/doc/messages/1812.html" severity="5">
   <text>An operand of 'essentially character' type is being subtracted from an operand of 'essentially unsigned' type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1813" level="QA_WARNING" help="doc-en_US/doc/messages/1813.html" severity="5">
   <text>An operand of 'essentially character' type is being balanced with an operand of 'essentially floating' type in this arithmetic operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1814" level="QA_WARNING" help="doc-en_US/doc/messages/1814.html" severity="5">
   <text>An operand of 'essentially enum' type is being added or subtracted from an operand of 'essentially character' type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1820" level="QA_WARNING" help="doc-en_US/doc/messages/1820.html" severity="5">
   <text>The %1s operand is non-constant and 'essentially signed' (%2s) but will be implicitly converted to an unsigned type (%3s) in this arithmetic operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1821" level="QA_WARNING" help="doc-en_US/doc/messages/1821.html" severity="5">
   <text>The %1s operand is non-constant and 'essentially signed' (%2s) but will be implicitly converted to an unsigned type (%3s) in this bitwise operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1822" level="QA_WARNING" help="doc-en_US/doc/messages/1822.html" severity="5">
   <text>The %1s operand is non-constant and 'essentially signed' (%2s) but will be implicitly converted to an unsigned type (%3s) in this relational operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1823" level="QA_WARNING" help="doc-en_US/doc/messages/1823.html" severity="5">
   <text>The %1s operand is non-constant and 'essentially signed' (%2s) but will be implicitly converted to an unsigned type (%3s) in this equality operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1824" level="QA_WARNING" help="doc-en_US/doc/messages/1824.html" severity="5">
   <text>The %1s operand is non-constant and 'essentially signed' (%2s) but will be implicitly converted to an unsigned type (%3s) in this conditional operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1830" level="QA_WARNING" help="doc-en_US/doc/messages/1830.html" severity="5">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and negative but will be implicitly converted to an unsigned type (%3s) in this arithmetic operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1831" level="QA_WARNING" help="doc-en_US/doc/messages/1831.html" severity="5">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and negative but will be implicitly converted to an unsigned type (%3s) in this bitwise operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1832" level="QA_WARNING" help="doc-en_US/doc/messages/1832.html" severity="5">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and negative but will be implicitly converted to an unsigned type (%3s) in this relational operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1833" level="QA_WARNING" help="doc-en_US/doc/messages/1833.html" severity="5">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and negative but will be implicitly converted to an unsigned type (%3s) in this equality operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1834" level="QA_WARNING" help="doc-en_US/doc/messages/1834.html" severity="5">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and negative but will be implicitly converted to an unsigned type (%3s) in this conditional operation.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1840" level="QA_WARNING" help="doc-en_US/doc/messages/1840.html" severity="3">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and non-negative but will be implicitly converted to an unsigned type (%3s) in this arithmetic operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1841" level="QA_WARNING" help="doc-en_US/doc/messages/1841.html" severity="3">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and non-negative but will be implicitly converted to an unsigned type (%3s) in this bitwise operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1842" level="QA_WARNING" help="doc-en_US/doc/messages/1842.html" severity="3">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and non-negative but will be implicitly converted to an unsigned type (%3s) in this relational operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1843" level="QA_WARNING" help="doc-en_US/doc/messages/1843.html" severity="3">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and non-negative but will be implicitly converted to an unsigned type (%3s) in this equality operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1844" level="QA_WARNING" help="doc-en_US/doc/messages/1844.html" severity="3">
   <text>The %1s operand is constant, 'essentially signed' (%2s) and non-negative but will be implicitly converted to an unsigned type (%3s) in this conditional operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1850" level="QA_WARNING" help="doc-en_US/doc/messages/1850.html" severity="4">
   <text>The %1s operand is 'essentially unsigned' (%2s) but will be implicitly converted to a signed type (%3s) in this arithmetic operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1851" level="QA_WARNING" help="doc-en_US/doc/messages/1851.html" severity="4">
   <text>The %1s operand is 'essentially unsigned' (%2s) but will be implicitly converted to a signed type (%3s) in this bitwise operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1852" level="QA_WARNING" help="doc-en_US/doc/messages/1852.html" severity="4">
   <text>The %1s operand is 'essentially unsigned' (%2s) but will be implicitly converted to a signed type (%3s) in this relational operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1853" level="QA_WARNING" help="doc-en_US/doc/messages/1853.html" severity="3">
   <text>The %1s operand is 'essentially unsigned' (%2s) but will be implicitly converted to a signed type (%3s) in this equality operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1854" level="QA_WARNING" help="doc-en_US/doc/messages/1854.html" severity="3">
   <text>The %1s operand is 'essentially unsigned' (%2s) but will be implicitly converted to a signed type (%3s) in this conditional operation.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1860" level="QA_WARNING" help="doc-en_US/doc/messages/1860.html" severity="4">
   <text>The operands of this arithmetic operator are of different 'essential signedness' but will generate a result of type 'signed int'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1861" level="QA_WARNING" help="doc-en_US/doc/messages/1861.html" severity="4">
   <text>The operands of this bitwise operator are of different 'essential signedness' but will generate a result of type 'signed int'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1862" level="QA_WARNING" help="doc-en_US/doc/messages/1862.html" severity="4">
   <text>The operands of this relational operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1863" level="QA_WARNING" help="doc-en_US/doc/messages/1863.html" severity="4">
   <text>The operands of this equality operator are of different 'essential signedness' but will both be promoted to 'signed int' for comparison.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1864" level="QA_WARNING" help="doc-en_US/doc/messages/1864.html" severity="4">
   <text>The 2nd and 3rd operands of this conditional operator are of different 'essential signedness'. The result will be in the promoted type 'signed int'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1880" level="QA_WARNING" help="doc-en_US/doc/messages/1880.html" severity="4">
   <text>The operands of this relational operator are expressions of different 'essential type' categories (%1s and %2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1881" level="QA_WARNING" help="doc-en_US/doc/messages/1881.html" severity="4">
   <text>The operands of this equality operator are expressions of different 'essential type' categories (%1s and %2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1882" level="QA_WARNING" help="doc-en_US/doc/messages/1882.html" severity="4">
   <text>The 2nd and 3rd operands of this conditional operator are expressions of different 'essential type' categories (%1s and %2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1890" level="QA_WARNING" help="doc-en_US/doc/messages/1890.html" severity="4">
   <text>A composite expression of 'essentially signed' type (%1s) is being implicitly converted to a wider signed type, '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1891" level="QA_WARNING" help="doc-en_US/doc/messages/1891.html" severity="4">
   <text>A composite expression of 'essentially unsigned' type (%1s) is being implicitly converted to a wider unsigned type, '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1892" level="QA_WARNING" help="doc-en_US/doc/messages/1892.html" severity="4">
   <text>A composite expression of 'essentially floating' type (%1s) is being implicitly converted to a wider floating type, '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1893" level="QA_WARNING" help="doc-en_US/doc/messages/1893.html" severity="4">
   <text>The 2nd and 3rd operands of this conditional operator are both 'essentially signed' ('%1s' and '%2s') but one is a composite expression of a narrower type than the other.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1894" level="QA_WARNING" help="doc-en_US/doc/messages/1894.html" severity="4">
   <text>The 2nd and 3rd operands of this conditional operator are both 'essentially unsigned' ('%1s' and '%2s') but one is a composite expression of a narrower type than the other.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="1895" level="QA_WARNING" help="doc-en_US/doc/messages/1895.html" severity="4">
   <text>The 2nd and 3rd operands of this conditional operator are both 'essentially floating' ('%1s' and '%2s') but one is a composite expression of a narrower type than the other.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2000" level="QA_WARNING" help="doc-en_US/doc/messages/2000.html" severity="2">
   <text>No 'else' clause exists for this 'if' statement.</text>
   <references>
    <reference source="Control"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2001" level="QA_WARNING" help="doc-en_US/doc/messages/2001.html" severity="3">
   <text>A 'goto' statement has been used.</text>
   <references>
    <reference source="Goto and Labels"/>
   </references>
  </message>
  <message id="2002" level="QA_WARNING" help="doc-en_US/doc/messages/2002.html" severity="3">
   <text>No 'default' label found in this 'switch' statement.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2003" level="QA_WARNING" help="doc-en_US/doc/messages/2003.html" severity="3">
   <text>The preceding 'switch' clause is not empty and does not end with a 'jump' statement. Execution will fall through.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2004" level="QA_WARNING" help="doc-en_US/doc/messages/2004.html" severity="3">
   <text>No concluding 'else' exists in this 'if'-'else'-'if' statement.</text>
   <references>
    <reference source="Control"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2005" level="QA_WARNING" help="doc-en_US/doc/messages/2005.html" severity="3">
   <text>A 'continue' statement has been used.</text>
   <references>
    <reference source="Control"/>
   </references>
  </message>
  <message id="2007" level="QA_WARNING" help="doc-en_US/doc/messages/2007.html" severity="2">
   <text>'auto' does not add information to a declaration, and is best avoided.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="2008" level="QA_WARNING" help="doc-en_US/doc/messages/2008.html" severity="5">
   <text>Code statements precede the first label in this 'switch' construct.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2009" level="QA_WARNING" help="doc-en_US/doc/messages/2009.html" severity="2">
   <text>This 'default' label is not the final 'case' label within the 'switch' block.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2010" level="QA_WARNING" help="doc-en_US/doc/messages/2010.html" severity="5">
   <text>The function '%1s()' must not be called.</text>
   <references>
    <reference source="Function Returns"/>
   </references>
  </message>
  <message id="2011" level="QA_WARNING" help="doc-en_US/doc/messages/2011.html" severity="2">
   <text>The 'register' storage class specifier has been used.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="2012" level="QA_WARNING" help="doc-en_US/doc/messages/2012.html" severity="2">
   <text>This 'default' label is neither the first nor the last label within the 'switch' block.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2013" level="QA_WARNING" help="doc-en_US/doc/messages/2013.html" severity="2">
   <text>This 'if .. else if ' construct 'else' statement is empty.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2014" level="QA_WARNING" help="doc-en_US/doc/messages/2014.html" severity="2">
   <text>This 'switch' statement 'default' clause is empty and contains comments.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2015" level="QA_WARNING" help="doc-en_US/doc/messages/2015.html" severity="1">
   <text>A statement 'label' has been used.</text>
   <references>
    <reference source="Goto and Labels"/>
   </references>
  </message>
  <message id="2016" level="QA_WARNING" help="doc-en_US/doc/messages/2016.html" severity="2">
   <text>This 'switch' statement 'default' clause is empty.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2017" level="QA_WARNING" help="doc-en_US/doc/messages/2017.html" severity="2">
   <text>Comment spans more than one line.</text>
   <references>
      </references>
  </message>
  <message id="2019" level="QA_WARNING" help="doc-en_US/doc/messages/2019.html" severity="4">
   <text>'Switch' label is located within a nested code block.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2020" level="QA_WARNING" help="doc-en_US/doc/messages/2020.html" severity="2">
   <text>Final 'switch' clause does not end with an explicit 'jump' statement.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2021" level="QA_WARNING" help="doc-en_US/doc/messages/2021.html" severity="3">
   <text>This tentative definition is interpreted as a declaration. Is this intended ?</text>
   <references>
      </references>
  </message>
  <message id="2022" level="QA_WARNING" help="doc-en_US/doc/messages/2022.html" severity="2">
   <text>A tentative definition is being used. Is it appropriate to include an explicit initializer ?</text>
   <references>
      </references>
  </message>
  <message id="2023" level="QA_WARNING" help="doc-en_US/doc/messages/2023.html" severity="1">
   <text>The preceding 'switch' clause is not empty and ends with a jump statement other than 'break'.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2024" level="QA_WARNING" help="doc-en_US/doc/messages/2024.html" severity="1">
   <text>Final 'switch' clause ends with a 'jump' statement other than 'break'.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2025" level="QA_WARNING" help="doc-en_US/doc/messages/2025.html" severity="1">
   <text>This appears to jump across a nested function scope boundary.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2026" level="QA_WARNING" help="doc-en_US/doc/messages/2026.html" severity="7">
   <text>This function can fail spuriously, but does not appear to be wrapped in a loop.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2027" level="QA_WARNING" help="doc-en_US/doc/messages/2027.html" severity="6">
   <text>This function can wake spuriously, but does not appear to be wrapped in a loop.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2028" level="QA_WARNING" help="doc-en_US/doc/messages/2028.html" severity="6">
   <text>Signal handler '%1s' calls async-unsafe functions.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2029" level="QA_WARNING" help="doc-en_US/doc/messages/2029.html" severity="6">
   <text>Signal handler '%1s' accesses shared objects.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2030" level="QA_WARNING" help="doc-en_US/doc/messages/2030.html" severity="6">
   <text>The signal handler passed here might not be async-safe.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2031" level="QA_WARNING" help="doc-en_US/doc/messages/2031.html" severity="6">
   <text>Signal handler '%1s' accesses errno.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2032" level="QA_WARNING" help="doc-en_US/doc/messages/2032.html" severity="1">
   <text>The switch expression is not simple.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="2033" level="QA_WARNING" help="doc-en_US/doc/messages/2033.html" severity="5">
   <text>The member '%1s' must not be set.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2034" level="QA_WARNING" help="doc-en_US/doc/messages/2034.html" severity="3">
   <text>This concurrency primitive has automatic storage duration.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2035" level="QA_WARNING" help="doc-en_US/doc/messages/2035.html" severity="3">
   <text>This concurrency primitive is not accessed through the Threads library.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2036" level="QA_WARNING" help="doc-en_US/doc/messages/2036.html" severity="3">
   <text>This concurrency primitive is modified directly.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2037" level="QA_WARNING" help="doc-en_US/doc/messages/2037.html" severity="7">
   <text>[U] Directly accessing a member of an atomic-qualified structure or union.</text>
   <references>
    <reference source="Security Problems"/>
    <reference source="ISO:C11 Language [6.5.2.3]"/>
   </references>
  </message>
  <message id="2038" level="QA_WARNING" help="doc-en_US/doc/messages/2038.html" severity="5">
   <text>Attempting to derive an atomic type from void.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2039" level="QA_WARNING" help="doc-en_US/doc/messages/2039.html" severity="6">
   <text>This conversion implicitly loses atomic qualification of the pointed-to type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2040" level="QA_WARNING" help="doc-en_US/doc/messages/2040.html" severity="6">
   <text>This cast discards atomic qualification of the pointed-to type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2041" level="QA_WARNING" help="doc-en_US/doc/messages/2041.html" severity="5">
   <text>This is converting a pointer to an atomic type to a pointer to character type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2047" level="QA_WARNING" help="doc-en_US/doc/messages/2047.html" severity="3">
   <text>The automatic variable '%1s' is not initialized at the point of declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2048" level="QA_WARNING" help="doc-en_US/doc/messages/2048.html" severity="3">
   <text>The automatic const variable '%1s' is not initialized at the point of declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2049" level="QA_WARNING" help="doc-en_US/doc/messages/2049.html" severity="3">
   <text>The automatic volatile variable '%1s' is not initialized at the point of declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2050" level="QA_WARNING" help="doc-en_US/doc/messages/2050.html" severity="2">
   <text>The 'int' type specifier has been omitted from a function declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2051" level="QA_WARNING" help="doc-en_US/doc/messages/2051.html" severity="2">
   <text>The 'int' type specifier has been omitted from an object declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2052" level="QA_WARNING" help="doc-en_US/doc/messages/2052.html" severity="2">
   <text>This line comment appears to comment out source code.</text>
   <references>
      </references>
  </message>
  <message id="2053" level="QA_WARNING" help="doc-en_US/doc/messages/2053.html" severity="2">
   <text>This block comment appears to comment out source code.</text>
   <references>
      </references>
  </message>
  <message id="2054" level="QA_WARNING" help="doc-en_US/doc/messages/2054.html" severity="2">
   <text>Use of '#if 0' directive.</text>
   <references>
      </references>
  </message>
  <message id="2070" level="QA_WARNING" help="doc-en_US/doc/messages/2070.html" severity="2">
   <text>Using [[attribute]] syntax.</text>
   <references>
      </references>
  </message>
  <message id="2071" level="QA_WARNING" help="doc-en_US/doc/messages/2071.html" severity="2">
   <text>[E] This attribute syntax is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="2072" level="QA_WARNING" help="doc-en_US/doc/messages/2072.html" severity="5">
   <text>[E] This attribute specifier is unexpected in this source position, and will be ignored.</text>
   <references>
      </references>
  </message>
  <message id="2100" level="QA_WARNING" help="doc-en_US/doc/messages/2100.html" severity="2">
   <text>Integral promotion : unsigned char promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2101" level="QA_WARNING" help="doc-en_US/doc/messages/2101.html" severity="2">
   <text>Integral promotion : unsigned short promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2102" level="QA_WARNING" help="doc-en_US/doc/messages/2102.html" severity="2">
   <text>Integral promotion : unsigned char promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2103" level="QA_WARNING" help="doc-en_US/doc/messages/2103.html" severity="2">
   <text>Integral promotion : unsigned short promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2104" level="QA_WARNING" help="doc-en_US/doc/messages/2104.html" severity="2">
   <text>Integral promotion : signed char promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2105" level="QA_WARNING" help="doc-en_US/doc/messages/2105.html" severity="2">
   <text>Integral promotion : signed short promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2106" level="QA_WARNING" help="doc-en_US/doc/messages/2106.html" severity="2">
   <text>Integral promotion : plain char promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2107" level="QA_WARNING" help="doc-en_US/doc/messages/2107.html" severity="2">
   <text>Integral promotion : plain char promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2109" level="QA_WARNING" help="doc-en_US/doc/messages/2109.html" severity="2">
   <text>Integral promotion : _Bool promoted to signed int.</text>
   <references>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2110" level="QA_WARNING" help="doc-en_US/doc/messages/2110.html" severity="2">
   <text>Default argument promotion : unsigned char promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2111" level="QA_WARNING" help="doc-en_US/doc/messages/2111.html" severity="2">
   <text>Default argument promotion : unsigned short promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2112" level="QA_WARNING" help="doc-en_US/doc/messages/2112.html" severity="2">
   <text>Default argument promotion : unsigned char promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2113" level="QA_WARNING" help="doc-en_US/doc/messages/2113.html" severity="2">
   <text>Default argument promotion : unsigned short promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2114" level="QA_WARNING" help="doc-en_US/doc/messages/2114.html" severity="2">
   <text>Default argument promotion : signed char promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2115" level="QA_WARNING" help="doc-en_US/doc/messages/2115.html" severity="2">
   <text>Default argument promotion : signed short promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2116" level="QA_WARNING" help="doc-en_US/doc/messages/2116.html" severity="2">
   <text>Default argument promotion : plain char promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2117" level="QA_WARNING" help="doc-en_US/doc/messages/2117.html" severity="2">
   <text>Default argument promotion : plain char promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2118" level="QA_WARNING" help="doc-en_US/doc/messages/2118.html" severity="2">
   <text>Default argument promotion : float promoted to double.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2119" level="QA_WARNING" help="doc-en_US/doc/messages/2119.html" severity="2">
   <text>Default argument promotion : _Bool promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2120" level="QA_WARNING" help="doc-en_US/doc/messages/2120.html" severity="2">
   <text>Integral promotion : unsigned bit-field promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2122" level="QA_WARNING" help="doc-en_US/doc/messages/2122.html" severity="2">
   <text>Integral promotion : unsigned bit-field promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2124" level="QA_WARNING" help="doc-en_US/doc/messages/2124.html" severity="2">
   <text>Integral promotion : signed bit-field promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2130" level="QA_WARNING" help="doc-en_US/doc/messages/2130.html" severity="2">
   <text>Default argument promotion : unsigned bit-field promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2132" level="QA_WARNING" help="doc-en_US/doc/messages/2132.html" severity="2">
   <text>Default argument promotion : unsigned bit-field promoted to unsigned int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2134" level="QA_WARNING" help="doc-en_US/doc/messages/2134.html" severity="2">
   <text>Default argument promotion : signed bit-field promoted to signed int.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [7.8.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2140" level="QA_WARNING" help="doc-en_US/doc/messages/2140.html" severity="2">
   <text>Implicit conversion from plain char to wider signed integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2141" level="QA_WARNING" help="doc-en_US/doc/messages/2141.html" severity="2">
   <text>Implicit conversion from plain char to wider unsigned integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2142" level="QA_WARNING" help="doc-en_US/doc/messages/2142.html" severity="2">
   <text>Implicit conversion from plain char to floating type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2143" level="QA_WARNING" help="doc-en_US/doc/messages/2143.html" severity="2">
   <text>Implicit conversion from plain char to enum type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2144" level="QA_WARNING" help="doc-en_US/doc/messages/2144.html" severity="2">
   <text>Implicit conversion from signed char to wider signed integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2145" level="QA_WARNING" help="doc-en_US/doc/messages/2145.html" severity="2">
   <text>Implicit conversion from signed char to wider unsigned integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2146" level="QA_WARNING" help="doc-en_US/doc/messages/2146.html" severity="2">
   <text>Implicit conversion from signed char to floating type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2147" level="QA_WARNING" help="doc-en_US/doc/messages/2147.html" severity="2">
   <text>Implicit conversion from signed char to enum type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2148" level="QA_WARNING" help="doc-en_US/doc/messages/2148.html" severity="2">
   <text>Explicit conversion from plain char to wider signed integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2149" level="QA_WARNING" help="doc-en_US/doc/messages/2149.html" severity="2">
   <text>Explicit conversion from plain char to wider unsigned integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2150" level="QA_WARNING" help="doc-en_US/doc/messages/2150.html" severity="2">
   <text>Explicit conversion from plain char to floating type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2151" level="QA_WARNING" help="doc-en_US/doc/messages/2151.html" severity="2">
   <text>Explicit conversion from plain char to enum type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2152" level="QA_WARNING" help="doc-en_US/doc/messages/2152.html" severity="2">
   <text>Explicit conversion from signed char to wider signed integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2153" level="QA_WARNING" help="doc-en_US/doc/messages/2153.html" severity="2">
   <text>Explicit conversion from signed char to wider unsigned integer type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2154" level="QA_WARNING" help="doc-en_US/doc/messages/2154.html" severity="2">
   <text>Explicit conversion from signed char to floating type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2155" level="QA_WARNING" help="doc-en_US/doc/messages/2155.html" severity="2">
   <text>Explicit conversion from signed char to enum type.</text>
   <references>
    <reference source="Integral promotion"/>
    <reference source="ISO:C90 Language [6.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2200" level="QA_WARNING" help="doc-en_US/doc/messages/2200.html" severity="1">
   <text>Indentation of this line is to the left of the current block indentation level.</text>
   <references>
    <reference source="Indentation"/>
   </references>
  </message>
  <message id="2201" level="QA_WARNING" help="doc-en_US/doc/messages/2201.html" severity="1">
   <text>This indentation is not consistent with previous indentation in this file.</text>
   <references>
    <reference source="Indentation"/>
   </references>
  </message>
  <message id="2203" level="QA_WARNING" help="doc-en_US/doc/messages/2203.html" severity="1">
   <text>This closing brace is not aligned appropriately with the matching opening brace.</text>
   <references>
    <reference source="Bracing"/>
   </references>
  </message>
  <message id="2204" level="QA_WARNING" help="doc-en_US/doc/messages/2204.html" severity="1">
   <text>'%1s' is not aligned to match its controlling 'switch' statement.</text>
   <references>
    <reference source="Bracing"/>
    <reference source="Indentation"/>
   </references>
  </message>
  <message id="2205" level="QA_WARNING" help="doc-en_US/doc/messages/2205.html" severity="1">
   <text>More than one declaration or statement on the same line.</text>
   <references>
    <reference source="Indentation"/>
   </references>
  </message>
  <message id="2207" level="QA_WARNING" help="doc-en_US/doc/messages/2207.html" severity="1">
   <text>This brace style is not consistent with 'K&amp;R' style.</text>
   <references>
      </references>
  </message>
  <message id="2208" level="QA_WARNING" help="doc-en_US/doc/messages/2208.html" severity="1">
   <text>This brace style is not consistent with 'indented' style.</text>
   <references>
      </references>
  </message>
  <message id="2209" level="QA_WARNING" help="doc-en_US/doc/messages/2209.html" severity="1">
   <text>This brace style is not consistent with 'exdented' style.</text>
   <references>
    <reference source="Bracing"/>
   </references>
  </message>
  <message id="2210" level="QA_WARNING" help="doc-en_US/doc/messages/2210.html" severity="1">
   <text>Tab character encountered in this line.</text>
   <references>
    <reference source="Indentation"/>
   </references>
  </message>
  <message id="2211" level="QA_WARNING" help="doc-en_US/doc/messages/2211.html" severity="1">
   <text>'%1s' is not aligned with the previously declared identifier.</text>
   <references>
    <reference source="Indentation"/>
   </references>
  </message>
  <message id="2212" level="QA_WARNING" help="doc-en_US/doc/messages/2212.html" severity="1">
   <text>Body of control statement is not enclosed within braces.</text>
   <references>
    <reference source="Bracing"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2213" level="QA_WARNING" help="doc-en_US/doc/messages/2213.html" severity="1">
   <text>Matching braces appear on the same line - proper indentation would be preferred.</text>
   <references>
    <reference source="Bracing"/>
   </references>
  </message>
  <message id="2214" level="QA_WARNING" help="doc-en_US/doc/messages/2214.html" severity="1">
   <text>Body of control statement is on the same line and is not enclosed within braces.</text>
   <references>
    <reference source="Bracing"/>
   </references>
  </message>
  <message id="2215" level="QA_WARNING" help="doc-en_US/doc/messages/2215.html" severity="1">
   <text>This indentation is not consistent with configured depth.</text>
   <references>
      </references>
  </message>
  <message id="2216" level="QA_WARNING" help="doc-en_US/doc/messages/2216.html" severity="1">
   <text>More than one structure or union member declared on the same line.</text>
   <references>
    <reference source="Indentation"/>
   </references>
  </message>
  <message id="2217" level="QA_WARNING" help="doc-en_US/doc/messages/2217.html" severity="1">
   <text>Line length exceeds %s characters.</text>
   <references>
      </references>
  </message>
  <message id="2218" level="QA_WARNING" help="doc-en_US/doc/messages/2218.html" severity="1">
   <text>Body of switch statement is not enclosed within braces.</text>
   <references>
    <reference source="Bracing"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2219" level="QA_WARNING" help="doc-en_US/doc/messages/2219.html" severity="1">
   <text>Body of switch statement is on the same line and is not enclosed within braces.</text>
   <references>
    <reference source="Bracing"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2461" level="QA_WARNING" help="doc-en_US/doc/messages/2461.html" severity="3">
   <text>Loop control variable in this 'for' statement, %1s, has file scope.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2462" level="QA_WARNING" help="doc-en_US/doc/messages/2462.html" severity="3">
   <text>The variable initialized in the first expression of this 'for' statement is not the variable identified as the 'loop control variable' (%1s).</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2463" level="QA_WARNING" help="doc-en_US/doc/messages/2463.html" severity="3">
   <text>The variable incremented in the third expression of this 'for' statement is not the variable identified as the 'loop control variable' (%1s).</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2464" level="QA_WARNING" help="doc-en_US/doc/messages/2464.html" severity="3">
   <text>Loop control variable, %1s, modified twice in for-loop header.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2467" level="QA_WARNING" help="doc-en_US/doc/messages/2467.html" severity="3">
   <text>Loop control variable in this 'for' statement, %1s, is not modified inside loop.</text>
   <references>
    <reference source="Control"/>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2468" level="QA_WARNING" help="doc-en_US/doc/messages/2468.html" severity="3">
   <text>Loop control variable in this 'for' statement, %1s, is not modified inside loop but has file scope.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2469" level="QA_WARNING" help="doc-en_US/doc/messages/2469.html" severity="3">
   <text>Loop control variable in this 'for' statement, %1s, is modified in the body of the loop.</text>
   <references>
    <reference source="Control"/>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2470" level="QA_WARNING" help="doc-en_US/doc/messages/2470.html" severity="2">
   <text>Taking address of loop control variable, %1s.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2471" level="QA_WARNING" help="doc-en_US/doc/messages/2471.html" severity="3">
   <text>Unable to identify a 'for' loop control variable.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2472" level="QA_WARNING" help="doc-en_US/doc/messages/2472.html" severity="3">
   <text>More than one possible 'for' loop control variable.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2473" level="QA_WARNING" help="doc-en_US/doc/messages/2473.html" severity="3">
   <text>Unable to identify a 'for' loop control variable because of indirection.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2474" level="QA_WARNING" help="doc-en_US/doc/messages/2474.html" severity="3">
   <text>'for' loop control is shared between multiple variables.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2475" level="QA_WARNING" help="doc-en_US/doc/messages/2475.html" severity="3">
   <text>'for' loop control is shared with an indirect variable.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2476" level="QA_WARNING" help="doc-en_US/doc/messages/2476.html" severity="3">
   <text>No variable appears to be initialized in the first expression of this 'for' statement (control variable identified as %1s).</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2477" level="QA_WARNING" help="doc-en_US/doc/messages/2477.html" severity="3">
   <text>No variable appears to be incremented in the third expression of this 'for' statement (control variable identified as %1s).</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2481" level="QA_WARNING" help="doc-en_US/doc/messages/2481.html" severity="3">
   <text>Loop control variable in this 'while' statement, %1s, has file scope.</text>
   <references>
      </references>
  </message>
  <message id="2482" level="QA_WARNING" help="doc-en_US/doc/messages/2482.html" severity="3">
   <text>Unable to identify a 'while' loop control variable.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2483" level="QA_WARNING" help="doc-en_US/doc/messages/2483.html" severity="3">
   <text>More than one possible 'while' loop control variable.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2484" level="QA_WARNING" help="doc-en_US/doc/messages/2484.html" severity="3">
   <text>Unable to identify a 'while' loop control variable because of indirection.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2486" level="QA_WARNING" help="doc-en_US/doc/messages/2486.html" severity="3">
   <text>'while' loop control is shared with an indirect variable.</text>
   <references>
    <reference source="For loops"/>
   </references>
  </message>
  <message id="2487" level="QA_WARNING" help="doc-en_US/doc/messages/2487.html" severity="3">
   <text>Loop control variable in this 'while' statement, %1s, is not modified inside loop.</text>
   <references>
    <reference source="Control"/>
   </references>
  </message>
  <message id="2488" level="QA_WARNING" help="doc-en_US/doc/messages/2488.html" severity="3">
   <text>Loop control variable in this 'while' statement, %1s, is not modified inside loop but has file scope.</text>
   <references>
      </references>
  </message>
  <message id="2500" level="QA_WARNING" help="doc-en_US/doc/messages/2500.html" severity="2">
   <text>Call to '%1s' is not immediately preceded by the zero-ing of 'errno'.</text>
   <references>
      </references>
  </message>
  <message id="2501" level="QA_WARNING" help="doc-en_US/doc/messages/2501.html" severity="2">
   <text>Call to '%1s' is not immediately followed by the testing of 'errno'.</text>
   <references>
      </references>
  </message>
  <message id="2502" level="QA_WARNING" help="doc-en_US/doc/messages/2502.html" severity="2">
   <text>Zero-ing of 'errno' is not immediately followed by a call to an 'errno' setting function.</text>
   <references>
      </references>
  </message>
  <message id="2503" level="QA_WARNING" help="doc-en_US/doc/messages/2503.html" severity="2">
   <text>Testing of 'errno' is not immediately preceded by a call to an 'errno' setting function.</text>
   <references>
      </references>
  </message>
  <message id="2504" level="QA_WARNING" help="doc-en_US/doc/messages/2504.html" severity="2">
   <text>Return value of '%1s' is not checked for error status.</text>
   <references>
      </references>
  </message>
  <message id="2505" level="QA_WARNING" help="doc-en_US/doc/messages/2505.html" severity="3">
   <text>The return code of an error-status returning function is being implicitly converted from '%1s' to '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="2547" level="QA_WARNING" help="doc-en_US/doc/messages/2547.html" severity="5">
   <text>This declaration of tag '%1s' hides a more global declaration.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2671" level="QA_WARNING" help="doc-en_US/doc/messages/2671.html" severity="2">
   <text>Definite: The value being compared with macro EOF does not originate from an EOF returning function.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2674" level="QA_WARNING" help="doc-en_US/doc/messages/2674.html" severity="2">
   <text>Possible: The value being compared with macro EOF does not originate from an EOF returning function.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2676" level="QA_WARNING" help="doc-en_US/doc/messages/2676.html" severity="2">
   <text>Definite: The value originating from an EOF returning function was modified before being compared with macro EOF.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2678" level="QA_WARNING" help="doc-en_US/doc/messages/2678.html" severity="2">
   <text>Suspicious: The value originating from an EOF returning function was modified before being compared with macro EOF.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2740" level="QA_WARNING" help="doc-en_US/doc/messages/2740.html" severity="2">
   <text>This loop controlling expression is a constant expression and its value is 'true'.</text>
   <references>
      </references>
  </message>
  <message id="2741" level="QA_WARNING" help="doc-en_US/doc/messages/2741.html" severity="2">
   <text>This 'if' controlling expression is a constant expression and its value is 'true'.</text>
   <references>
      </references>
  </message>
  <message id="2742" level="QA_WARNING" help="doc-en_US/doc/messages/2742.html" severity="2">
   <text>This 'if' controlling expression is a constant expression and its value is 'false'.</text>
   <references>
      </references>
  </message>
  <message id="2743" level="QA_WARNING" help="doc-en_US/doc/messages/2743.html" severity="2">
   <text>This 'do - while' loop controlling expression is a constant expression and its value is 'false'. The loop will only be executed once.</text>
   <references>
      </references>
  </message>
  <message id="2744" level="QA_WARNING" help="doc-en_US/doc/messages/2744.html" severity="2">
   <text>This 'while' or 'for' loop controlling expression is a constant expression and its value is 'false'. The loop will not be entered.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2750" level="QA_WARNING" help="doc-en_US/doc/messages/2750.html" severity="9">
   <text>Internal dataflow problem. Dataflow analysis continues with the next function. Please inform Programming Research.</text>
   <references>
      </references>
  </message>
  <message id="2751" level="QA_WARNING" help="doc-en_US/doc/messages/2751.html" severity="7">
   <text>This function is too complex. Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2752" level="QA_WARNING" help="doc-en_US/doc/messages/2752.html" severity="7">
   <text>This '%1s' results in the function being too complex. Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2753" level="QA_WARNING" help="doc-en_US/doc/messages/2753.html" severity="7">
   <text>As a result of error message '%1s', dataflow analysis of the remainder of this function is not possible.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2754" level="QA_WARNING" help="doc-en_US/doc/messages/2754.html" severity="7">
   <text>As a result of error message '%1s', dataflow analysis of the remainder of this translation unit is not possible.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2755" level="QA_WARNING" help="doc-en_US/doc/messages/2755.html" severity="7">
   <text>Analysis time of function '%1s' has exceeded the configured maximum: '%2sms'.  Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2757" level="QA_WARNING" help="doc-en_US/doc/messages/2757.html" severity="0">
   <text>Could not analyze function '%1s'.</text>
   <references>
      </references>
  </message>
  <message id="2759" level="QA_WARNING" help="doc-en_US/doc/messages/2759.html" severity="7">
   <text>ODR violation for definition of '%1s'. Dataflow analysis continues with the next function.</text>
   <references>
      </references>
  </message>
  <message id="2790" level="QA_WARNING" help="doc-en_US/doc/messages/2790.html" severity="6">
   <text>Constant: Right hand operand of shift operator is negative or too large.</text>
   <references>
    <reference source="ISO C++ Language [5.8/1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2800" level="QA_WARNING" help="doc-en_US/doc/messages/2800.html" severity="8">
   <text>Constant: Overflow in signed arithmetic operation.</text>
   <references>
    <reference source="ISO C++ Language [5/5]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2830" level="QA_WARNING" help="doc-en_US/doc/messages/2830.html" severity="8">
   <text>Constant: Division by zero.</text>
   <references>
    <reference source="ISO C++ Language [5.6/4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2840" level="QA_WARNING" help="doc-en_US/doc/messages/2840.html" severity="8">
   <text>Constant: Dereference of an invalid pointer value.</text>
   <references>
    <reference source="ISO C++ Language [5.7/5]"/>
    <reference source="Critical Problems"/>
    <reference source="ISO C++ Language [5.3.1/1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2850" level="QA_WARNING" help="doc-en_US/doc/messages/2850.html" severity="6">
   <text>Constant: Implicit conversion to a signed integer type of insufficient size.</text>
   <references>
    <reference source="ISO C++ Language [4.7/3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2855" level="QA_WARNING" help="doc-en_US/doc/messages/2855.html" severity="6">
   <text>Constant: Casting to a signed integer type of insufficient size.</text>
   <references>
    <reference source="ISO C++ Language [4.7/3]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2860" level="QA_WARNING" help="doc-en_US/doc/messages/2860.html" severity="5">
   <text>Constant: Implementation-defined value resulting from left shift operation on expression of signed type.</text>
   <references>
    <reference source="ISO C++ Language [5.8/3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2877" level="QA_WARNING" help="doc-en_US/doc/messages/2877.html" severity="6">
   <text>This loop will never be executed more than once.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2880" level="QA_WARNING" help="doc-en_US/doc/messages/2880.html" severity="6">
   <text>This code is unreachable.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2881" level="QA_WARNING" help="doc-en_US/doc/messages/2881.html" severity="2">
   <text>The code in this 'default' clause is unreachable.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2882" level="QA_WARNING" help="doc-en_US/doc/messages/2882.html" severity="7">
   <text>This 'switch' statement will bypass the initialization of local variables.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2883" level="QA_WARNING" help="doc-en_US/doc/messages/2883.html" severity="7">
   <text>This 'goto' statement will always bypass the initialization of local variables.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2890" level="QA_WARNING" help="doc-en_US/doc/messages/2890.html" severity="6">
   <text>Constant: Negative value implicitly converted to an unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2895" level="QA_WARNING" help="doc-en_US/doc/messages/2895.html" severity="5">
   <text>Constant: Negative value cast to an unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2900" level="QA_WARNING" help="doc-en_US/doc/messages/2900.html" severity="6">
   <text>Constant: Positive integer value truncated by implicit conversion to a smaller unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2905" level="QA_WARNING" help="doc-en_US/doc/messages/2905.html" severity="2">
   <text>Constant: Positive integer value truncated by cast to a smaller unsigned type.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2910" level="QA_WARNING" help="doc-en_US/doc/messages/2910.html" severity="4">
   <text>Constant: Wraparound in unsigned arithmetic operation.</text>
   <references>
    <reference source="ISO C++ Language [4.7/2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2920" level="QA_WARNING" help="doc-en_US/doc/messages/2920.html" severity="4">
   <text>Constant: Left shift operation on expression of unsigned type results in loss of high order bits.</text>
   <references>
    <reference source="ISO C++ Language [5.8]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2940" level="QA_WARNING" help="doc-en_US/doc/messages/2940.html" severity="2">
   <text>Constant: Result of implicit conversion is only representable in a two's complement implementation.</text>
   <references>
    <reference source="ISO C Language [5.2.4.2.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2945" level="QA_WARNING" help="doc-en_US/doc/messages/2945.html" severity="2">
   <text>Constant: Result of cast is only representable in a two's complement implementation.</text>
   <references>
    <reference source="ISO C Language [5.2.4.2.1]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="2990" level="QA_WARNING" help="doc-en_US/doc/messages/2990.html" severity="6">
   <text>The value of this loop controlling expression is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2991" level="QA_WARNING" help="doc-en_US/doc/messages/2991.html" severity="6">
   <text>The value of this 'if' controlling expression is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2992" level="QA_WARNING" help="doc-en_US/doc/messages/2992.html" severity="6">
   <text>The value of this 'if' controlling expression is always 'false'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2993" level="QA_WARNING" help="doc-en_US/doc/messages/2993.html" severity="6">
   <text>The value of this 'do - while' loop controlling expression is always 'false'. The loop will only be executed once.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2994" level="QA_WARNING" help="doc-en_US/doc/messages/2994.html" severity="6">
   <text>The value of this 'while' or 'for' loop controlling expression is always 'false'. The loop will not be entered.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2995" level="QA_WARNING" help="doc-en_US/doc/messages/2995.html" severity="6">
   <text>The result of this logical operation is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2996" level="QA_WARNING" help="doc-en_US/doc/messages/2996.html" severity="6">
   <text>The result of this logical operation is always 'false'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2997" level="QA_WARNING" help="doc-en_US/doc/messages/2997.html" severity="6">
   <text>The first operand of this conditional operator is always 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="2998" level="QA_WARNING" help="doc-en_US/doc/messages/2998.html" severity="6">
   <text>The first operand of this conditional operator is always 'false'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3001" level="QA_WARNING" help="doc-en_US/doc/messages/3001.html" severity="2">
   <text>Function has been declared with an empty parameter list.</text>
   <references>
    <reference source="Functions"/>
    <reference source="C++ Compatibility"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.9.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3002" level="QA_WARNING" help="doc-en_US/doc/messages/3002.html" severity="2">
   <text>Defining '%1s()' with an identifier list and separate parameter declarations is an obsolescent feature.</text>
   <references>
    <reference source="C++ Compatibility"/>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.9.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3003" level="QA_WARNING" help="doc-en_US/doc/messages/3003.html" severity="5">
   <text>This character constant is being interpreted as a null pointer constant.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3004" level="QA_WARNING" help="doc-en_US/doc/messages/3004.html" severity="5">
   <text>This integral constant expression is being interpreted as a null pointer constant.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3005" level="QA_WARNING" help="doc-en_US/doc/messages/3005.html" severity="3">
   <text>This call to 'free' is not immediately followed by assigning a new value to the pointer.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3006" level="QA_WARNING" help="doc-en_US/doc/messages/3006.html" severity="2">
   <text>This function contains a mixture of in-line assembler statements and C statements.</text>
   <references>
    <reference source="Language Extension"/>
   </references>
  </message>
  <message id="3007" level="QA_WARNING" help="doc-en_US/doc/messages/3007.html" severity="2">
   <text>"void" has been omitted when defining a function with no parameters.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
    <reference source="ISO:C90 Language [6.7.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3008" level="QA_WARNING" help="doc-en_US/doc/messages/3008.html" severity="2">
   <text>This function contains a mixture of in-line assembler statements and C code.</text>
   <references>
    <reference source="Language Extension"/>
   </references>
  </message>
  <message id="3101" level="QA_WARNING" help="doc-en_US/doc/messages/3101.html" severity="5">
   <text>Unary '-' applied to an operand of type unsigned int or unsigned long gives an unsigned result.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
   </references>
  </message>
  <message id="3102" level="QA_WARNING" help="doc-en_US/doc/messages/3102.html" severity="4">
   <text>Unary '-' applied to an operand whose underlying type is unsigned.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
   </references>
  </message>
  <message id="3103" level="QA_WARNING" help="doc-en_US/doc/messages/3103.html" severity="2">
   <text>Result of signed division or remainder operation may be implementation defined.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.5]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3104" level="QA_WARNING" help="doc-en_US/doc/messages/3104.html" severity="9">
   <text>[S] #pragma '%s' has invalid arguments and has been ignored.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="3105" level="QA_ERROR" help="doc-en_US/doc/messages/3105.html" severity="9">
   <text>[S] A #pragma block has not been closed with a #pragma '%s'.</text>
   <references>
      </references>
  </message>
  <message id="3106" level="QA_WARNING" help="doc-en_US/doc/messages/3106.html" severity="2">
   <text>This preprocessing directive has been ignored because it lies within a #pragma block. #pragma '%s' expected.</text>
   <references>
      </references>
  </message>
  <message id="3107" level="QA_ERROR" help="doc-en_US/doc/messages/3107.html" severity="9">
   <text>[S] A #pragma '%s' has been found without a matching #pragma block start directive.</text>
   <references>
      </references>
  </message>
  <message id="3108" level="QA_WARNING" help="doc-en_US/doc/messages/3108.html" severity="2">
   <text>Nested comments are not recognized in the ISO standard.</text>
   <references>
    <reference source="ISO:C90 Language [6.1.9]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3109" level="QA_WARNING" help="doc-en_US/doc/messages/3109.html" severity="2">
   <text>Null statement follows other code on the same line.</text>
   <references>
    <reference source="Null Statements"/>
    <reference source="ISO:C90 Language [6.6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3110" level="QA_WARNING" help="doc-en_US/doc/messages/3110.html" severity="5">
   <text>The left-hand operand of this ',' has no side effects.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3111" level="QA_WARNING" help="doc-en_US/doc/messages/3111.html" severity="2">
   <text>Redundant comma at end of braced initializer will be ignored.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [3.5.7]"/>
   </references>
  </message>
  <message id="3112" level="QA_WARNING" help="doc-en_US/doc/messages/3112.html" severity="5">
   <text>This statement has no side-effect - it can be removed.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="Side-Effects"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3113" level="QA_WARNING" help="doc-en_US/doc/messages/3113.html" severity="5">
   <text>[U] 'return' statement includes no expression but function '%s()' is implicitly of type 'int'.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3114" level="QA_WARNING" help="doc-en_US/doc/messages/3114.html" severity="5">
   <text>[U] Function '%s()' is implicitly of type 'int' but ends without returning a value.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3115" level="QA_WARNING" help="doc-en_US/doc/messages/3115.html" severity="2">
   <text>Unrecognized preprocessing directive has been ignored because of conditional inclusion directives.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="3116" level="QA_WARNING" help="doc-en_US/doc/messages/3116.html" severity="2">
   <text>Unrecognized #pragma arguments '%s' This #pragma directive has been ignored.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.6]"/>
   </references>
  </message>
  <message id="3117" level="QA_WARNING" help="doc-en_US/doc/messages/3117.html" severity="2">
   <text>Expected 'on' or 'off' after '#pragma' flag.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.6]"/>
   </references>
  </message>
  <message id="3118" level="QA_WARNING" help="doc-en_US/doc/messages/3118.html" severity="2">
   <text>Using the #line preprocessing directive.</text>
   <references>
    <reference source="Preprocessor"/>
    <reference source="ISO:C90 Language [6.8.4]"/>
   </references>
  </message>
  <message id="3119" level="QA_WARNING" help="doc-en_US/doc/messages/3119.html" severity="5">
   <text>This statement has no side-effect - it can be removed.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="Side-Effects"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3120" level="QA_WARNING" help="doc-en_US/doc/messages/3120.html" severity="1">
   <text>Hard-coded 'magic' integer constant, '%1s'.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3121" level="QA_WARNING" help="doc-en_US/doc/messages/3121.html" severity="1">
   <text>Hard-coded 'magic' floating constant, '%1s'.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3122" level="QA_WARNING" help="doc-en_US/doc/messages/3122.html" severity="1">
   <text>Hard-coded 'magic' string literal, %1s.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3123" level="QA_WARNING" help="doc-en_US/doc/messages/3123.html" severity="1">
   <text>Hard coded 'magic' character constant, %1s.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3131" level="QA_WARNING" help="doc-en_US/doc/messages/3131.html" severity="1">
   <text>Hard coded 'magic' number, '%1s', used to define the size of a bit-field.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Bit-Fields"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3132" level="QA_WARNING" help="doc-en_US/doc/messages/3132.html" severity="1">
   <text>Hard coded 'magic' number, '%1s', used to define the size of an array.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3138" level="QA_WARNING" help="doc-en_US/doc/messages/3138.html" severity="2">
   <text>Null statement is located close to other code or comments.</text>
   <references>
    <reference source="Null Statements"/>
   </references>
  </message>
  <message id="3139" level="QA_WARNING" help="doc-en_US/doc/messages/3139.html" severity="2">
   <text>Null statement is obscured by code or comment on the same line.</text>
   <references>
    <reference source="Null Statements"/>
   </references>
  </message>
  <message id="3140" level="QA_WARNING" help="doc-en_US/doc/messages/3140.html" severity="2">
   <text>Null statement occurs on a line by itself.</text>
   <references>
    <reference source="Null Statements"/>
   </references>
  </message>
  <message id="3141" level="QA_WARNING" help="doc-en_US/doc/messages/3141.html" severity="2">
   <text>Null statement does not occur on a line by itself.</text>
   <references>
    <reference source="Null Statements"/>
   </references>
  </message>
  <message id="3142" level="QA_WARNING" help="doc-en_US/doc/messages/3142.html" severity="3">
   <text>Unable to parse '%1s_macro' arguments; ignoring #pragma.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="3143" level="QA_WARNING" help="doc-en_US/doc/messages/3143.html" severity="3">
   <text>'%1s_macro' with non-macro identifier '%2s'.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="3144" level="QA_WARNING" help="doc-en_US/doc/messages/3144.html" severity="3">
   <text>Ignoring 'pop_macro' with empty macro stack for '%1s'.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="3185" level="QA_WARNING" help="doc-en_US/doc/messages/3185.html" severity="7">
   <text>[U] The argument value to this integer constant macro is not a valid integer literal.</text>
   <references>
      </references>
  </message>
  <message id="3186" level="QA_WARNING" help="doc-en_US/doc/messages/3186.html" severity="7">
   <text>[U] The argument value to this integer constant macro is out of range.</text>
   <references>
      </references>
  </message>
  <message id="3187" level="QA_WARNING" help="doc-en_US/doc/messages/3187.html" severity="5">
   <text>This integer constant macro is for a type smaller than int.</text>
   <references>
      </references>
  </message>
  <message id="3200" level="QA_WARNING" help="doc-en_US/doc/messages/3200.html" severity="2">
   <text>'%1s' returns a value which is not being used.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3202" level="QA_WARNING" help="doc-en_US/doc/messages/3202.html" severity="3">
   <text>The label '%s:' is not used in this function and could be removed.</text>
   <references>
    <reference source="Goto and Labels"/>
    <reference source="ISO:C90 Language [6.6.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3203" level="QA_WARNING" help="doc-en_US/doc/messages/3203.html" severity="3">
   <text>The variable '%1s' is set but never used.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3204" level="QA_WARNING" help="doc-en_US/doc/messages/3204.html" severity="2">
   <text>The variable '%1s' is only set once and so it could be declared with the 'const' qualifier.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Type Qualifiers"/>
    <reference source="ISO:C90 Language [6.5.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3205" level="QA_WARNING" help="doc-en_US/doc/messages/3205.html" severity="3">
   <text>The identifier '%1s' is not used and could be removed.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3206" level="QA_WARNING" help="doc-en_US/doc/messages/3206.html" severity="3">
   <text>The parameter '%1s' is not used in this function.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3207" level="QA_WARNING" help="doc-en_US/doc/messages/3207.html" severity="3">
   <text>File scope static, '%1s', is not used, and could be removed.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="ISO:C90 Language [6.1.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3208" level="QA_WARNING" help="doc-en_US/doc/messages/3208.html" severity="2">
   <text>'%1s()' returns a value which is sometimes ignored.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
   </references>
  </message>
  <message id="3209" level="QA_WARNING" help="doc-en_US/doc/messages/3209.html" severity="2">
   <text>'%1s()' returns a value which is always ignored.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="ISO:C90 Language [6.6.6.4]"/>
   </references>
  </message>
  <message id="3210" level="QA_WARNING" help="doc-en_US/doc/messages/3210.html" severity="3">
   <text>The global identifier '%1s' is declared here but is not used in this translation unit.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3211" level="QA_WARNING" help="doc-en_US/doc/messages/3211.html" severity="2">
   <text>The global identifier '%1s' is defined here but is not used in this translation unit.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3212" level="QA_WARNING" help="doc-en_US/doc/messages/3212.html" severity="2">
   <text>This cast is redundant.</text>
   <references>
    <reference source="Redundant Constructs"/>
   </references>
  </message>
  <message id="3213" level="QA_WARNING" help="doc-en_US/doc/messages/3213.html" severity="2">
   <text>The tag '%1s' is not used and could be removed.</text>
   <references>
    <reference source="Redundant Constructs"/>
   </references>
  </message>
  <message id="3214" level="QA_WARNING" help="doc-en_US/doc/messages/3214.html" severity="2">
   <text>The macro '%s' is not used and could be removed.</text>
   <references>
    <reference source="Redundant Constructs"/>
   </references>
  </message>
  <message id="3216" level="QA_WARNING" help="doc-en_US/doc/messages/3216.html" severity="2">
   <text>Address of local static object exported to a pointer with linkage or wider scope.</text>
   <references>
    <reference source="Variable Scope"/>
    <reference source="Pointer Usage"/>
   </references>
  </message>
  <message id="3217" level="QA_WARNING" help="doc-en_US/doc/messages/3217.html" severity="5">
   <text>Address of automatic object exported to a pointer with linkage or wider scope.</text>
   <references>
    <reference source="Variable Scope"/>
    <reference source="Pointer Usage"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3218" level="QA_WARNING" help="doc-en_US/doc/messages/3218.html" severity="2">
   <text>File scope static, '%1s', is only accessed in one function.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3219" level="QA_WARNING" help="doc-en_US/doc/messages/3219.html" severity="3">
   <text>Static function '%1s()' is not used within this translation unit.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3220" level="QA_WARNING" help="doc-en_US/doc/messages/3220.html" severity="2">
   <text>Identifier declared at a nested level of block scope.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3221" level="QA_WARNING" help="doc-en_US/doc/messages/3221.html" severity="2">
   <text>Function with external linkage declared at block scope.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3222" level="QA_WARNING" help="doc-en_US/doc/messages/3222.html" severity="2">
   <text>Object with external linkage declared at block scope.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3223" level="QA_WARNING" help="doc-en_US/doc/messages/3223.html" severity="2">
   <text>Object with static storage duration declared at block scope.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3224" level="QA_WARNING" help="doc-en_US/doc/messages/3224.html" severity="2">
   <text>This identifier has previously been declared with internal linkage but is not declared here with the static storage class specifier.</text>
   <references>
    <reference source="Linkage"/>
   </references>
  </message>
  <message id="3225" level="QA_WARNING" help="doc-en_US/doc/messages/3225.html" severity="5">
   <text>Address of automatic object exported using a function parameter.</text>
   <references>
    <reference source="Pointer Usage"/>
    <reference source="Variable Scope"/>
    <reference source="Function Returns"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3226" level="QA_WARNING" help="doc-en_US/doc/messages/3226.html" severity="3">
   <text>The result of an assignment is being used in an arithmetic operation or another assigning operation.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3227" level="QA_WARNING" help="doc-en_US/doc/messages/3227.html" severity="2">
   <text>The parameter '%1s' is never modified and so it could be declared with the 'const' qualifier.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="ISO:C90 Language [6.5.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3228" level="QA_WARNING" help="doc-en_US/doc/messages/3228.html" severity="2">
   <text>Storage class specifier not positioned at the beginning of declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.9.3]"/>
   </references>
  </message>
  <message id="3229" level="QA_WARNING" help="doc-en_US/doc/messages/3229.html" severity="2">
   <text>File scope static, '%1s', is written but never used.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3230" level="QA_WARNING" help="doc-en_US/doc/messages/3230.html" severity="5">
   <text>Address of automatic object assigned to local pointer with static storage duration.</text>
   <references>
    <reference source="Variable Scope"/>
    <reference source="Pointer Usage"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3231" level="QA_WARNING" help="doc-en_US/doc/messages/3231.html" severity="2">
   <text>Address of local static object exported using a function parameter.</text>
   <references>
    <reference source="Variable Scope"/>
   </references>
  </message>
  <message id="3232" level="QA_WARNING" help="doc-en_US/doc/messages/3232.html" severity="2">
   <text>File scope static, '%1s', is never modified. It could be declared const.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3233" level="QA_WARNING" help="doc-en_US/doc/messages/3233.html" severity="2">
   <text>File scope static, '%1s', is not explicitly initialized but its value is used.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3234" level="QA_WARNING" help="doc-en_US/doc/messages/3234.html" severity="3">
   <text>Declarations precede the first label in this 'switch' construct.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3236" level="QA_WARNING" help="doc-en_US/doc/messages/3236.html" severity="8">
   <text>[C] 'inline' may not be applied to function 'main'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3237" level="QA_WARNING" help="doc-en_US/doc/messages/3237.html" severity="8">
   <text>[C] inline function '%1s' has external linkage and is defining an object, '%2s', with static storage duration.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3238" level="QA_WARNING" help="doc-en_US/doc/messages/3238.html" severity="8">
   <text>[C] inline function '%1s' has external linkage and is referring to an object, '%2s', with internal linkage.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3239" level="QA_WARNING" help="doc-en_US/doc/messages/3239.html" severity="7">
   <text>[U] inline function '%1s' has external linkage, but is not defined within this translation unit.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3240" level="QA_WARNING" help="doc-en_US/doc/messages/3240.html" severity="6">
   <text>inline function '%1s' is being defined with external linkage.</text>
   <references>
      </references>
  </message>
  <message id="3241" level="QA_WARNING" help="doc-en_US/doc/messages/3241.html" severity="6">
   <text>This inline function declaration for '%1s' is implicitly static.</text>
   <references>
      </references>
  </message>
  <message id="3242" level="QA_WARNING" help="doc-en_US/doc/messages/3242.html" severity="6">
   <text>This inline function declaration for '%1s' prevents it from being defined with internal linkage.</text>
   <references>
      </references>
  </message>
  <message id="3243" level="QA_WARNING" help="doc-en_US/doc/messages/3243.html" severity="6">
   <text>inline function '%1s' is also an 'external definition'.</text>
   <references>
      </references>
  </message>
  <message id="3244" level="QA_WARNING" help="doc-en_US/doc/messages/3244.html" severity="8">
   <text>[C] 'inline' may only be used in the declaration of a function identifier.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3245" level="QA_WARNING" help="doc-en_US/doc/messages/3245.html" severity="7">
   <text>This inline function declaration of '%1s' may create multiple external definitions.</text>
   <references>
      </references>
  </message>
  <message id="3260" level="QA_WARNING" help="doc-en_US/doc/messages/3260.html" severity="2">
   <text>Typedef defined with more than 2 levels of indirection.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.4.1]"/>
   </references>
  </message>
  <message id="3261" level="QA_WARNING" help="doc-en_US/doc/messages/3261.html" severity="2">
   <text>Member of struct/union defined with more than 2 levels of indirection.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.4.1]"/>
   </references>
  </message>
  <message id="3262" level="QA_WARNING" help="doc-en_US/doc/messages/3262.html" severity="2">
   <text>Object defined or declared with more than 2 levels of indirection.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.4.1]"/>
   </references>
  </message>
  <message id="3263" level="QA_WARNING" help="doc-en_US/doc/messages/3263.html" severity="2">
   <text>Function defined or declared with a return type which has more than 2 levels of indirection.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.4.1]"/>
   </references>
  </message>
  <message id="3305" level="QA_WARNING" help="doc-en_US/doc/messages/3305.html" severity="6">
   <text>Pointer cast to stricter alignment.</text>
   <references>
    <reference source="Pointer Conversions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3307" level="QA_WARNING" help="doc-en_US/doc/messages/3307.html" severity="3">
   <text>The operand of 'sizeof' is an expression with implied side effects, but they will not be evaluated.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="ISO:C90 Language [6.3.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3308" level="QA_WARNING" help="doc-en_US/doc/messages/3308.html" severity="2">
   <text>'static %1s()' has been declared but no definition has been provided. This is redundant.</text>
   <references>
    <reference source="Redundant Constructs"/>
   </references>
  </message>
  <message id="3309" level="QA_WARNING" help="doc-en_US/doc/messages/3309.html" severity="4">
   <text>The value of the controlling expression in this 'switch' statement is constant.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="3310" level="QA_WARNING" help="doc-en_US/doc/messages/3310.html" severity="2">
   <text>This 'goto' statement involves a backward jump.</text>
   <references>
    <reference source="Control"/>
    <reference source="Goto and Labels"/>
   </references>
  </message>
  <message id="3311" level="QA_WARNING" help="doc-en_US/doc/messages/3311.html" severity="7">
   <text>[u] An earlier jump to this statement will bypass the initialization of local variables.</text>
   <references>
    <reference source="Goto and Labels"/>
    <reference source="C++ Compatibility"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3312" level="QA_WARNING" help="doc-en_US/doc/messages/3312.html" severity="7">
   <text>[u] This goto statement will jump into a previous block and bypass the initialization of local variables.</text>
   <references>
    <reference source="Goto and Labels"/>
    <reference source="ISO:C90 Language [6.1.2.4]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3313" level="QA_WARNING" help="doc-en_US/doc/messages/3313.html" severity="2">
   <text>No definition has been found for structure/union tag '%1s'.</text>
   <references>
    <reference source="Functions"/>
    <reference source="Arrays"/>
    <reference source="Structures and Unions"/>
    <reference source="Pointer Conversions"/>
    <reference source="ISO:C90 Language [6.5.2.3]"/>
   </references>
  </message>
  <message id="3314" level="QA_WARNING" help="doc-en_US/doc/messages/3314.html" severity="2">
   <text>This controlling expression is an assignment.</text>
   <references>
    <reference source="Control"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3315" level="QA_WARNING" help="doc-en_US/doc/messages/3315.html" severity="3">
   <text>This 'switch' statement is redundant.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
   </references>
  </message>
  <message id="3316" level="QA_WARNING" help="doc-en_US/doc/messages/3316.html" severity="1">
   <text>An unsigned value can never be less than zero - this test is always false.</text>
   <references>
    <reference source="Degenerate"/>
   </references>
  </message>
  <message id="3317" level="QA_WARNING" help="doc-en_US/doc/messages/3317.html" severity="5">
   <text>'#if...' not matched by '#endif' in included file. This is probably an error.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3318" level="QA_WARNING" help="doc-en_US/doc/messages/3318.html" severity="5">
   <text>'#else'/'#elif'/'#endif' in included file matched '#if...' in parent file. This is probably an error.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3319" level="QA_WARNING" help="doc-en_US/doc/messages/3319.html" severity="7">
   <text>[U] Function called with number of arguments which differs from number of parameters in definition.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3320" level="QA_WARNING" help="doc-en_US/doc/messages/3320.html" severity="4">
   <text>Type of argument no. %1s differs from its type in definition of function.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3322" level="QA_WARNING" help="doc-en_US/doc/messages/3322.html" severity="2">
   <text>Operand of a logical ! operator is a constant expression which is not a 'Boolean' value.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="3324" level="QA_WARNING" help="doc-en_US/doc/messages/3324.html" severity="1">
   <text>An unsigned value is always greater than or equal to zero - this test is always true.</text>
   <references>
    <reference source="Degenerate"/>
   </references>
  </message>
  <message id="3326" level="QA_WARNING" help="doc-en_US/doc/messages/3326.html" severity="3">
   <text>The result of an assignment is being used in a logical operation.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="Control"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3327" level="QA_WARNING" help="doc-en_US/doc/messages/3327.html" severity="7">
   <text>This goto statement references a label that is declared in a separate block.</text>
   <references>
    <reference source="Control"/>
    <reference source="Goto and Labels"/>
   </references>
  </message>
  <message id="3328" level="QA_WARNING" help="doc-en_US/doc/messages/3328.html" severity="5">
   <text>An unsigned value is being compared with a negative constant - this is dangerous.</text>
   <references>
    <reference source="Degenerate"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3330" level="QA_WARNING" help="doc-en_US/doc/messages/3330.html" severity="2">
   <text>'%1s()' has been called with a variable number of arguments.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
   </references>
  </message>
  <message id="3331" level="QA_WARNING" help="doc-en_US/doc/messages/3331.html" severity="2">
   <text>The definition for identifier '%s' with external linkage conflicts with a previous declaration in the same scope.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3332" level="QA_WARNING" help="doc-en_US/doc/messages/3332.html" severity="4">
   <text>The macro '%1s' used in this '#if' or '#elif' expression is not defined.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3333" level="QA_WARNING" help="doc-en_US/doc/messages/3333.html" severity="1">
   <text>A 'break' statement has been used in the middle of a 'switch' 'case'/'default' clause.</text>
   <references>
    <reference source="Switch Statements"/>
   </references>
  </message>
  <message id="3334" level="QA_WARNING" help="doc-en_US/doc/messages/3334.html" severity="5">
   <text>This declaration of '%1s' hides a more global declaration.</text>
   <references>
    <reference source="Linkage"/>
    <reference source="Declarations"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3335" level="QA_WARNING" help="doc-en_US/doc/messages/3335.html" severity="4">
   <text>No function declaration. Implicit declaration inserted: 'extern int %1s();'.</text>
   <references>
    <reference source="Functions"/>
    <reference source="C++ Compatibility"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3336" level="QA_WARNING" help="doc-en_US/doc/messages/3336.html" severity="4">
   <text>The reserved macro '%1s' used in this '#if' or '#elif' expression is not defined.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3337" level="QA_WARNING" help="doc-en_US/doc/messages/3337.html" severity="3">
   <text>The array '%1s[]' is defined with a single element because no size has been specified.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.7.2.TC1]"/>
   </references>
  </message>
  <message id="3339" level="QA_WARNING" help="doc-en_US/doc/messages/3339.html" severity="2">
   <text>Floating point variable used as 'while' loop control variable.</text>
   <references>
    <reference source="Control"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3340" level="QA_WARNING" help="doc-en_US/doc/messages/3340.html" severity="2">
   <text>Floating point variable used as 'for' loop control variable.</text>
   <references>
    <reference source="For loops"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3341" level="QA_WARNING" help="doc-en_US/doc/messages/3341.html" severity="4">
   <text>Comparing floating point expressions for equality (with '==' or '!=').</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3342" level="QA_WARNING" help="doc-en_US/doc/messages/3342.html" severity="2">
   <text>Controlling expression of 'for' loop is a floating point comparison.</text>
   <references>
    <reference source="For loops"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3343" level="QA_WARNING" help="doc-en_US/doc/messages/3343.html" severity="3">
   <text>Logical NOT being performed on one operand of a comparison.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
   </references>
  </message>
  <message id="3344" level="QA_WARNING" help="doc-en_US/doc/messages/3344.html" severity="2">
   <text>Controlling expression is not an 'essentially Boolean' expression.</text>
   <references>
    <reference source="Control"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3345" level="QA_WARNING" help="doc-en_US/doc/messages/3345.html" severity="3">
   <text>Statement contains more than one access to objects that are volatile.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="ISO:C90 Language [5.1.2.3]"/>
   </references>
  </message>
  <message id="3350" level="QA_WARNING" help="doc-en_US/doc/messages/3350.html" severity="2">
   <text>Controlling expression of 'while' loop is a floating point comparison.</text>
   <references>
    <reference source="Control"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3352" level="QA_WARNING" help="doc-en_US/doc/messages/3352.html" severity="2">
   <text>This 'switch' statement contains only two execution paths.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
   </references>
  </message>
  <message id="3353" level="QA_WARNING" help="doc-en_US/doc/messages/3353.html" severity="2">
   <text>This 'switch' statement contains only one case clause.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
   </references>
  </message>
  <message id="3362" level="QA_WARNING" help="doc-en_US/doc/messages/3362.html" severity="4">
   <text>Comparing floating point expressions to zero or infinity.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="3377" level="QA_WARNING" help="doc-en_US/doc/messages/3377.html" severity="2">
   <text>Operand of a logical &amp;&amp; or || operator is a constant expression which is not a 'Boolean' value.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="3378" level="QA_WARNING" help="doc-en_US/doc/messages/3378.html" severity="2">
   <text>An expression of pointer type is being converted to _Bool.</text>
   <references>
      </references>
  </message>
  <message id="3383" level="QA_WARNING" help="doc-en_US/doc/messages/3383.html" severity="1">
   <text>Cannot identify wraparound guard for unsigned arithmetic expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3384" level="QA_WARNING" help="doc-en_US/doc/messages/3384.html" severity="1">
   <text>Cannot identify wraparound guard for dependent unsigned arithmetic expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3385" level="QA_WARNING" help="doc-en_US/doc/messages/3385.html" severity="1">
   <text>Cannot identify wraparound guard for sizeof-VLA expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3386" level="QA_WARNING" help="doc-en_US/doc/messages/3386.html" severity="1">
   <text>Cannot identify wraparound guard for dependent sizeof-VLA expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3387" level="QA_WARNING" help="doc-en_US/doc/messages/3387.html" severity="3">
   <text>A full expression containing an increment (++) or decrement (--) operator should have no potential side effects other than that caused by the increment or decrement operator.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="ISO:C90 Language [5.1.2.3]"/>
   </references>
  </message>
  <message id="3389" level="QA_WARNING" help="doc-en_US/doc/messages/3389.html" severity="2">
   <text>Extra parentheses recommended to clarify the ordering of a % operator and another arithmetic operator (* / % + -).</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3390" level="QA_INFORMATION" help="doc-en_US/doc/messages/3390.html" severity="1">
   <text>Expression is equivalent to: "%1s"</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3391" level="QA_WARNING" help="doc-en_US/doc/messages/3391.html" severity="2">
   <text>Extra parentheses recommended. A conditional operation is the operand of another conditional operator.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3392" level="QA_WARNING" help="doc-en_US/doc/messages/3392.html" severity="2">
   <text>Extra parentheses recommended. A shift, relational or equality operation is the operand of a second identical operator.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3393" level="QA_WARNING" help="doc-en_US/doc/messages/3393.html" severity="2">
   <text>Extra parentheses recommended. An arithmetic operation (* / + -) is the operand of a different operator with the same precedence.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3394" level="QA_WARNING" help="doc-en_US/doc/messages/3394.html" severity="2">
   <text>Extra parentheses recommended. A shift, relational or equality operation is the operand of a different operator with the same precedence.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3395" level="QA_WARNING" help="doc-en_US/doc/messages/3395.html" severity="2">
   <text>Extra parentheses recommended. A * or / operation is the operand of a + or - operator.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3396" level="QA_WARNING" help="doc-en_US/doc/messages/3396.html" severity="2">
   <text>Extra parentheses recommended. A binary operation is the operand of a conditional operator.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3397" level="QA_WARNING" help="doc-en_US/doc/messages/3397.html" severity="2">
   <text>Extra parentheses recommended. A binary operation is the operand of a binary operator with different precedence.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3398" level="QA_WARNING" help="doc-en_US/doc/messages/3398.html" severity="2">
   <text>Extra parentheses recommended. A function call, array subscript, or member operation is the operand of a logical &amp;&amp; or ||.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3399" level="QA_WARNING" help="doc-en_US/doc/messages/3399.html" severity="2">
   <text>Extra parentheses recommended. A unary operation is the operand of a logical &amp;&amp; or ||.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3400" level="QA_WARNING" help="doc-en_US/doc/messages/3400.html" severity="2">
   <text>Extra parentheses recommended. A binary operation is the operand of a logical &amp;&amp; or ||.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3401" level="QA_WARNING" help="doc-en_US/doc/messages/3401.html" severity="1">
   <text>Possible precedence confusion: extra parentheses are recommended here.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3402" level="QA_WARNING" help="doc-en_US/doc/messages/3402.html" severity="1">
   <text>Braces are needed to clarify the structure of this 'if'-'if'-'else' statement.</text>
   <references>
    <reference source="Bracing"/>
    <reference source="ISO:C90 Language [6.6.4.1]"/>
   </references>
  </message>
  <message id="3403" level="QA_WARNING" help="doc-en_US/doc/messages/3403.html" severity="3">
   <text>This sequence of operators is difficult to read without intervening spaces.</text>
   <references>
      </references>
  </message>
  <message id="3404" level="QA_WARNING" help="doc-en_US/doc/messages/3404.html" severity="5">
   <text>Statement contains a redundant * operator at top level. *p++ means *(p++) not (*p)++.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3405" level="QA_WARNING" help="doc-en_US/doc/messages/3405.html" severity="5">
   <text>Index[Array] is equivalent to Array[Index] but more confusing.</text>
   <references>
    <reference source="Array Bounds"/>
   </references>
  </message>
  <message id="3406" level="QA_WARNING" help="doc-en_US/doc/messages/3406.html" severity="5">
   <text>Object/function '%s', with external linkage, has been defined in a header file.</text>
   <references>
      </references>
  </message>
  <message id="3407" level="QA_WARNING" help="doc-en_US/doc/messages/3407.html" severity="5">
   <text>String literal compared using a relational or equality operator.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3408" level="QA_WARNING" help="doc-en_US/doc/messages/3408.html" severity="2">
   <text>'%1s' has external linkage and is being defined without any previous declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3409" level="QA_WARNING" help="doc-en_US/doc/messages/3409.html" severity="2">
   <text>The replacement list of function-like macro '%1s' is not enclosed in ().</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="ISO:C90 Language [6.8]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3410" level="QA_WARNING" help="doc-en_US/doc/messages/3410.html" severity="2">
   <text>Macro parameter not enclosed in ().</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3411" level="QA_WARNING" help="doc-en_US/doc/messages/3411.html" severity="2">
   <text>Macro defined with unbalanced brackets, parentheses or braces.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3412" level="QA_WARNING" help="doc-en_US/doc/messages/3412.html" severity="2">
   <text>Macro defines an unrecognized code-fragment.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3413" level="QA_WARNING" help="doc-en_US/doc/messages/3413.html" severity="2">
   <text>Macro definition could be replaced by a typedef.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="ISO:C90 Language [6.5.6]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3414" level="QA_WARNING" help="doc-en_US/doc/messages/3414.html" severity="2">
   <text>Macro defines a storage-class or function specifier keyword.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3415" level="QA_WARNING" help="doc-en_US/doc/messages/3415.html" severity="3">
   <text>Right hand operand of '&amp;&amp;' or '||' is an expression with persistent side effects.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="ISO:C90 Language [5,1,2,3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3416" level="QA_WARNING" help="doc-en_US/doc/messages/3416.html" severity="3">
   <text>Logical operation performed on expression with persistent side effects.</text>
   <references>
    <reference source="Control"/>
    <reference source="Side-Effects"/>
    <reference source="ISO:C90 Language [5,1,2,3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3417" level="QA_WARNING" help="doc-en_US/doc/messages/3417.html" severity="2">
   <text>The comma operator has been used outside a 'for' statement.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="3418" level="QA_WARNING" help="doc-en_US/doc/messages/3418.html" severity="2">
   <text>The comma operator has been used in a 'for' statement.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="3419" level="QA_WARNING" help="doc-en_US/doc/messages/3419.html" severity="4">
   <text>Initialization expression of 'for' statement has no side effects.</text>
   <references>
    <reference source="For loops"/>
    <reference source="ISO:C90 Language [6.6.5.3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3420" level="QA_WARNING" help="doc-en_US/doc/messages/3420.html" severity="4">
   <text>Increment expression of 'for' statement has no side effects.</text>
   <references>
    <reference source="For loops"/>
    <reference source="ISO:C90 Language [6.6.5.3]"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3421" level="QA_WARNING" help="doc-en_US/doc/messages/3421.html" severity="2">
   <text>Expression with persistent side effects is used in an initializer list.</text>
   <references>
    <reference source="Side-Effects"/>
   </references>
  </message>
  <message id="3422" level="QA_WARNING" help="doc-en_US/doc/messages/3422.html" severity="5">
   <text>Statement contains a redundant operator at top level.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3423" level="QA_WARNING" help="doc-en_US/doc/messages/3423.html" severity="5">
   <text>Statement contains a redundant cast at top level.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3424" level="QA_WARNING" help="doc-en_US/doc/messages/3424.html" severity="5">
   <text>Statement contains a redundant &amp; or | at top level.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3425" level="QA_WARNING" help="doc-en_US/doc/messages/3425.html" severity="5">
   <text>One branch of this conditional operation is a redundant expression.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3426" level="QA_WARNING" help="doc-en_US/doc/messages/3426.html" severity="5">
   <text>Right hand side of comma expression has no side effect and its value is not used.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3427" level="QA_WARNING" help="doc-en_US/doc/messages/3427.html" severity="5">
   <text>Right hand side of logical operator has no side effect and its value is not used.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3428" level="QA_WARNING" help="doc-en_US/doc/messages/3428.html" severity="2">
   <text>Macro defines a type qualifier keyword.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3429" level="QA_WARNING" help="doc-en_US/doc/messages/3429.html" severity="2">
   <text>A function-like macro is being defined.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3430" level="QA_WARNING" help="doc-en_US/doc/messages/3430.html" severity="2">
   <text>Macro argument expression may require parentheses.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.3.1]"/>
   </references>
  </message>
  <message id="3431" level="QA_WARNING" help="doc-en_US/doc/messages/3431.html" severity="2">
   <text>Macro defines an operator, a punctuator or a control statement keyword.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3432" level="QA_WARNING" help="doc-en_US/doc/messages/3432.html" severity="2">
   <text>Simple macro argument expression is not parenthesized.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [6.3.1]"/>
   </references>
  </message>
  <message id="3433" level="QA_WARNING" help="doc-en_US/doc/messages/3433.html" severity="2">
   <text>Expression operand to sizeof is not parenthesized.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3434" level="QA_WARNING" help="doc-en_US/doc/messages/3434.html" severity="2">
   <text>Expression operand to alignof is not parenthesized.</text>
   <references>
    <reference source="Operator Precedence"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3435" level="QA_WARNING" help="doc-en_US/doc/messages/3435.html" severity="1">
   <text>Parameter '%1s' occurs more than once in the replacement list of this macro.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3436" level="QA_WARNING" help="doc-en_US/doc/messages/3436.html" severity="5">
   <text>Macro definition hides previously declared identifier.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3437" level="QA_WARNING" help="doc-en_US/doc/messages/3437.html" severity="7">
   <text>[u] '%1s' is only provided by the standard library as a macro, but is being used as a value here.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C11 Language [7.1.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3438" level="QA_WARNING" help="doc-en_US/doc/messages/3438.html" severity="7">
   <text>[U] #undef'ing the assert macro to call a function of that name causes undefined behaviour.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="ISO:C90 Language [7.2]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3439" level="QA_WARNING" help="doc-en_US/doc/messages/3439.html" severity="2">
   <text>Macro redefines a keyword.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3440" level="QA_WARNING" help="doc-en_US/doc/messages/3440.html" severity="2">
   <text>Using the value resulting from a ++ or -- operation.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Side-Effects"/>
    <reference source="ISO:C90 Language [6.3.2.4]"/>
    <reference source="ISO:C90 Language [6.3.3.1]"/>
   </references>
  </message>
  <message id="3441" level="QA_WARNING" help="doc-en_US/doc/messages/3441.html" severity="2">
   <text>Function call argument is an expression with possible side effects.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="ISO:C90 Language [5.1.2.3]"/>
    <reference source="ISO:C90 Language [6.3.2.2]"/>
   </references>
  </message>
  <message id="3442" level="QA_WARNING" help="doc-en_US/doc/messages/3442.html" severity="2">
   <text>Operator other than &amp; (address-of) or = (assignment) applied to a volatile object.</text>
   <references>
    <reference source="Side-Effects"/>
    <reference source="ISO:C90 Language [5.1.2.3]"/>
   </references>
  </message>
  <message id="3443" level="QA_WARNING" help="doc-en_US/doc/messages/3443.html" severity="2">
   <text>Macro '%s' has a replacement list which appears recursive.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="ISO:C90 Language [6.8.3.4]"/>
   </references>
  </message>
  <message id="3445" level="QA_WARNING" help="doc-en_US/doc/messages/3445.html" severity="2">
   <text>[E] Conditional expression with middle operand omitted is a language extension.</text>
   <references>
      </references>
  </message>
  <message id="3446" level="QA_WARNING" help="doc-en_US/doc/messages/3446.html" severity="3">
   <text>The 2nd or 3rd operand of this conditional operator is an expression with persistent side effects.</text>
   <references>
    <reference source="Side-Effects"/>
   </references>
  </message>
  <message id="3447" level="QA_WARNING" help="doc-en_US/doc/messages/3447.html" severity="2">
   <text>'%s' is being declared with external linkage but this declaration is not in a header file.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3448" level="QA_WARNING" help="doc-en_US/doc/messages/3448.html" severity="2">
   <text>Declaration of typedef '%1s' is not in a header file although it is used in a definition or declaration with external linkage.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3449" level="QA_WARNING" help="doc-en_US/doc/messages/3449.html" severity="2">
   <text>Multiple declarations of external object or function.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3450" level="QA_WARNING" help="doc-en_US/doc/messages/3450.html" severity="2">
   <text>Function '%s', with internal linkage, is being defined without a previous declaration.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3451" level="QA_WARNING" help="doc-en_US/doc/messages/3451.html" severity="2">
   <text>The global identifier '%1s' has been declared in more than one file.</text>
   <references>
      </references>
  </message>
  <message id="3452" level="QA_WARNING" help="doc-en_US/doc/messages/3452.html" severity="2">
   <text>The replacement list of object-like macro '%1s' is not enclosed in ().</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3453" level="QA_WARNING" help="doc-en_US/doc/messages/3453.html" severity="2">
   <text>A function could probably be used instead of this function-like macro.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3454" level="QA_WARNING" help="doc-en_US/doc/messages/3454.html" severity="2">
   <text>Macro argument contains an increment, decrement or assignment operator.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3455" level="QA_WARNING" help="doc-en_US/doc/messages/3455.html" severity="2">
   <text>Macro argument contains a function call.</text>
   <references>
    <reference source="Macro Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3456" level="QA_WARNING" help="doc-en_US/doc/messages/3456.html" severity="2">
   <text>Parameter '%1s' will be expanded more than once when this macro is used.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3457" level="QA_WARNING" help="doc-en_US/doc/messages/3457.html" severity="2">
   <text>Macro defines a braced initializer.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3458" level="QA_WARNING" help="doc-en_US/doc/messages/3458.html" severity="2">
   <text>Macro defines a braced code statement block.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3459" level="QA_WARNING" help="doc-en_US/doc/messages/3459.html" severity="2">
   <text>Macro defines a 'do-while-zero' construct.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3460" level="QA_WARNING" help="doc-en_US/doc/messages/3460.html" severity="2">
   <text>Macro defines a type specifier keyword.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3461" level="QA_WARNING" help="doc-en_US/doc/messages/3461.html" severity="2">
   <text>Macro defines a storage-class specifier/type qualifier sequence.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3462" level="QA_WARNING" help="doc-en_US/doc/messages/3462.html" severity="2">
   <text>Argument to macro '%1s' appears to contain a side effect, but it is not used.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3463" level="QA_WARNING" help="doc-en_US/doc/messages/3463.html" severity="2">
   <text>Argument to macro '%1s' contains a side effect that will not be evaluated at runtime.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3464" level="QA_WARNING" help="doc-en_US/doc/messages/3464.html" severity="2">
   <text>Argument to macro '%1s' contains a side effect that will be evaluated more than once.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3465" level="QA_WARNING" help="doc-en_US/doc/messages/3465.html" severity="2">
   <text>Argument to macro '%1s' contains a side effect that might not be evaluated at runtime.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3466" level="QA_WARNING" help="doc-en_US/doc/messages/3466.html" severity="2">
   <text>Variable argument list to macro '%1s' appears to contain an expression with side effects.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3467" level="QA_WARNING" help="doc-en_US/doc/messages/3467.html" severity="2">
   <text>Variable argument list to macro '%1s' appears to contain an expression with side effects that will be used more than once.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3468" level="QA_WARNING" help="doc-en_US/doc/messages/3468.html" severity="2">
   <text>The name of this macro is a reserved identifier in C90 and a keyword in C99.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3469" level="QA_WARNING" help="doc-en_US/doc/messages/3469.html" severity="2">
   <text>This usage of a function-like macro looks like it could be replaced by an equivalent function call.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3470" level="QA_WARNING" help="doc-en_US/doc/messages/3470.html" severity="3">
   <text>The operand of 'sizeof' is not an expression which designates either an object or a type.</text>
   <references>
    <reference source="Redundant Constructs"/>
    <reference source="ISO:C90 Language [6.3.3.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3471" level="QA_WARNING" help="doc-en_US/doc/messages/3471.html" severity="2">
   <text>Some uses of this function-like macro look like they could be replaced by equivalent function calls.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3472" level="QA_WARNING" help="doc-en_US/doc/messages/3472.html" severity="2">
   <text>All toplevel uses of this function-like macro look like they could be replaced by equivalent function calls.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3473" level="QA_WARNING" help="doc-en_US/doc/messages/3473.html" severity="2">
   <text>This usage of a function-like setter macro looks like it could be replaced by a similar function call.</text>
   <references>
    <reference source="Macro Definitions"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3474" level="QA_WARNING" help="doc-en_US/doc/messages/3474.html" severity="2">
   <text>The name of this macro is a reserved identifier in C90 and C99, and a keyword in C11.</text>
   <references>
    <reference source="Macro Definitions"/>
   </references>
  </message>
  <message id="3475" level="QA_WARNING" help="doc-en_US/doc/messages/3475.html" severity="6">
   <text>[u] '%1s' is only provided by the standard library as a macro, but is being declared as a value here.</text>
   <references>
    <reference source="ISO:C11 Language [7.1.4]"/>
   </references>
  </message>
  <message id="3480" level="QA_WARNING" help="doc-en_US/doc/messages/3480.html" severity="4">
   <text>Object/function '%s', with internal linkage, has been defined in a header file.</text>
   <references>
      </references>
  </message>
  <message id="3481" level="QA_WARNING" help="doc-en_US/doc/messages/3481.html" severity="5">
   <text>Tentative definition of object '%s' appears in a header file.</text>
   <references>
      </references>
  </message>
  <message id="3491" level="QA_WARNING" help="doc-en_US/doc/messages/3491.html" severity="2">
   <text>Using conditional operator in a macro.</text>
   <references>
      </references>
  </message>
  <message id="3492" level="QA_WARNING" help="doc-en_US/doc/messages/3492.html" severity="2">
   <text>Using conditional operator outside a macro.</text>
   <references>
      </references>
  </message>
  <message id="3493" level="QA_WARNING" help="doc-en_US/doc/messages/3493.html" severity="2">
   <text>The first operand of this conditional operator is always constant 'true'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3494" level="QA_WARNING" help="doc-en_US/doc/messages/3494.html" severity="2">
   <text>The first operand of this conditional operator is always constant 'false'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3495" level="QA_WARNING" help="doc-en_US/doc/messages/3495.html" severity="2">
   <text>Using a conditional operator in place of a selection statement.</text>
   <references>
      </references>
  </message>
  <message id="3496" level="QA_WARNING" help="doc-en_US/doc/messages/3496.html" severity="5">
   <text>[U] A va_list object is being directly assigned by value.</text>
   <references>
      </references>
  </message>
  <message id="3497" level="QA_WARNING" help="doc-en_US/doc/messages/3497.html" severity="5">
   <text>[U] The va_list object '%1s' is both passed as an argument and accessed with va_arg.</text>
   <references>
      </references>
  </message>
  <message id="3498" level="QA_WARNING" help="doc-en_US/doc/messages/3498.html" severity="6">
   <text>[U] The va_list object '%1s' is not consistently initialized and released in the same scope.</text>
   <references>
      </references>
  </message>
  <message id="3499" level="QA_WARNING" help="doc-en_US/doc/messages/3499.html" severity="5">
   <text>The va_list object '%1s' is declared with non-automatic storage duration.</text>
   <references>
      </references>
  </message>
  <message id="3501" level="QA_WARNING" help="doc-en_US/doc/messages/3501.html" severity="2">
   <text>Absence of space between assignment operator and following unary operator may cause confusion.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="3560" level="QA_WARNING" help="doc-en_US/doc/messages/3560.html" severity="4">
   <text>Constant: Detected infinite overflow in float.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3600" level="QA_WARNING" help="doc-en_US/doc/messages/3600.html" severity="2">
   <text>Using the unary '+' operator.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
   </references>
  </message>
  <message id="3601" level="QA_WARNING" help="doc-en_US/doc/messages/3601.html" severity="1">
   <text>Trigraphs (??x) are an ISO feature.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="Characters"/>
    <reference source="ISO:C90 Language [5.2.1.1]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3602" level="QA_WARNING" help="doc-en_US/doc/messages/3602.html" severity="2">
   <text>Using one of the keywords 'signed', 'const', 'volatile' or 'enum'.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="3603" level="QA_WARNING" help="doc-en_US/doc/messages/3603.html" severity="2">
   <text>Using 'extern' in the definition of a global variable.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="3604" level="QA_WARNING" help="doc-en_US/doc/messages/3604.html" severity="2">
   <text>Using an initializer when defining an automatic object of struct, union or array type.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="3605" level="QA_WARNING" help="doc-en_US/doc/messages/3605.html" severity="2">
   <text>Type of 'switch' controlling expression cannot be represented in type 'int'.</text>
   <references>
    <reference source="Switch Statements"/>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.6.4.2]"/>
   </references>
  </message>
  <message id="3606" level="QA_WARNING" help="doc-en_US/doc/messages/3606.html" severity="2">
   <text>This unsuffixed decimal constant has type 'long', but had type 'unsigned int' in pre-ISO C.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.1.3.2]"/>
   </references>
  </message>
  <message id="3607" level="QA_WARNING" help="doc-en_US/doc/messages/3607.html" severity="2">
   <text>Parameter '%s' declared with function type in a K&amp;R style function definition.</text>
   <references>
    <reference source="ISO:C90 Language [6.5.4.3]"/>
   </references>
  </message>
  <message id="3608" level="QA_WARNING" help="doc-en_US/doc/messages/3608.html" severity="2">
   <text>Using the '#elif' preprocessing directive.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [6.8.1]"/>
   </references>
  </message>
  <message id="3609" level="QA_WARNING" help="doc-en_US/doc/messages/3609.html" severity="2">
   <text>Using the alert escape sequence '\\a'.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="ISO:C90 Language [5.2.2]"/>
   </references>
  </message>
  <message id="3610" level="QA_WARNING" help="doc-en_US/doc/messages/3610.html" severity="1">
   <text>Hexadecimal escape sequence used.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3611" level="QA_WARNING" help="doc-en_US/doc/messages/3611.html" severity="2">
   <text>Non-portable comparison of plain 'char' with negative constant.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
   </references>
  </message>
  <message id="3612" level="QA_WARNING" help="doc-en_US/doc/messages/3612.html" severity="2">
   <text>Nonportable comparison of plain 'char' with zero.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
   </references>
  </message>
  <message id="3613" level="QA_WARNING" help="doc-en_US/doc/messages/3613.html" severity="1">
   <text>Some pre-ISO compilers would treat this 8 or 9 as an octal digit.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="Constants"/>
   </references>
  </message>
  <message id="3614" level="QA_WARNING" help="doc-en_US/doc/messages/3614.html" severity="4">
   <text>Macro '%s' is being defined more than once without using #undef to remove the previous definition.</text>
   <references>
    <reference source="Macro Usage"/>
   </references>
  </message>
  <message id="3615" level="QA_WARNING" help="doc-en_US/doc/messages/3615.html" severity="2">
   <text>Using 'entry' as an identifier.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="3616" level="QA_WARNING" help="doc-en_US/doc/messages/3616.html" severity="2">
   <text>Character constants may have different values in preprocessor arithmetic than in actual code.</text>
   <references>
    <reference source="Preprocessor"/>
   </references>
  </message>
  <message id="3617" level="QA_WARNING" help="doc-en_US/doc/messages/3617.html" severity="2">
   <text>Assignment of a struct/union by value.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="K&amp;R Restrictions"/>
   </references>
  </message>
  <message id="3618" level="QA_WARNING" help="doc-en_US/doc/messages/3618.html" severity="2">
   <text>Whitespace used after '#' at the start of this preprocessing directive.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="3619" level="QA_WARNING" help="doc-en_US/doc/messages/3619.html" severity="2">
   <text>Whitespace used before '#' at the start of this preprocessing directive.</text>
   <references>
    <reference source="ISO:C90 Language [6.8]"/>
   </references>
  </message>
  <message id="3620" level="QA_WARNING" help="doc-en_US/doc/messages/3620.html" severity="2">
   <text>'register' may be illegal on array and 'struct' / 'union' types in some compilers.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="ISO:C90 Language [6.5.1]"/>
   </references>
  </message>
  <message id="3621" level="QA_WARNING" help="doc-en_US/doc/messages/3621.html" severity="2">
   <text>A bit-field is being defined as a member of a struct or union.</text>
   <references>
    <reference source="K&amp;R Restrictions"/>
    <reference source="Bit-Fields"/>
   </references>
  </message>
  <message id="3622" level="QA_WARNING" help="doc-en_US/doc/messages/3622.html" severity="6">
   <text>A bit-field is being defined as a member of a union.</text>
   <references>
    <reference source="Declarations"/>
    <reference source="Bit-Fields"/>
   </references>
  </message>
  <message id="3623" level="QA_WARNING" help="doc-en_US/doc/messages/3623.html" severity="2">
   <text>Passing a struct/union by value as a function argument.</text>
   <references>
    <reference source="Structures and Unions"/>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="3624" level="QA_WARNING" help="doc-en_US/doc/messages/3624.html" severity="2">
   <text>Function returns a struct/union by value.</text>
   <references>
    <reference source="Function Returns"/>
   </references>
  </message>
  <message id="3625" level="QA_WARNING" help="doc-en_US/doc/messages/3625.html" severity="2">
   <text>Type 'char' has been used in the declaration of an object or a function.</text>
   <references>
    <reference source="Characters &amp; Strings"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
   </references>
  </message>
  <message id="3626" level="QA_WARNING" help="doc-en_US/doc/messages/3626.html" severity="1">
   <text>Double-quote character in a character constant is not preceded by a backslash character.</text>
   <references>
    <reference source="Constants"/>
   </references>
  </message>
  <message id="3627" level="QA_WARNING" help="doc-en_US/doc/messages/3627.html" severity="1">
   <text>Single-quote character in a string literal is not preceded by a backslash character.</text>
   <references>
    <reference source="Constants"/>
   </references>
  </message>
  <message id="3628" level="QA_WARNING" help="doc-en_US/doc/messages/3628.html" severity="1">
   <text>Octal escape sequences used in a character constant or string literal.</text>
   <references>
    <reference source="Constants"/>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3629" level="QA_WARNING" help="doc-en_US/doc/messages/3629.html" severity="2">
   <text>Union contains member of floating type.</text>
   <references>
    <reference source="Structures and Unions"/>
   </references>
  </message>
  <message id="3630" level="QA_WARNING" help="doc-en_US/doc/messages/3630.html" severity="2">
   <text>The implementation of this struct/union type should be hidden.</text>
   <references>
    <reference source="Structures and Unions"/>
   </references>
  </message>
  <message id="3631" level="QA_WARNING" help="doc-en_US/doc/messages/3631.html" severity="2">
   <text>Type 'char' has been used in a cast.</text>
   <references>
    <reference source="Characters &amp; Strings"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
   </references>
  </message>
  <message id="3632" level="QA_WARNING" help="doc-en_US/doc/messages/3632.html" severity="2">
   <text>Type 'char' has been used in the declaration of a typedef.</text>
   <references>
    <reference source="Characters &amp; Strings"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
   </references>
  </message>
  <message id="3633" level="QA_WARNING" help="doc-en_US/doc/messages/3633.html" severity="2">
   <text>Type 'char' has been used in the operand of the sizeof or _Alignof operator.</text>
   <references>
    <reference source="Characters &amp; Strings"/>
    <reference source="ISO:C90 Language [6.1.2.5]"/>
   </references>
  </message>
  <message id="3634" level="QA_WARNING" help="doc-en_US/doc/messages/3634.html" severity="8">
   <text>Use of hard-coded cryptographic key.</text>
   <references>
      </references>
  </message>
  <message id="3635" level="QA_WARNING" help="doc-en_US/doc/messages/3635.html" severity="2">
   <text>Function identifier used as a pointer without a preceding &amp; operator.</text>
   <references>
    <reference source="Functions"/>
    <reference source="ISO:C90 Language [6.2,2,1]"/>
   </references>
  </message>
  <message id="3636" level="QA_WARNING" help="doc-en_US/doc/messages/3636.html" severity="2">
   <text>Octal escape sequence '%s' is not terminated.</text>
   <references>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3637" level="QA_WARNING" help="doc-en_US/doc/messages/3637.html" severity="2">
   <text>Hexadecimal escape sequence '%s' is not terminated.</text>
   <references>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3638" level="QA_WARNING" help="doc-en_US/doc/messages/3638.html" severity="2">
   <text>The %1s directive is only supported from C23.</text>
   <references>
      </references>
  </message>
  <message id="3639" level="QA_WARNING" help="doc-en_US/doc/messages/3639.html" severity="3">
   <text>Implicitly converting a pointer to an array, to a pointer to an array of more-qualified elements.</text>
   <references>
      </references>
  </message>
  <message id="3640" level="QA_WARNING" help="doc-en_US/doc/messages/3640.html" severity="3">
   <text>Casting a pointer to an array, to a pointer to an array of more-qualified elements.</text>
   <references>
      </references>
  </message>
  <message id="3641" level="QA_WARNING" help="doc-en_US/doc/messages/3641.html" severity="2">
   <text>Octal escape sequence '%s' is followed by punctuation characters.</text>
   <references>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3642" level="QA_WARNING" help="doc-en_US/doc/messages/3642.html" severity="2">
   <text>Hexadecimal escape sequence '%s' is followed by punctuation characters.</text>
   <references>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3643" level="QA_WARNING" help="doc-en_US/doc/messages/3643.html" severity="2">
   <text>Universal character name '%s' is not terminated.</text>
   <references>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3644" level="QA_WARNING" help="doc-en_US/doc/messages/3644.html" severity="2">
   <text>Universal character name '%s' is followed by punctuation characters.</text>
   <references>
    <reference source="Characters"/>
   </references>
  </message>
  <message id="3645" level="QA_WARNING" help="doc-en_US/doc/messages/3645.html" severity="2">
   <text>Using the '#embed' directive.</text>
   <references>
      </references>
  </message>
  <message id="3646" level="QA_WARNING" help="doc-en_US/doc/messages/3646.html" severity="2">
   <text>Using the '__has_embed' operator.</text>
   <references>
      </references>
  </message>
  <message id="3650" level="QA_WARNING" help="doc-en_US/doc/messages/3650.html" severity="4">
   <text>Typedef defines an array type of unknown size.</text>
   <references>
    <reference source="Arrays"/>
   </references>
  </message>
  <message id="3651" level="QA_WARNING" help="doc-en_US/doc/messages/3651.html" severity="4">
   <text>Using a typedef for an array of unknown size can lead to unexpected results.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="3659" level="QA_WARNING" help="doc-en_US/doc/messages/3659.html" severity="2">
   <text>Unnamed zero-width bit-field declared with a signed type.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
   </references>
  </message>
  <message id="3660" level="QA_WARNING" help="doc-en_US/doc/messages/3660.html" severity="2">
   <text>Named bit-field consisting of a single bit declared with a signed type.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
   </references>
  </message>
  <message id="3661" level="QA_WARNING" help="doc-en_US/doc/messages/3661.html" severity="2">
   <text>Plain int bit-field compared with zero.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
   </references>
  </message>
  <message id="3662" level="QA_WARNING" help="doc-en_US/doc/messages/3662.html" severity="2">
   <text>Plain int bit-field compared with negative constant.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
   </references>
  </message>
  <message id="3663" level="QA_WARNING" help="doc-en_US/doc/messages/3663.html" severity="2">
   <text>Unnamed bit-field defined with non-zero width.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
   </references>
  </message>
  <message id="3664" level="QA_WARNING" help="doc-en_US/doc/messages/3664.html" severity="2">
   <text>[E] Using a dot operator to access an individual bit is a language extension.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3665" level="QA_WARNING" help="doc-en_US/doc/messages/3665.html" severity="2">
   <text>Unnamed bit-field consisting of a single bit declared with a signed type.</text>
   <references>
    <reference source="Bit-Fields"/>
    <reference source="ISO:C90 Language [6.5.2.1]"/>
   </references>
  </message>
  <message id="3670" level="QA_WARNING" help="doc-en_US/doc/messages/3670.html" severity="4">
   <text>Recursive call to function containing this call.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3671" level="QA_WARNING" help="doc-en_US/doc/messages/3671.html" severity="2">
   <text>Function called via pointer to function.</text>
   <references>
    <reference source="Functions"/>
    <reference source="Pointer Usage"/>
   </references>
  </message>
  <message id="3672" level="QA_WARNING" help="doc-en_US/doc/messages/3672.html" severity="2">
   <text>Using non-const pointer to function.</text>
   <references>
    <reference source="Functions"/>
    <reference source="Pointer Usage"/>
   </references>
  </message>
  <message id="3673" level="QA_WARNING" help="doc-en_US/doc/messages/3673.html" severity="2">
   <text>The object addressed by the pointer parameter '%1s' is not modified and so the pointer could be of type 'pointer to const'.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3674" level="QA_WARNING" help="doc-en_US/doc/messages/3674.html" severity="2">
   <text>Array size defined implicitly by the number of initializers.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="ISO:C90 Language [6.5.7]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3675" level="QA_WARNING" help="doc-en_US/doc/messages/3675.html" severity="2">
   <text>Function parameter declared with type qualification which differs from previous declaration.</text>
   <references>
    <reference source="Functions"/>
   </references>
  </message>
  <message id="3676" level="QA_WARNING" help="doc-en_US/doc/messages/3676.html" severity="2">
   <text>Designators are used to initialize an array of unspecified size.</text>
   <references>
    <reference source="Declarations"/>
   </references>
  </message>
  <message id="3677" level="QA_WARNING" help="doc-en_US/doc/messages/3677.html" severity="2">
   <text>The elements of the array parameter '%1s' are not modified and so they could be qualified as 'const'.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3678" level="QA_WARNING" help="doc-en_US/doc/messages/3678.html" severity="2">
   <text>The object referenced by '%1s' is not modified through it, so '%1s' could be declared with type '%2s'.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3679" level="QA_WARNING" help="doc-en_US/doc/messages/3679.html" severity="2">
   <text>The object referenced by '%1s' is not modified through it, so '%1s' could be declared with type '%2s'.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3684" level="QA_WARNING" help="doc-en_US/doc/messages/3684.html" severity="2">
   <text>Array declared with unknown size.</text>
   <references>
    <reference source="Arrays"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3694" level="QA_WARNING" help="doc-en_US/doc/messages/3694.html" severity="2">
   <text>The elements of the multidimensional array parameter '%1s' are not modified and so they could be qualified as 'const'.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3695" level="QA_WARNING" help="doc-en_US/doc/messages/3695.html" severity="2">
   <text>'%1s' indirectly refers to objects it does not modify, so could potentially be declared with type '%2s'.</text>
   <references>
    <reference source="Type Qualifiers"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="3700" level="QA_WARNING" help="doc-en_US/doc/messages/3700.html" severity="4">
   <text>Implicit conversion: char to signed char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3701" level="QA_WARNING" help="doc-en_US/doc/messages/3701.html" severity="4">
   <text>Implicit conversion: char to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3702" level="QA_WARNING" help="doc-en_US/doc/messages/3702.html" severity="4">
   <text>Implicit conversion: char to short.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3703" level="QA_WARNING" help="doc-en_US/doc/messages/3703.html" severity="4">
   <text>Implicit conversion: char to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3704" level="QA_WARNING" help="doc-en_US/doc/messages/3704.html" severity="4">
   <text>Implicit conversion: char to int.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3705" level="QA_WARNING" help="doc-en_US/doc/messages/3705.html" severity="4">
   <text>Implicit conversion: char to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3706" level="QA_WARNING" help="doc-en_US/doc/messages/3706.html" severity="4">
   <text>Implicit conversion: char to long.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3707" level="QA_WARNING" help="doc-en_US/doc/messages/3707.html" severity="4">
   <text>Implicit conversion: char to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3708" level="QA_WARNING" help="doc-en_US/doc/messages/3708.html" severity="4">
   <text>Implicit conversion: char to float.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3709" level="QA_WARNING" help="doc-en_US/doc/messages/3709.html" severity="4">
   <text>Implicit conversion: char to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3710" level="QA_WARNING" help="doc-en_US/doc/messages/3710.html" severity="4">
   <text>Implicit conversion: char to long double.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3711" level="QA_WARNING" help="doc-en_US/doc/messages/3711.html" severity="4">
   <text>Implicit conversion: unsigned char to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3712" level="QA_WARNING" help="doc-en_US/doc/messages/3712.html" severity="3">
   <text>Implicit conversion: unsigned char to signed char.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3713" level="QA_WARNING" help="doc-en_US/doc/messages/3713.html" severity="2">
   <text>Implicit conversion: unsigned char to short.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3715" level="QA_WARNING" help="doc-en_US/doc/messages/3715.html" severity="2">
   <text>Implicit conversion: unsigned char to int.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3717" level="QA_WARNING" help="doc-en_US/doc/messages/3717.html" severity="2">
   <text>Implicit conversion: unsigned char to long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3719" level="QA_WARNING" help="doc-en_US/doc/messages/3719.html" severity="3">
   <text>Implicit conversion: unsigned char to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3720" level="QA_WARNING" help="doc-en_US/doc/messages/3720.html" severity="3">
   <text>Implicit conversion: unsigned char to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3721" level="QA_WARNING" help="doc-en_US/doc/messages/3721.html" severity="3">
   <text>Implicit conversion: unsigned char to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3722" level="QA_WARNING" help="doc-en_US/doc/messages/3722.html" severity="4">
   <text>Implicit conversion: signed char to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3723" level="QA_WARNING" help="doc-en_US/doc/messages/3723.html" severity="4">
   <text>Implicit conversion: signed char to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3725" level="QA_WARNING" help="doc-en_US/doc/messages/3725.html" severity="4">
   <text>Implicit conversion: signed char to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3727" level="QA_WARNING" help="doc-en_US/doc/messages/3727.html" severity="4">
   <text>Implicit conversion: signed char to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3729" level="QA_WARNING" help="doc-en_US/doc/messages/3729.html" severity="4">
   <text>Implicit conversion: signed char to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3730" level="QA_WARNING" help="doc-en_US/doc/messages/3730.html" severity="3">
   <text>Implicit conversion: signed char to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3731" level="QA_WARNING" help="doc-en_US/doc/messages/3731.html" severity="3">
   <text>Implicit conversion: signed char to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3732" level="QA_WARNING" help="doc-en_US/doc/messages/3732.html" severity="3">
   <text>Implicit conversion: signed char to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3733" level="QA_WARNING" help="doc-en_US/doc/messages/3733.html" severity="4">
   <text>Implicit conversion: short to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3734" level="QA_WARNING" help="doc-en_US/doc/messages/3734.html" severity="4">
   <text>Implicit conversion: short to signed char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3735" level="QA_WARNING" help="doc-en_US/doc/messages/3735.html" severity="4">
   <text>Implicit conversion: short to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3736" level="QA_WARNING" help="doc-en_US/doc/messages/3736.html" severity="4">
   <text>Implicit conversion: short to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3738" level="QA_WARNING" help="doc-en_US/doc/messages/3738.html" severity="4">
   <text>Implicit conversion: short to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3740" level="QA_WARNING" help="doc-en_US/doc/messages/3740.html" severity="4">
   <text>Implicit conversion: short to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3741" level="QA_WARNING" help="doc-en_US/doc/messages/3741.html" severity="3">
   <text>Implicit conversion: short to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3742" level="QA_WARNING" help="doc-en_US/doc/messages/3742.html" severity="3">
   <text>Implicit conversion: short to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3743" level="QA_WARNING" help="doc-en_US/doc/messages/3743.html" severity="3">
   <text>Implicit conversion: short to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3744" level="QA_WARNING" help="doc-en_US/doc/messages/3744.html" severity="4">
   <text>Implicit conversion: unsigned short to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3745" level="QA_WARNING" help="doc-en_US/doc/messages/3745.html" severity="3">
   <text>Implicit conversion: unsigned short to signed char.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3746" level="QA_WARNING" help="doc-en_US/doc/messages/3746.html" severity="4">
   <text>Implicit conversion: unsigned short to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3747" level="QA_WARNING" help="doc-en_US/doc/messages/3747.html" severity="3">
   <text>Implicit conversion: unsigned short to short.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3748" level="QA_WARNING" help="doc-en_US/doc/messages/3748.html" severity="2">
   <text>Implicit conversion: unsigned short to int.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3750" level="QA_WARNING" help="doc-en_US/doc/messages/3750.html" severity="2">
   <text>Implicit conversion: unsigned short to long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3752" level="QA_WARNING" help="doc-en_US/doc/messages/3752.html" severity="3">
   <text>Implicit conversion: unsigned short to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3753" level="QA_WARNING" help="doc-en_US/doc/messages/3753.html" severity="3">
   <text>Implicit conversion: unsigned short to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3754" level="QA_WARNING" help="doc-en_US/doc/messages/3754.html" severity="3">
   <text>Implicit conversion: unsigned short to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3755" level="QA_WARNING" help="doc-en_US/doc/messages/3755.html" severity="4">
   <text>Implicit conversion: int to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3756" level="QA_WARNING" help="doc-en_US/doc/messages/3756.html" severity="4">
   <text>Implicit conversion: int to signed char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3757" level="QA_WARNING" help="doc-en_US/doc/messages/3757.html" severity="4">
   <text>Implicit conversion: int to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3758" level="QA_WARNING" help="doc-en_US/doc/messages/3758.html" severity="4">
   <text>Implicit conversion: int to short.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3759" level="QA_WARNING" help="doc-en_US/doc/messages/3759.html" severity="4">
   <text>Implicit conversion: int to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3760" level="QA_WARNING" help="doc-en_US/doc/messages/3760.html" severity="4">
   <text>Implicit conversion: int to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3762" level="QA_WARNING" help="doc-en_US/doc/messages/3762.html" severity="4">
   <text>Implicit conversion: int to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3763" level="QA_WARNING" help="doc-en_US/doc/messages/3763.html" severity="3">
   <text>Implicit conversion: int to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3764" level="QA_WARNING" help="doc-en_US/doc/messages/3764.html" severity="3">
   <text>Implicit conversion: int to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3765" level="QA_WARNING" help="doc-en_US/doc/messages/3765.html" severity="3">
   <text>Implicit conversion: int to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3766" level="QA_WARNING" help="doc-en_US/doc/messages/3766.html" severity="5">
   <text>Implicit conversion: unsigned int to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3767" level="QA_WARNING" help="doc-en_US/doc/messages/3767.html" severity="3">
   <text>Implicit conversion: unsigned int to signed char.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3768" level="QA_WARNING" help="doc-en_US/doc/messages/3768.html" severity="4">
   <text>Implicit conversion: unsigned int to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3769" level="QA_WARNING" help="doc-en_US/doc/messages/3769.html" severity="3">
   <text>Implicit conversion: unsigned int to short.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3770" level="QA_WARNING" help="doc-en_US/doc/messages/3770.html" severity="4">
   <text>Implicit conversion: unsigned int to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3771" level="QA_WARNING" help="doc-en_US/doc/messages/3771.html" severity="3">
   <text>Implicit conversion: unsigned int to int.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3772" level="QA_WARNING" help="doc-en_US/doc/messages/3772.html" severity="2">
   <text>Implicit conversion: unsigned int to long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3774" level="QA_WARNING" help="doc-en_US/doc/messages/3774.html" severity="3">
   <text>Implicit conversion: unsigned int to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3775" level="QA_WARNING" help="doc-en_US/doc/messages/3775.html" severity="3">
   <text>Implicit conversion: unsigned int to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3776" level="QA_WARNING" help="doc-en_US/doc/messages/3776.html" severity="3">
   <text>Implicit conversion: unsigned int to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3777" level="QA_WARNING" help="doc-en_US/doc/messages/3777.html" severity="4">
   <text>Implicit conversion: long to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3778" level="QA_WARNING" help="doc-en_US/doc/messages/3778.html" severity="4">
   <text>Implicit conversion: long to signed char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3779" level="QA_WARNING" help="doc-en_US/doc/messages/3779.html" severity="4">
   <text>Implicit conversion: long to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3780" level="QA_WARNING" help="doc-en_US/doc/messages/3780.html" severity="4">
   <text>Implicit conversion: long to short.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3781" level="QA_WARNING" help="doc-en_US/doc/messages/3781.html" severity="4">
   <text>Implicit conversion: long to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3782" level="QA_WARNING" help="doc-en_US/doc/messages/3782.html" severity="4">
   <text>Implicit conversion: long to int.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3783" level="QA_WARNING" help="doc-en_US/doc/messages/3783.html" severity="4">
   <text>Implicit conversion: long to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3784" level="QA_WARNING" help="doc-en_US/doc/messages/3784.html" severity="4">
   <text>Implicit conversion: long to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3785" level="QA_WARNING" help="doc-en_US/doc/messages/3785.html" severity="3">
   <text>Implicit conversion: long to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3786" level="QA_WARNING" help="doc-en_US/doc/messages/3786.html" severity="3">
   <text>Implicit conversion: long to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3787" level="QA_WARNING" help="doc-en_US/doc/messages/3787.html" severity="3">
   <text>Implicit conversion: long to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3788" level="QA_WARNING" help="doc-en_US/doc/messages/3788.html" severity="4">
   <text>Implicit conversion: unsigned long to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3789" level="QA_WARNING" help="doc-en_US/doc/messages/3789.html" severity="3">
   <text>Implicit conversion: unsigned long to signed char.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3790" level="QA_WARNING" help="doc-en_US/doc/messages/3790.html" severity="4">
   <text>Implicit conversion: unsigned long to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3791" level="QA_WARNING" help="doc-en_US/doc/messages/3791.html" severity="3">
   <text>Implicit conversion: unsigned long to short.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3792" level="QA_WARNING" help="doc-en_US/doc/messages/3792.html" severity="4">
   <text>Implicit conversion: unsigned long to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3793" level="QA_WARNING" help="doc-en_US/doc/messages/3793.html" severity="3">
   <text>Implicit conversion: unsigned long to int.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3794" level="QA_WARNING" help="doc-en_US/doc/messages/3794.html" severity="4">
   <text>Implicit conversion: unsigned long to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3795" level="QA_WARNING" help="doc-en_US/doc/messages/3795.html" severity="3">
   <text>Implicit conversion: unsigned long to long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3796" level="QA_WARNING" help="doc-en_US/doc/messages/3796.html" severity="3">
   <text>Implicit conversion: unsigned long to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3797" level="QA_WARNING" help="doc-en_US/doc/messages/3797.html" severity="3">
   <text>Implicit conversion: unsigned long to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3798" level="QA_WARNING" help="doc-en_US/doc/messages/3798.html" severity="3">
   <text>Implicit conversion: unsigned long to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3799" level="QA_WARNING" help="doc-en_US/doc/messages/3799.html" severity="5">
   <text>Implicit conversion: float to char.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3800" level="QA_WARNING" help="doc-en_US/doc/messages/3800.html" severity="5">
   <text>Implicit conversion: float to signed char.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3801" level="QA_WARNING" help="doc-en_US/doc/messages/3801.html" severity="5">
   <text>Implicit conversion: float to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3802" level="QA_WARNING" help="doc-en_US/doc/messages/3802.html" severity="5">
   <text>Implicit conversion: float to short.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3803" level="QA_WARNING" help="doc-en_US/doc/messages/3803.html" severity="5">
   <text>Implicit conversion: float to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3804" level="QA_WARNING" help="doc-en_US/doc/messages/3804.html" severity="5">
   <text>Implicit conversion: float to int.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3805" level="QA_WARNING" help="doc-en_US/doc/messages/3805.html" severity="5">
   <text>Implicit conversion: float to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3806" level="QA_WARNING" help="doc-en_US/doc/messages/3806.html" severity="5">
   <text>Implicit conversion: float to long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3807" level="QA_WARNING" help="doc-en_US/doc/messages/3807.html" severity="5">
   <text>Implicit conversion: float to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3810" level="QA_WARNING" help="doc-en_US/doc/messages/3810.html" severity="5">
   <text>Implicit conversion: double to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3811" level="QA_WARNING" help="doc-en_US/doc/messages/3811.html" severity="5">
   <text>Implicit conversion: double to signed char.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3812" level="QA_WARNING" help="doc-en_US/doc/messages/3812.html" severity="5">
   <text>Implicit conversion: double to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3813" level="QA_WARNING" help="doc-en_US/doc/messages/3813.html" severity="5">
   <text>Implicit conversion: double to short.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3814" level="QA_WARNING" help="doc-en_US/doc/messages/3814.html" severity="5">
   <text>Implicit conversion: double to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3815" level="QA_WARNING" help="doc-en_US/doc/messages/3815.html" severity="5">
   <text>Implicit conversion: double to int.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3816" level="QA_WARNING" help="doc-en_US/doc/messages/3816.html" severity="5">
   <text>Implicit conversion: double to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3817" level="QA_WARNING" help="doc-en_US/doc/messages/3817.html" severity="5">
   <text>Implicit conversion: double to long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3818" level="QA_WARNING" help="doc-en_US/doc/messages/3818.html" severity="5">
   <text>Implicit conversion: double to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3819" level="QA_WARNING" help="doc-en_US/doc/messages/3819.html" severity="4">
   <text>Implicit conversion: double to float.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3821" level="QA_WARNING" help="doc-en_US/doc/messages/3821.html" severity="5">
   <text>Implicit conversion: long double to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3822" level="QA_WARNING" help="doc-en_US/doc/messages/3822.html" severity="5">
   <text>Implicit conversion: long double to signed char.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3823" level="QA_WARNING" help="doc-en_US/doc/messages/3823.html" severity="5">
   <text>Implicit conversion: long double to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3824" level="QA_WARNING" help="doc-en_US/doc/messages/3824.html" severity="5">
   <text>Implicit conversion: long double to short.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3825" level="QA_WARNING" help="doc-en_US/doc/messages/3825.html" severity="5">
   <text>Implicit conversion: long double to unsigned short .</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3826" level="QA_WARNING" help="doc-en_US/doc/messages/3826.html" severity="5">
   <text>Implicit conversion: long double to int.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3827" level="QA_WARNING" help="doc-en_US/doc/messages/3827.html" severity="5">
   <text>Implicit conversion: long double to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3828" level="QA_WARNING" help="doc-en_US/doc/messages/3828.html" severity="5">
   <text>Implicit conversion: long double to long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3829" level="QA_WARNING" help="doc-en_US/doc/messages/3829.html" severity="5">
   <text>Implicit conversion: long double to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3830" level="QA_WARNING" help="doc-en_US/doc/messages/3830.html" severity="4">
   <text>Implicit conversion: long double to float.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3831" level="QA_WARNING" help="doc-en_US/doc/messages/3831.html" severity="4">
   <text>Implicit conversion: long double to double.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3832" level="QA_WARNING" help="doc-en_US/doc/messages/3832.html" severity="4">
   <text>Implicit conversion: char to long long.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3833" level="QA_WARNING" help="doc-en_US/doc/messages/3833.html" severity="4">
   <text>Implicit conversion: char to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3834" level="QA_WARNING" help="doc-en_US/doc/messages/3834.html" severity="2">
   <text>Implicit conversion: unsigned char to long long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3837" level="QA_WARNING" help="doc-en_US/doc/messages/3837.html" severity="4">
   <text>Implicit conversion: signed char to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3839" level="QA_WARNING" help="doc-en_US/doc/messages/3839.html" severity="4">
   <text>Implicit conversion: short to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3840" level="QA_WARNING" help="doc-en_US/doc/messages/3840.html" severity="2">
   <text>Implicit conversion: unsigned short to long long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3843" level="QA_WARNING" help="doc-en_US/doc/messages/3843.html" severity="4">
   <text>Implicit conversion: int to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3844" level="QA_WARNING" help="doc-en_US/doc/messages/3844.html" severity="2">
   <text>Implicit conversion: unsigned int to long long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3847" level="QA_WARNING" help="doc-en_US/doc/messages/3847.html" severity="4">
   <text>Implicit conversion: long to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3848" level="QA_WARNING" help="doc-en_US/doc/messages/3848.html" severity="2">
   <text>Implicit conversion: unsigned long to long long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3850" level="QA_WARNING" help="doc-en_US/doc/messages/3850.html" severity="4">
   <text>Implicit conversion: long long to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3851" level="QA_WARNING" help="doc-en_US/doc/messages/3851.html" severity="4">
   <text>Implicit conversion: long long to signed char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3852" level="QA_WARNING" help="doc-en_US/doc/messages/3852.html" severity="4">
   <text>Implicit conversion: long long to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3853" level="QA_WARNING" help="doc-en_US/doc/messages/3853.html" severity="4">
   <text>Implicit conversion: long long to short.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3854" level="QA_WARNING" help="doc-en_US/doc/messages/3854.html" severity="4">
   <text>Implicit conversion: long long to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3855" level="QA_WARNING" help="doc-en_US/doc/messages/3855.html" severity="4">
   <text>Implicit conversion: long long to int.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3856" level="QA_WARNING" help="doc-en_US/doc/messages/3856.html" severity="4">
   <text>Implicit conversion: long long to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3857" level="QA_WARNING" help="doc-en_US/doc/messages/3857.html" severity="4">
   <text>Implicit conversion: long long to long</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3858" level="QA_WARNING" help="doc-en_US/doc/messages/3858.html" severity="4">
   <text>Implicit conversion: long long to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3859" level="QA_WARNING" help="doc-en_US/doc/messages/3859.html" severity="4">
   <text>Implicit conversion: long long to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3860" level="QA_WARNING" help="doc-en_US/doc/messages/3860.html" severity="3">
   <text>Implicit conversion: long long to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3861" level="QA_WARNING" help="doc-en_US/doc/messages/3861.html" severity="3">
   <text>Implicit conversion: long long to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3862" level="QA_WARNING" help="doc-en_US/doc/messages/3862.html" severity="3">
   <text>Implicit conversion: long long to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3863" level="QA_WARNING" help="doc-en_US/doc/messages/3863.html" severity="4">
   <text>Implicit conversion: unsigned long long to char.</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3864" level="QA_WARNING" help="doc-en_US/doc/messages/3864.html" severity="3">
   <text>Implicit conversion: unsigned long long to signed char.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3865" level="QA_WARNING" help="doc-en_US/doc/messages/3865.html" severity="4">
   <text>Implicit conversion: unsigned long long to unsigned char.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3866" level="QA_WARNING" help="doc-en_US/doc/messages/3866.html" severity="3">
   <text>Implicit conversion: unsigned long long to short.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3867" level="QA_WARNING" help="doc-en_US/doc/messages/3867.html" severity="4">
   <text>Implicit conversion: unsigned long long to unsigned short.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3868" level="QA_WARNING" help="doc-en_US/doc/messages/3868.html" severity="3">
   <text>Implicit conversion: unsigned long long to int.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3869" level="QA_WARNING" help="doc-en_US/doc/messages/3869.html" severity="4">
   <text>Implicit conversion: unsigned long long to unsigned int.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3870" level="QA_WARNING" help="doc-en_US/doc/messages/3870.html" severity="3">
   <text>Implicit conversion: unsigned long long to long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3871" level="QA_WARNING" help="doc-en_US/doc/messages/3871.html" severity="4">
   <text>Implicit conversion: unsigned long long to unsigned long.</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3872" level="QA_WARNING" help="doc-en_US/doc/messages/3872.html" severity="3">
   <text>Implicit conversion: unsigned long long to long long.</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3873" level="QA_WARNING" help="doc-en_US/doc/messages/3873.html" severity="3">
   <text>Implicit conversion: unsigned long long to float.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3874" level="QA_WARNING" help="doc-en_US/doc/messages/3874.html" severity="3">
   <text>Implicit conversion: unsigned long long to double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3875" level="QA_WARNING" help="doc-en_US/doc/messages/3875.html" severity="3">
   <text>Implicit conversion: unsigned long long to long double.</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3876" level="QA_WARNING" help="doc-en_US/doc/messages/3876.html" severity="5">
   <text>Implicit conversion: float to long long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3877" level="QA_WARNING" help="doc-en_US/doc/messages/3877.html" severity="5">
   <text>Implicit conversion: float to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3878" level="QA_WARNING" help="doc-en_US/doc/messages/3878.html" severity="5">
   <text>Implicit conversion: double to long long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3879" level="QA_WARNING" help="doc-en_US/doc/messages/3879.html" severity="5">
   <text>Implicit conversion: double to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3880" level="QA_WARNING" help="doc-en_US/doc/messages/3880.html" severity="5">
   <text>Implicit conversion: long double to long long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3881" level="QA_WARNING" help="doc-en_US/doc/messages/3881.html" severity="5">
   <text>Implicit conversion: long double to unsigned long long.</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="3892" level="QA_WARNING" help="doc-en_US/doc/messages/3892.html" severity="2">
   <text>The result of this cast is implicitly converted to another type.</text>
   <references>
    <reference source="Redundant Constructs"/>
   </references>
  </message>
  <message id="3900" level="QA_WARNING" help="doc-en_US/doc/messages/3900.html" severity="4">
   <text>char value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3901" level="QA_WARNING" help="doc-en_US/doc/messages/3901.html" severity="4">
   <text>char value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3902" level="QA_WARNING" help="doc-en_US/doc/messages/3902.html" severity="4">
   <text>char value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3903" level="QA_WARNING" help="doc-en_US/doc/messages/3903.html" severity="4">
   <text>char value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3904" level="QA_WARNING" help="doc-en_US/doc/messages/3904.html" severity="4">
   <text>char value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3905" level="QA_WARNING" help="doc-en_US/doc/messages/3905.html" severity="4">
   <text>char value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3906" level="QA_WARNING" help="doc-en_US/doc/messages/3906.html" severity="4">
   <text>char value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3907" level="QA_WARNING" help="doc-en_US/doc/messages/3907.html" severity="4">
   <text>char value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3908" level="QA_WARNING" help="doc-en_US/doc/messages/3908.html" severity="4">
   <text>char value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3909" level="QA_WARNING" help="doc-en_US/doc/messages/3909.html" severity="4">
   <text>char value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3910" level="QA_WARNING" help="doc-en_US/doc/messages/3910.html" severity="4">
   <text>char value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3911" level="QA_WARNING" help="doc-en_US/doc/messages/3911.html" severity="4">
   <text>unsigned char value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3912" level="QA_WARNING" help="doc-en_US/doc/messages/3912.html" severity="3">
   <text>unsigned char value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3913" level="QA_WARNING" help="doc-en_US/doc/messages/3913.html" severity="2">
   <text>unsigned char value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3915" level="QA_WARNING" help="doc-en_US/doc/messages/3915.html" severity="2">
   <text>unsigned char value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3917" level="QA_WARNING" help="doc-en_US/doc/messages/3917.html" severity="2">
   <text>unsigned char value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3919" level="QA_WARNING" help="doc-en_US/doc/messages/3919.html" severity="3">
   <text>unsigned char value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3920" level="QA_WARNING" help="doc-en_US/doc/messages/3920.html" severity="3">
   <text>unsigned char value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3921" level="QA_WARNING" help="doc-en_US/doc/messages/3921.html" severity="3">
   <text>unsigned char value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3922" level="QA_WARNING" help="doc-en_US/doc/messages/3922.html" severity="4">
   <text>signed char value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3923" level="QA_WARNING" help="doc-en_US/doc/messages/3923.html" severity="4">
   <text>signed char value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3925" level="QA_WARNING" help="doc-en_US/doc/messages/3925.html" severity="4">
   <text>signed char value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3927" level="QA_WARNING" help="doc-en_US/doc/messages/3927.html" severity="4">
   <text>signed char value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3929" level="QA_WARNING" help="doc-en_US/doc/messages/3929.html" severity="4">
   <text>signed char value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3930" level="QA_WARNING" help="doc-en_US/doc/messages/3930.html" severity="4">
   <text>signed char value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3931" level="QA_WARNING" help="doc-en_US/doc/messages/3931.html" severity="3">
   <text>signed char value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3932" level="QA_WARNING" help="doc-en_US/doc/messages/3932.html" severity="3">
   <text>signed char value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3933" level="QA_WARNING" help="doc-en_US/doc/messages/3933.html" severity="4">
   <text>short value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3934" level="QA_WARNING" help="doc-en_US/doc/messages/3934.html" severity="4">
   <text>short value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3935" level="QA_WARNING" help="doc-en_US/doc/messages/3935.html" severity="4">
   <text>short value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3936" level="QA_WARNING" help="doc-en_US/doc/messages/3936.html" severity="4">
   <text>short value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3938" level="QA_WARNING" help="doc-en_US/doc/messages/3938.html" severity="4">
   <text>short value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3940" level="QA_WARNING" help="doc-en_US/doc/messages/3940.html" severity="4">
   <text>short value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3941" level="QA_WARNING" help="doc-en_US/doc/messages/3941.html" severity="3">
   <text>short value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3942" level="QA_WARNING" help="doc-en_US/doc/messages/3942.html" severity="3">
   <text>short value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3943" level="QA_WARNING" help="doc-en_US/doc/messages/3943.html" severity="3">
   <text>short value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3944" level="QA_WARNING" help="doc-en_US/doc/messages/3944.html" severity="4">
   <text>unsigned short value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3945" level="QA_WARNING" help="doc-en_US/doc/messages/3945.html" severity="3">
   <text>unsigned short value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3946" level="QA_WARNING" help="doc-en_US/doc/messages/3946.html" severity="4">
   <text>unsigned short value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3947" level="QA_WARNING" help="doc-en_US/doc/messages/3947.html" severity="3">
   <text>unsigned short value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3948" level="QA_WARNING" help="doc-en_US/doc/messages/3948.html" severity="2">
   <text>unsigned short value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3950" level="QA_WARNING" help="doc-en_US/doc/messages/3950.html" severity="2">
   <text>unsigned short value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3952" level="QA_WARNING" help="doc-en_US/doc/messages/3952.html" severity="3">
   <text>unsigned short value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3953" level="QA_WARNING" help="doc-en_US/doc/messages/3953.html" severity="3">
   <text>unsigned short value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3954" level="QA_WARNING" help="doc-en_US/doc/messages/3954.html" severity="3">
   <text>unsigned short value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3955" level="QA_WARNING" help="doc-en_US/doc/messages/3955.html" severity="4">
   <text>int value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3956" level="QA_WARNING" help="doc-en_US/doc/messages/3956.html" severity="4">
   <text>int value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3957" level="QA_WARNING" help="doc-en_US/doc/messages/3957.html" severity="4">
   <text>int value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3958" level="QA_WARNING" help="doc-en_US/doc/messages/3958.html" severity="4">
   <text>int value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3959" level="QA_WARNING" help="doc-en_US/doc/messages/3959.html" severity="4">
   <text>int value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3960" level="QA_WARNING" help="doc-en_US/doc/messages/3960.html" severity="4">
   <text>int value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3962" level="QA_WARNING" help="doc-en_US/doc/messages/3962.html" severity="4">
   <text>int value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3963" level="QA_WARNING" help="doc-en_US/doc/messages/3963.html" severity="3">
   <text>int value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3964" level="QA_WARNING" help="doc-en_US/doc/messages/3964.html" severity="3">
   <text>int value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3965" level="QA_WARNING" help="doc-en_US/doc/messages/3965.html" severity="3">
   <text>int value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3966" level="QA_WARNING" help="doc-en_US/doc/messages/3966.html" severity="4">
   <text>unsigned int value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3967" level="QA_WARNING" help="doc-en_US/doc/messages/3967.html" severity="3">
   <text>unsigned int value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3968" level="QA_WARNING" help="doc-en_US/doc/messages/3968.html" severity="4">
   <text>unsigned int value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3969" level="QA_WARNING" help="doc-en_US/doc/messages/3969.html" severity="3">
   <text>unsigned int value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3970" level="QA_WARNING" help="doc-en_US/doc/messages/3970.html" severity="4">
   <text>unsigned int value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3971" level="QA_WARNING" help="doc-en_US/doc/messages/3971.html" severity="3">
   <text>unsigned int value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3972" level="QA_WARNING" help="doc-en_US/doc/messages/3972.html" severity="2">
   <text>unsigned int value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="3974" level="QA_WARNING" help="doc-en_US/doc/messages/3974.html" severity="2">
   <text>unsigned int value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3975" level="QA_WARNING" help="doc-en_US/doc/messages/3975.html" severity="3">
   <text>unsigned int value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3976" level="QA_WARNING" help="doc-en_US/doc/messages/3976.html" severity="3">
   <text>unsigned int value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3977" level="QA_WARNING" help="doc-en_US/doc/messages/3977.html" severity="3">
   <text>long value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3978" level="QA_WARNING" help="doc-en_US/doc/messages/3978.html" severity="4">
   <text>long value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3979" level="QA_WARNING" help="doc-en_US/doc/messages/3979.html" severity="4">
   <text>long value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3980" level="QA_WARNING" help="doc-en_US/doc/messages/3980.html" severity="4">
   <text>long value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3981" level="QA_WARNING" help="doc-en_US/doc/messages/3981.html" severity="4">
   <text>long value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3982" level="QA_WARNING" help="doc-en_US/doc/messages/3982.html" severity="4">
   <text>long value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3983" level="QA_WARNING" help="doc-en_US/doc/messages/3983.html" severity="4">
   <text>long value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3984" level="QA_WARNING" help="doc-en_US/doc/messages/3984.html" severity="4">
   <text>long value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="3985" level="QA_WARNING" help="doc-en_US/doc/messages/3985.html" severity="3">
   <text>long value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3986" level="QA_WARNING" help="doc-en_US/doc/messages/3986.html" severity="3">
   <text>long value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3987" level="QA_WARNING" help="doc-en_US/doc/messages/3987.html" severity="3">
   <text>long value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3988" level="QA_WARNING" help="doc-en_US/doc/messages/3988.html" severity="4">
   <text>unsigned long value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="3989" level="QA_WARNING" help="doc-en_US/doc/messages/3989.html" severity="3">
   <text>unsigned long value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3990" level="QA_WARNING" help="doc-en_US/doc/messages/3990.html" severity="4">
   <text>unsigned long value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3991" level="QA_WARNING" help="doc-en_US/doc/messages/3991.html" severity="3">
   <text>unsigned long value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3992" level="QA_WARNING" help="doc-en_US/doc/messages/3992.html" severity="4">
   <text>unsigned long value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3993" level="QA_WARNING" help="doc-en_US/doc/messages/3993.html" severity="3">
   <text>unsigned long value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3994" level="QA_WARNING" help="doc-en_US/doc/messages/3994.html" severity="4">
   <text>unsigned long value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="3995" level="QA_WARNING" help="doc-en_US/doc/messages/3995.html" severity="3">
   <text>unsigned long value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="3996" level="QA_WARNING" help="doc-en_US/doc/messages/3996.html" severity="3">
   <text>unsigned long value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3997" level="QA_WARNING" help="doc-en_US/doc/messages/3997.html" severity="3">
   <text>unsigned long value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3998" level="QA_WARNING" help="doc-en_US/doc/messages/3998.html" severity="3">
   <text>unsigned long value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="3999" level="QA_WARNING" help="doc-en_US/doc/messages/3999.html" severity="5">
   <text>float value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4000" level="QA_WARNING" help="doc-en_US/doc/messages/4000.html" severity="5">
   <text>float value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4001" level="QA_WARNING" help="doc-en_US/doc/messages/4001.html" severity="5">
   <text>float value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4002" level="QA_WARNING" help="doc-en_US/doc/messages/4002.html" severity="5">
   <text>float value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4003" level="QA_WARNING" help="doc-en_US/doc/messages/4003.html" severity="5">
   <text>float value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4004" level="QA_WARNING" help="doc-en_US/doc/messages/4004.html" severity="5">
   <text>float value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4005" level="QA_WARNING" help="doc-en_US/doc/messages/4005.html" severity="5">
   <text>float value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4006" level="QA_WARNING" help="doc-en_US/doc/messages/4006.html" severity="5">
   <text>float value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4007" level="QA_WARNING" help="doc-en_US/doc/messages/4007.html" severity="5">
   <text>float value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4010" level="QA_WARNING" help="doc-en_US/doc/messages/4010.html" severity="5">
   <text>double value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4011" level="QA_WARNING" help="doc-en_US/doc/messages/4011.html" severity="5">
   <text>double value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4012" level="QA_WARNING" help="doc-en_US/doc/messages/4012.html" severity="5">
   <text>double value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4013" level="QA_WARNING" help="doc-en_US/doc/messages/4013.html" severity="5">
   <text>double value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4014" level="QA_WARNING" help="doc-en_US/doc/messages/4014.html" severity="5">
   <text>double value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4015" level="QA_WARNING" help="doc-en_US/doc/messages/4015.html" severity="5">
   <text>double value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4016" level="QA_WARNING" help="doc-en_US/doc/messages/4016.html" severity="5">
   <text>double value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4017" level="QA_WARNING" help="doc-en_US/doc/messages/4017.html" severity="5">
   <text>double value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4018" level="QA_WARNING" help="doc-en_US/doc/messages/4018.html" severity="5">
   <text>double value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4019" level="QA_WARNING" help="doc-en_US/doc/messages/4019.html" severity="4">
   <text>double value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4021" level="QA_WARNING" help="doc-en_US/doc/messages/4021.html" severity="5">
   <text>long double value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4022" level="QA_WARNING" help="doc-en_US/doc/messages/4022.html" severity="5">
   <text>long double value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4023" level="QA_WARNING" help="doc-en_US/doc/messages/4023.html" severity="5">
   <text>long double value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4024" level="QA_WARNING" help="doc-en_US/doc/messages/4024.html" severity="5">
   <text>long double value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4025" level="QA_WARNING" help="doc-en_US/doc/messages/4025.html" severity="5">
   <text>long double value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4026" level="QA_WARNING" help="doc-en_US/doc/messages/4026.html" severity="5">
   <text>long double value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4027" level="QA_WARNING" help="doc-en_US/doc/messages/4027.html" severity="5">
   <text>long double value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4028" level="QA_WARNING" help="doc-en_US/doc/messages/4028.html" severity="5">
   <text>long double value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4029" level="QA_WARNING" help="doc-en_US/doc/messages/4029.html" severity="5">
   <text>long double value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4030" level="QA_WARNING" help="doc-en_US/doc/messages/4030.html" severity="4">
   <text>long double value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4031" level="QA_WARNING" help="doc-en_US/doc/messages/4031.html" severity="4">
   <text>long double value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4032" level="QA_WARNING" help="doc-en_US/doc/messages/4032.html" severity="4">
   <text>char value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="4033" level="QA_WARNING" help="doc-en_US/doc/messages/4033.html" severity="4">
   <text>char value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="4034" level="QA_WARNING" help="doc-en_US/doc/messages/4034.html" severity="2">
   <text>unsigned char value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="4037" level="QA_WARNING" help="doc-en_US/doc/messages/4037.html" severity="4">
   <text>signed char value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4039" level="QA_WARNING" help="doc-en_US/doc/messages/4039.html" severity="4">
   <text>short value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4040" level="QA_WARNING" help="doc-en_US/doc/messages/4040.html" severity="2">
   <text>unsigned short value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="4043" level="QA_WARNING" help="doc-en_US/doc/messages/4043.html" severity="4">
   <text>int value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4044" level="QA_WARNING" help="doc-en_US/doc/messages/4044.html" severity="2">
   <text>unsigned int value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="4047" level="QA_WARNING" help="doc-en_US/doc/messages/4047.html" severity="4">
   <text>long value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4048" level="QA_WARNING" help="doc-en_US/doc/messages/4048.html" severity="2">
   <text>unsigned long value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Larger Signed"/>
   </references>
  </message>
  <message id="4050" level="QA_WARNING" help="doc-en_US/doc/messages/4050.html" severity="4">
   <text>long long value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="4051" level="QA_WARNING" help="doc-en_US/doc/messages/4051.html" severity="4">
   <text>long long value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4052" level="QA_WARNING" help="doc-en_US/doc/messages/4052.html" severity="4">
   <text>long long value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4053" level="QA_WARNING" help="doc-en_US/doc/messages/4053.html" severity="4">
   <text>long long value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4054" level="QA_WARNING" help="doc-en_US/doc/messages/4054.html" severity="4">
   <text>long long value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4055" level="QA_WARNING" help="doc-en_US/doc/messages/4055.html" severity="4">
   <text>long long value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4056" level="QA_WARNING" help="doc-en_US/doc/messages/4056.html" severity="4">
   <text>long long value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4057" level="QA_WARNING" help="doc-en_US/doc/messages/4057.html" severity="4">
   <text>long long value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4058" level="QA_WARNING" help="doc-en_US/doc/messages/4058.html" severity="4">
   <text>long long value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4059" level="QA_WARNING" help="doc-en_US/doc/messages/4059.html" severity="4">
   <text>long long value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Signed to Unsigned"/>
   </references>
  </message>
  <message id="4060" level="QA_WARNING" help="doc-en_US/doc/messages/4060.html" severity="3">
   <text>long long value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="4061" level="QA_WARNING" help="doc-en_US/doc/messages/4061.html" severity="3">
   <text>long long value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="4062" level="QA_WARNING" help="doc-en_US/doc/messages/4062.html" severity="3">
   <text>long long value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="4063" level="QA_WARNING" help="doc-en_US/doc/messages/4063.html" severity="4">
   <text>unsigned long long value returned from char %1s().</text>
   <references>
    <reference source="Implicit Casts - Plain Char Casts"/>
   </references>
  </message>
  <message id="4064" level="QA_WARNING" help="doc-en_US/doc/messages/4064.html" severity="3">
   <text>unsigned long long value returned from signed char %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="4065" level="QA_WARNING" help="doc-en_US/doc/messages/4065.html" severity="4">
   <text>unsigned long long value returned from unsigned char %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4066" level="QA_WARNING" help="doc-en_US/doc/messages/4066.html" severity="3">
   <text>unsigned long long value returned from short %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="4067" level="QA_WARNING" help="doc-en_US/doc/messages/4067.html" severity="4">
   <text>unsigned long long value returned from unsigned short %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4068" level="QA_WARNING" help="doc-en_US/doc/messages/4068.html" severity="3">
   <text>unsigned long long value returned from int %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="4069" level="QA_WARNING" help="doc-en_US/doc/messages/4069.html" severity="4">
   <text>unsigned long long value returned from unsigned int %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4070" level="QA_WARNING" help="doc-en_US/doc/messages/4070.html" severity="3">
   <text>unsigned long long value returned from long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="4071" level="QA_WARNING" help="doc-en_US/doc/messages/4071.html" severity="4">
   <text>unsigned long long value returned from unsigned long %1s().</text>
   <references>
    <reference source="Implicit Casts - Narrowing"/>
   </references>
  </message>
  <message id="4072" level="QA_WARNING" help="doc-en_US/doc/messages/4072.html" severity="3">
   <text>unsigned long long value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - Unsigned to Signed"/>
   </references>
  </message>
  <message id="4073" level="QA_WARNING" help="doc-en_US/doc/messages/4073.html" severity="3">
   <text>unsigned long long value returned from float %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="4074" level="QA_WARNING" help="doc-en_US/doc/messages/4074.html" severity="3">
   <text>unsigned long long value returned from double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="4075" level="QA_WARNING" help="doc-en_US/doc/messages/4075.html" severity="3">
   <text>unsigned long long value returned from long double %1s().</text>
   <references>
    <reference source="Implicit Casts - int to float"/>
   </references>
  </message>
  <message id="4076" level="QA_WARNING" help="doc-en_US/doc/messages/4076.html" severity="5">
   <text>float value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4077" level="QA_WARNING" help="doc-en_US/doc/messages/4077.html" severity="5">
   <text>float value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4078" level="QA_WARNING" help="doc-en_US/doc/messages/4078.html" severity="5">
   <text>double value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4079" level="QA_WARNING" help="doc-en_US/doc/messages/4079.html" severity="5">
   <text>double value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4080" level="QA_WARNING" help="doc-en_US/doc/messages/4080.html" severity="5">
   <text>long double value returned from long long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4081" level="QA_WARNING" help="doc-en_US/doc/messages/4081.html" severity="5">
   <text>long double value returned from unsigned long long %1s().</text>
   <references>
    <reference source="Implicit Casts - float to int"/>
   </references>
  </message>
  <message id="4082" level="QA_WARNING" help="doc-en_US/doc/messages/4082.html" severity="1">
   <text>Call to PRNG setup function uses a hard-coded seed value.</text>
   <references>
      </references>
  </message>
  <message id="4083" level="QA_WARNING" help="doc-en_US/doc/messages/4083.html" severity="1">
   <text>Call to PRNG setup function uses a non-constant seed value.</text>
   <references>
      </references>
  </message>
  <message id="4101" level="QA_WARNING" help="doc-en_US/doc/messages/4101.html" severity="5">
   <text>Both operands of &amp; operator are 'Boolean' expressions.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.10]"/>
   </references>
  </message>
  <message id="4102" level="QA_WARNING" help="doc-en_US/doc/messages/4102.html" severity="5">
   <text>Both operands of | operator are 'Boolean' expressions.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.12]"/>
   </references>
  </message>
  <message id="4103" level="QA_WARNING" help="doc-en_US/doc/messages/4103.html" severity="5">
   <text>Both operands of arithmetic or bitwise operator are 'Boolean' expressions.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="4104" level="QA_WARNING" help="doc-en_US/doc/messages/4104.html" severity="5">
   <text>Left hand operand of arithmetic or bitwise operator is a 'Boolean' expression.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="4105" level="QA_WARNING" help="doc-en_US/doc/messages/4105.html" severity="5">
   <text>Right hand operand of arithmetic or bitwise operator is a 'Boolean' expression.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="4106" level="QA_WARNING" help="doc-en_US/doc/messages/4106.html" severity="4">
   <text>Both operands of &amp;&amp; operator are arithmetic or bitwise expressions.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.13]"/>
   </references>
  </message>
  <message id="4107" level="QA_WARNING" help="doc-en_US/doc/messages/4107.html" severity="4">
   <text>Both operands of || operator are arithmetic or bitwise expressions.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.14]"/>
   </references>
  </message>
  <message id="4108" level="QA_WARNING" help="doc-en_US/doc/messages/4108.html" severity="4">
   <text>Left hand operand of logical operator is an arithmetic or bitwise expression.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="4109" level="QA_WARNING" help="doc-en_US/doc/messages/4109.html" severity="4">
   <text>Right hand operand of logical operator is an arithmetic or bitwise expression.</text>
   <references>
    <reference source="Operator Usage"/>
   </references>
  </message>
  <message id="4110" level="QA_WARNING" help="doc-en_US/doc/messages/4110.html" severity="4">
   <text>Operand of ! operator is an arithmetic or bitwise expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
   </references>
  </message>
  <message id="4111" level="QA_WARNING" help="doc-en_US/doc/messages/4111.html" severity="5">
   <text>Right hand operand of relational operator is a 'Boolean' expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4112" level="QA_WARNING" help="doc-en_US/doc/messages/4112.html" severity="5">
   <text>Left hand operand of relational operator is a 'Boolean' expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.8]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4113" level="QA_WARNING" help="doc-en_US/doc/messages/4113.html" severity="5">
   <text>Both operands of relational operator are 'Boolean' expressions.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.8]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4114" level="QA_WARNING" help="doc-en_US/doc/messages/4114.html" severity="5">
   <text>Operand of ~ operator is a 'Boolean' expression.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
   </references>
  </message>
  <message id="4115" level="QA_WARNING" help="doc-en_US/doc/messages/4115.html" severity="3">
   <text>Operand of logical &amp;&amp; or || operator is not an 'essentially Boolean' expression.</text>
   <references>
    <reference source="Control"/>
    <reference source="ISO:C90 Language [6.3.13]"/>
    <reference source="ISO:C90 Language [6.3.14]"/>
   </references>
  </message>
  <message id="4116" level="QA_WARNING" help="doc-en_US/doc/messages/4116.html" severity="3">
   <text>Operand of logical ! operator is not an 'essentially Boolean' expression.</text>
   <references>
    <reference source="Control"/>
    <reference source="ISO:C90 Language [6.3.3.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4117" level="QA_WARNING" help="doc-en_US/doc/messages/4117.html" severity="3">
   <text>Result of integer division operation implicitly converted to a floating type.</text>
   <references>
    <reference source="Widening Conversions"/>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4118" level="QA_WARNING" help="doc-en_US/doc/messages/4118.html" severity="3">
   <text>Result of integer division operation cast to a floating type.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4119" level="QA_WARNING" help="doc-en_US/doc/messages/4119.html" severity="3">
   <text>Result of floating point operation cast to an integral type.</text>
   <references>
    <reference source="ISO:C90 Language [6.2.1.3]"/>
   </references>
  </message>
  <message id="4120" level="QA_WARNING" help="doc-en_US/doc/messages/4120.html" severity="3">
   <text>Implicit conversion: complex expression of integral type to wider type.</text>
   <references>
      </references>
  </message>
  <message id="4121" level="QA_WARNING" help="doc-en_US/doc/messages/4121.html" severity="3">
   <text>Cast of complex expression of integral type to wider type.</text>
   <references>
      </references>
  </message>
  <message id="4123" level="QA_WARNING" help="doc-en_US/doc/messages/4123.html" severity="3">
   <text>Implicit conversion: complex expression of type float to type double.</text>
   <references>
      </references>
  </message>
  <message id="4124" level="QA_WARNING" help="doc-en_US/doc/messages/4124.html" severity="3">
   <text>Implicit conversion: complex expression of type float to type long double.</text>
   <references>
      </references>
  </message>
  <message id="4125" level="QA_WARNING" help="doc-en_US/doc/messages/4125.html" severity="3">
   <text>Implicit conversion: complex expression of type double to type long double.</text>
   <references>
      </references>
  </message>
  <message id="4126" level="QA_WARNING" help="doc-en_US/doc/messages/4126.html" severity="3">
   <text>Cast of complex expression of type float to type double.</text>
   <references>
      </references>
  </message>
  <message id="4127" level="QA_WARNING" help="doc-en_US/doc/messages/4127.html" severity="3">
   <text>Cast of complex expression of type float to type long double.</text>
   <references>
      </references>
  </message>
  <message id="4128" level="QA_WARNING" help="doc-en_US/doc/messages/4128.html" severity="3">
   <text>Cast of complex expression of type double to type long double.</text>
   <references>
      </references>
  </message>
  <message id="4130" level="QA_WARNING" help="doc-en_US/doc/messages/4130.html" severity="4">
   <text>Bitwise operations on signed data will give implementation defined results.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="ISO:C90 Language [6.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4131" level="QA_WARNING" help="doc-en_US/doc/messages/4131.html" severity="2">
   <text>Left shift operation on signed operand.</text>
   <references>
    <reference source="Operator Usage"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4139" level="QA_WARNING" help="doc-en_US/doc/messages/4139.html" severity="2">
   <text>Address of local static object exported in function return value.</text>
   <references>
    <reference source="Variable Scope"/>
   </references>
  </message>
  <message id="4140" level="QA_WARNING" help="doc-en_US/doc/messages/4140.html" severity="5">
   <text>Address of automatic object exported in function return value.</text>
   <references>
    <reference source="Function Returns"/>
    <reference source="Variable Scope"/>
    <reference source="Pointer Usage"/>
    <reference source="Critical Problems"/>
    <reference source="ISO:C90 Language [6.1.2.4]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4150" level="QA_WARNING" help="doc-en_US/doc/messages/4150.html" severity="2">
   <text>The identifier '%1s' may cause confusion because it contains only the letter 'l' and and the number '1'.</text>
   <references>
    <reference source="Identifiers"/>
   </references>
  </message>
  <message id="4151" level="QA_WARNING" help="doc-en_US/doc/messages/4151.html" severity="2">
   <text>The identifier '%1s' may cause confusion because it contains only the letter 'O' and the number '0'.</text>
   <references>
    <reference source="Identifiers"/>
   </references>
  </message>
  <message id="4152" level="QA_WARNING" help="doc-en_US/doc/messages/4152.html" severity="2">
   <text>The identifier '%1s' may cause confusion because the letter 'l' and the number '1' are adjacent.</text>
   <references>
    <reference source="Identifiers"/>
   </references>
  </message>
  <message id="4153" level="QA_WARNING" help="doc-en_US/doc/messages/4153.html" severity="2">
   <text>The identifier '%1s' may cause confusion because the letter 'O' and the number '0' are adjacent.</text>
   <references>
    <reference source="Identifiers"/>
   </references>
  </message>
  <message id="4301" level="QA_WARNING" help="doc-en_US/doc/messages/4301.html" severity="5">
   <text>An expression of 'essentially Boolean' type (%1s) is being cast to character type '%2s'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4302" level="QA_WARNING" help="doc-en_US/doc/messages/4302.html" severity="3">
   <text>An expression of 'essentially Boolean' type (%1s) is being cast to enum type '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4303" level="QA_WARNING" help="doc-en_US/doc/messages/4303.html" severity="3">
   <text>An expression of 'essentially Boolean' type (%1s) is being cast to signed type '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4304" level="QA_WARNING" help="doc-en_US/doc/messages/4304.html" severity="3">
   <text>An expression of 'essentially Boolean' type (%1s) is being cast to unsigned type '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4305" level="QA_WARNING" help="doc-en_US/doc/messages/4305.html" severity="5">
   <text>An expression of 'essentially Boolean' type (%1s) is being cast to floating type '%2s'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4310" level="QA_WARNING" help="doc-en_US/doc/messages/4310.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being cast to Boolean type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4312" level="QA_WARNING" help="doc-en_US/doc/messages/4312.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being cast to enum type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4315" level="QA_WARNING" help="doc-en_US/doc/messages/4315.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being cast to floating type, '%2s'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4320" level="QA_WARNING" help="doc-en_US/doc/messages/4320.html" severity="3">
   <text>An expression of 'essentially enum' type (%1s) is being cast to Boolean type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4322" level="QA_WARNING" help="doc-en_US/doc/messages/4322.html" severity="4">
   <text>An expression of 'essentially enum' type (%1s) is being cast to a different enum type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4325" level="QA_WARNING" help="doc-en_US/doc/messages/4325.html" severity="3">
   <text>An expression of 'essentially enum' type (%1s) is being cast to floating type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4330" level="QA_WARNING" help="doc-en_US/doc/messages/4330.html" severity="4">
   <text>An expression of 'essentially signed' type (%1s) is being cast to Boolean type '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4332" level="QA_WARNING" help="doc-en_US/doc/messages/4332.html" severity="5">
   <text>An expression of 'essentially signed' type (%1s) is being cast to enum type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4340" level="QA_WARNING" help="doc-en_US/doc/messages/4340.html" severity="3">
   <text>An expression of 'essentially unsigned' type (%1s) is being cast to Boolean type '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4342" level="QA_WARNING" help="doc-en_US/doc/messages/4342.html" severity="4">
   <text>An expression of 'essentially unsigned' type (%1s) is being cast to enum type '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4350" level="QA_WARNING" help="doc-en_US/doc/messages/4350.html" severity="5">
   <text>An expression of 'essentially floating' type (%1s) is being cast to Boolean type '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4351" level="QA_WARNING" help="doc-en_US/doc/messages/4351.html" severity="5">
   <text>An expression of 'essentially floating' type (%1s) is being cast to character type '%2s'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4352" level="QA_WARNING" help="doc-en_US/doc/messages/4352.html" severity="5">
   <text>An expression of 'essentially floating' type (%1s) is being cast to enum type, '%2s'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4389" level="QA_WARNING" help="doc-en_US/doc/messages/4389.html" severity="4">
   <text>A composite expression of 'essentially char' type (%1s) is being cast to a different type category, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4390" level="QA_WARNING" help="doc-en_US/doc/messages/4390.html" severity="4">
   <text>A composite expression of 'essentially signed' type (%1s) is being cast to a wider signed type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4391" level="QA_WARNING" help="doc-en_US/doc/messages/4391.html" severity="4">
   <text>A composite expression of 'essentially unsigned' type (%1s) is being cast to a wider unsigned type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4392" level="QA_WARNING" help="doc-en_US/doc/messages/4392.html" severity="4">
   <text>A composite expression of 'essentially floating' type (%1s) is being cast to a wider floating type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4393" level="QA_WARNING" help="doc-en_US/doc/messages/4393.html" severity="3">
   <text>A composite expression of 'essentially signed' type (%1s) is being cast to a different type category, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4394" level="QA_WARNING" help="doc-en_US/doc/messages/4394.html" severity="3">
   <text>A composite expression of 'essentially unsigned' type (%1s) is being cast to a different type category, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4395" level="QA_WARNING" help="doc-en_US/doc/messages/4395.html" severity="3">
   <text>A composite expression of 'essentially floating' type (%1s) is being cast to a different type category, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4397" level="QA_WARNING" help="doc-en_US/doc/messages/4397.html" severity="4">
   <text>An expression which is the result of a ~ or &lt;&lt; operation has not been cast to its essential type.</text>
   <references>
      </references>
  </message>
  <message id="4398" level="QA_WARNING" help="doc-en_US/doc/messages/4398.html" severity="4">
   <text>An expression which is the result of a ~ or &lt;&lt; operation has been cast to a different essential type category.</text>
   <references>
      </references>
  </message>
  <message id="4399" level="QA_WARNING" help="doc-en_US/doc/messages/4399.html" severity="4">
   <text>An expression which is the result of a ~ or &lt;&lt; operation has been cast to a wider type.</text>
   <references>
      </references>
  </message>
  <message id="4401" level="QA_WARNING" help="doc-en_US/doc/messages/4401.html" severity="3">
   <text>An expression of 'essentially Boolean' type (%1s) is being converted to character type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4402" level="QA_WARNING" help="doc-en_US/doc/messages/4402.html" severity="5">
   <text>An expression of 'essentially Boolean' type (%1s) is being converted to enum type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4403" level="QA_WARNING" help="doc-en_US/doc/messages/4403.html" severity="3">
   <text>An expression of 'essentially Boolean' type (%1s) is being converted to signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4404" level="QA_WARNING" help="doc-en_US/doc/messages/4404.html" severity="3">
   <text>An expression of 'essentially Boolean' type (%1s) is being converted to unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4405" level="QA_WARNING" help="doc-en_US/doc/messages/4405.html" severity="5">
   <text>An expression of 'essentially Boolean' type (%1s) is being converted to floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4410" level="QA_WARNING" help="doc-en_US/doc/messages/4410.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being converted to Boolean type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4412" level="QA_WARNING" help="doc-en_US/doc/messages/4412.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being converted to enum type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4413" level="QA_WARNING" help="doc-en_US/doc/messages/4413.html" severity="3">
   <text>An expression of 'essentially character' type (%1s) is being converted to signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4414" level="QA_WARNING" help="doc-en_US/doc/messages/4414.html" severity="3">
   <text>An expression of 'essentially character' type (%1s) is being converted to unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4415" level="QA_WARNING" help="doc-en_US/doc/messages/4415.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being converted to floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4420" level="QA_WARNING" help="doc-en_US/doc/messages/4420.html" severity="5">
   <text>An expression of 'essentially enum' type (%1s) is being converted to Boolean type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4421" level="QA_WARNING" help="doc-en_US/doc/messages/4421.html" severity="4">
   <text>An expression of 'essentially enum' type (%1s) is being converted to character type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4422" level="QA_WARNING" help="doc-en_US/doc/messages/4422.html" severity="5">
   <text>An expression of 'essentially enum' type (%1s) is being converted to a different enum type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4423" level="QA_WARNING" help="doc-en_US/doc/messages/4423.html" severity="3">
   <text>An expression of 'essentially enum' type (%1s) is being converted to signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4424" level="QA_WARNING" help="doc-en_US/doc/messages/4424.html" severity="4">
   <text>An expression of 'essentially enum' type (%1s) is being converted to unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4425" level="QA_WARNING" help="doc-en_US/doc/messages/4425.html" severity="4">
   <text>An expression of 'essentially enum' type (%1s) is being converted to floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4430" level="QA_WARNING" help="doc-en_US/doc/messages/4430.html" severity="4">
   <text>An expression of 'essentially signed' type (%1s) is being converted to Boolean type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4431" level="QA_WARNING" help="doc-en_US/doc/messages/4431.html" severity="3">
   <text>An expression of 'essentially signed' type (%1s) is being converted to character type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4432" level="QA_WARNING" help="doc-en_US/doc/messages/4432.html" severity="5">
   <text>An expression of 'essentially signed' type (%1s) is being converted to enum type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4434" level="QA_WARNING" help="doc-en_US/doc/messages/4434.html" severity="4">
   <text>A non-constant expression of 'essentially signed' type (%1s) is being converted to unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4435" level="QA_WARNING" help="doc-en_US/doc/messages/4435.html" severity="3">
   <text>A non-constant expression of 'essentially signed' type (%1s) is being converted to floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4436" level="QA_WARNING" help="doc-en_US/doc/messages/4436.html" severity="2">
   <text>A constant expression of 'essentially signed' type (%1s) is being converted to unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4437" level="QA_WARNING" help="doc-en_US/doc/messages/4437.html" severity="3">
   <text>A constant expression of 'essentially signed' type (%1s) is being converted to floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4440" level="QA_WARNING" help="doc-en_US/doc/messages/4440.html" severity="4">
   <text>An expression of 'essentially unsigned' type (%1s) is being converted to Boolean type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4441" level="QA_WARNING" help="doc-en_US/doc/messages/4441.html" severity="3">
   <text>An expression of 'essentially unsigned' type (%1s) is being converted to character type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4442" level="QA_WARNING" help="doc-en_US/doc/messages/4442.html" severity="5">
   <text>An expression of 'essentially unsigned' type (%1s) is being converted to enum type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4443" level="QA_WARNING" help="doc-en_US/doc/messages/4443.html" severity="3">
   <text>A non-constant expression of 'essentially unsigned' type (%1s) is being converted to a wider signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4445" level="QA_WARNING" help="doc-en_US/doc/messages/4445.html" severity="3">
   <text>An expression of 'essentially unsigned' type (%1s) is being converted to floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4446" level="QA_WARNING" help="doc-en_US/doc/messages/4446.html" severity="3">
   <text>A non-constant expression of 'essentially unsigned' type (%1s) is being converted to signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4447" level="QA_WARNING" help="doc-en_US/doc/messages/4447.html" severity="3">
   <text>A constant expression of 'essentially unsigned' type (%1s) is being converted to signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4450" level="QA_WARNING" help="doc-en_US/doc/messages/4450.html" severity="6">
   <text>An expression of 'essentially floating' type (%1s) is being converted to Boolean type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4451" level="QA_WARNING" help="doc-en_US/doc/messages/4451.html" severity="6">
   <text>An expression of 'essentially floating' type (%1s) is being converted to character type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4452" level="QA_WARNING" help="doc-en_US/doc/messages/4452.html" severity="6">
   <text>An expression of 'essentially floating' type (%1s) is being converted to enum type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4453" level="QA_WARNING" help="doc-en_US/doc/messages/4453.html" severity="4">
   <text>An expression of 'essentially floating' type (%1s) is being converted to signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4454" level="QA_WARNING" help="doc-en_US/doc/messages/4454.html" severity="4">
   <text>An expression of 'essentially floating' type (%1s) is being converted to unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4460" level="QA_WARNING" help="doc-en_US/doc/messages/4460.html" severity="4">
   <text>A non-constant expression of 'essentially signed' type (%1s) is being converted to narrower signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4461" level="QA_WARNING" help="doc-en_US/doc/messages/4461.html" severity="4">
   <text>A non-constant expression of 'essentially unsigned' type (%1s) is being converted to narrower unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4462" level="QA_WARNING" help="doc-en_US/doc/messages/4462.html" severity="4">
   <text>A non-constant expression of 'essentially floating' type (%1s) is being converted to narrower floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4463" level="QA_WARNING" help="doc-en_US/doc/messages/4463.html" severity="3">
   <text>A constant expression of 'essentially signed' type (%1s) is being converted to narrower signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4464" level="QA_WARNING" help="doc-en_US/doc/messages/4464.html" severity="3">
   <text>A constant expression of 'essentially unsigned' type (%1s) is being converted to narrower unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4465" level="QA_WARNING" help="doc-en_US/doc/messages/4465.html" severity="3">
   <text>A constant expression of 'essentially floating' type (%1s) is being converted to narrower floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4470" level="QA_WARNING" help="doc-en_US/doc/messages/4470.html" severity="4">
   <text>A non-constant expression of 'essentially signed' type (%1s) is being passed to a function parameter of wider signed type, '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4471" level="QA_WARNING" help="doc-en_US/doc/messages/4471.html" severity="4">
   <text>A non-constant expression of 'essentially unsigned' type (%1s) is being passed to a function parameter of wider unsigned type, '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4472" level="QA_WARNING" help="doc-en_US/doc/messages/4472.html" severity="4">
   <text>A non-constant expression of 'essentially floating' type (%1s) is being passed to a function parameter of wider floating type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4480" level="QA_WARNING" help="doc-en_US/doc/messages/4480.html" severity="4">
   <text>A non-constant expression of 'essentially signed' type (%1s) is being returned from a function defined with a wider signed return type, '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4481" level="QA_WARNING" help="doc-en_US/doc/messages/4481.html" severity="4">
   <text>A non-constant expression of 'essentially unsigned' type (%1s) is being returned from a function defined with a wider unsigned return type, '%2s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4482" level="QA_WARNING" help="doc-en_US/doc/messages/4482.html" severity="4">
   <text>A non-constant expression of 'essentially floating' type (%1s) is being returned from a function defined with a wider floating return type, '%2s'.</text>
   <references>
      </references>
  </message>
  <message id="4490" level="QA_WARNING" help="doc-en_US/doc/messages/4490.html" severity="4">
   <text>A composite expression of 'essentially signed' type (%1s) is being converted to wider signed type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4491" level="QA_WARNING" help="doc-en_US/doc/messages/4491.html" severity="4">
   <text>A composite expression of 'essentially unsigned' type (%1s) is being converted to wider unsigned type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4492" level="QA_WARNING" help="doc-en_US/doc/messages/4492.html" severity="4">
   <text>A composite expression of 'essentially floating' type (%1s) is being converted to wider floating type, '%2s' on assignment.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4498" level="QA_WARNING" help="doc-en_US/doc/messages/4498.html" severity="5">
   <text>An expression which is the result of a ~ or &lt;&lt; operation has been converted to a different essential type category on assignment.</text>
   <references>
      </references>
  </message>
  <message id="4499" level="QA_WARNING" help="doc-en_US/doc/messages/4499.html" severity="5">
   <text>An expression which is the result of a ~ or &lt;&lt; operation has been converted to a wider essential type on assignment.</text>
   <references>
      </references>
  </message>
  <message id="4500" level="QA_WARNING" help="doc-en_US/doc/messages/4500.html" severity="4">
   <text>An expression of 'essentially Boolean' type (%1s) is being used as an array subscript.</text>
   <references>
      </references>
  </message>
  <message id="4501" level="QA_WARNING" help="doc-en_US/doc/messages/4501.html" severity="4">
   <text>An expression of 'essentially Boolean' type (%1s) is being used as the %2s operand of this arithmetic operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4502" level="QA_WARNING" help="doc-en_US/doc/messages/4502.html" severity="5">
   <text>An expression of 'essentially Boolean' type (%1s) is being used as the %2s operand of this bitwise operator (%3s).</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4503" level="QA_WARNING" help="doc-en_US/doc/messages/4503.html" severity="4">
   <text>An expression of 'essentially Boolean' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4504" level="QA_WARNING" help="doc-en_US/doc/messages/4504.html" severity="4">
   <text>An expression of 'essentially Boolean' type (%1s) is being used as the right-hand operand of this shift operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4505" level="QA_WARNING" help="doc-en_US/doc/messages/4505.html" severity="6">
   <text>An expression of 'essentially Boolean' type (%1s) is being used as the %2s operand of this relational operator (%3s).</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4507" level="QA_WARNING" help="doc-en_US/doc/messages/4507.html" severity="6">
   <text>An expression of 'essentially Boolean' type (%1s) is being used as the operand of this increment/decrement operator (%2s).</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4510" level="QA_WARNING" help="doc-en_US/doc/messages/4510.html" severity="4">
   <text>An expression of 'essentially character' type (%1s) is being used as an array subscript.</text>
   <references>
      </references>
  </message>
  <message id="4511" level="QA_WARNING" help="doc-en_US/doc/messages/4511.html" severity="4">
   <text>An expression of 'essentially character' type (%1s) is being used as the %2s operand of this arithmetic operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4512" level="QA_WARNING" help="doc-en_US/doc/messages/4512.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the %2s operand of this bitwise operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4513" level="QA_WARNING" help="doc-en_US/doc/messages/4513.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4514" level="QA_WARNING" help="doc-en_US/doc/messages/4514.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the right-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4517" level="QA_WARNING" help="doc-en_US/doc/messages/4517.html" severity="3">
   <text>An expression of 'essentially character' type (%1s) is being used as the operand of this increment/decrement operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4518" level="QA_WARNING" help="doc-en_US/doc/messages/4518.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the %2s operand of this logical operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4519" level="QA_WARNING" help="doc-en_US/doc/messages/4519.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the first operand of this conditional operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4521" level="QA_WARNING" help="doc-en_US/doc/messages/4521.html" severity="2">
   <text>An expression of 'essentially enum' type (%1s) is being used as the %2s operand of this arithmetic operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4522" level="QA_WARNING" help="doc-en_US/doc/messages/4522.html" severity="2">
   <text>An expression of 'essentially enum' type (%1s) is being used as the %2s operand of this bitwise operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4523" level="QA_WARNING" help="doc-en_US/doc/messages/4523.html" severity="2">
   <text>An expression of 'essentially enum' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4524" level="QA_WARNING" help="doc-en_US/doc/messages/4524.html" severity="2">
   <text>An expression of 'essentially enum' type (%1s) is being used as the right-hand operand of this shift operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4527" level="QA_WARNING" help="doc-en_US/doc/messages/4527.html" severity="5">
   <text>An expression of 'essentially enum' type is being used as the operand of this increment/decrement operator.</text>
   <references>
      </references>
  </message>
  <message id="4528" level="QA_WARNING" help="doc-en_US/doc/messages/4528.html" severity="2">
   <text>An expression of 'essentially enum' type (%1s) is being used as the %2s operand of this logical operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4529" level="QA_WARNING" help="doc-en_US/doc/messages/4529.html" severity="2">
   <text>An expression of 'essentially enum' type (%1s) is being used as the first operand of this conditional operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4532" level="QA_WARNING" help="doc-en_US/doc/messages/4532.html" severity="4">
   <text>An expression of 'essentially signed' type (%1s) is being used as the %2s operand of this bitwise operator (%3s).</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4533" level="QA_WARNING" help="doc-en_US/doc/messages/4533.html" severity="4">
   <text>An expression of 'essentially signed' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4534" level="QA_WARNING" help="doc-en_US/doc/messages/4534.html" severity="4">
   <text>An expression of 'essentially signed' type (%1s) is being used as the right-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4538" level="QA_WARNING" help="doc-en_US/doc/messages/4538.html" severity="2">
   <text>An expression of 'essentially signed' type (%1s) is being used as the %2s operand of this logical operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4539" level="QA_WARNING" help="doc-en_US/doc/messages/4539.html" severity="2">
   <text>An expression of 'essentially signed' type (%1s) is being used as the first operand of this conditional operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4542" level="QA_WARNING" help="doc-en_US/doc/messages/4542.html" severity="3">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the %2s operand of this bitwise operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4543" level="QA_WARNING" help="doc-en_US/doc/messages/4543.html" severity="2">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4544" level="QA_WARNING" help="doc-en_US/doc/messages/4544.html" severity="2">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the right-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4548" level="QA_WARNING" help="doc-en_US/doc/messages/4548.html" severity="2">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the %2s operand of this logical operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4549" level="QA_WARNING" help="doc-en_US/doc/messages/4549.html" severity="2">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the first operand of this conditional operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4558" level="QA_WARNING" help="doc-en_US/doc/messages/4558.html" severity="2">
   <text>An expression of 'essentially unsigned' type (%1s) is being used as the %2s operand of this logical operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4559" level="QA_WARNING" help="doc-en_US/doc/messages/4559.html" severity="2">
   <text>An expression of 'essentially unsigned' type (%1s) is being used as the first operand of this conditional operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4568" level="QA_WARNING" help="doc-en_US/doc/messages/4568.html" severity="5">
   <text>An expression of 'essentially floating' type (%1s) is being used as the %2s operand of this logical operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4569" level="QA_WARNING" help="doc-en_US/doc/messages/4569.html" severity="5">
   <text>An expression of 'essentially floating' type (%1s) is being used as the first operand of this conditional operator (%2s).</text>
   <references>
      </references>
  </message>
  <message id="4570" level="QA_WARNING" help="doc-en_US/doc/messages/4570.html" severity="3">
   <text>The operand of this ~ operator has an 'essential type' which is narrower than type 'int'.</text>
   <references>
      </references>
  </message>
  <message id="4571" level="QA_WARNING" help="doc-en_US/doc/messages/4571.html" severity="3">
   <text>The left-hand operand of this &lt;&lt; operator has an 'essential type' which is narrower than type 'int'.</text>
   <references>
      </references>
  </message>
  <message id="4580" level="QA_WARNING" help="doc-en_US/doc/messages/4580.html" severity="5">
   <text>An operand of 'essentially character' type is being added to another operand of 'essentially character' type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4581" level="QA_WARNING" help="doc-en_US/doc/messages/4581.html" severity="5">
   <text>An operand of 'essentially character' type is being subtracted from an operand of 'essentially signed' type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4582" level="QA_WARNING" help="doc-en_US/doc/messages/4582.html" severity="5">
   <text>An operand of 'essentially character' type is being subtracted from an operand of 'essentially unsigned' type.</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4583" level="QA_WARNING" help="doc-en_US/doc/messages/4583.html" severity="4">
   <text>An expression of 'essentially character' type (%1s) is being used as the %2s operand of this arithmetic operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4584" level="QA_WARNING" help="doc-en_US/doc/messages/4584.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the %2s operand of this bitwise operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4585" level="QA_WARNING" help="doc-en_US/doc/messages/4585.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4586" level="QA_WARNING" help="doc-en_US/doc/messages/4586.html" severity="5">
   <text>An expression of 'essentially character' type (%1s) is being used as the right-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4587" level="QA_WARNING" help="doc-en_US/doc/messages/4587.html" severity="4">
   <text>An expression of 'essentially signed' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Critical Problems"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4588" level="QA_WARNING" help="doc-en_US/doc/messages/4588.html" severity="3">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the %2s operand of this bitwise operator (%3s).</text>
   <references>
      </references>
  </message>
  <message id="4589" level="QA_WARNING" help="doc-en_US/doc/messages/4589.html" severity="2">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the left-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4590" level="QA_WARNING" help="doc-en_US/doc/messages/4590.html" severity="2">
   <text>A non-negative constant expression of 'essentially signed' type (%1s) is being used as the right-hand operand of this shift operator (%2s).</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4599" level="QA_WARNING" help="doc-en_US/doc/messages/4599.html" severity="2">
   <text>Operands of binary operator '%1s' have the same type '%2s' but distinct type names '%3s' and '%4s'.</text>
   <references>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4600" level="QA_WARNING" help="doc-en_US/doc/messages/4600.html" severity="2">
   <text>The macro '%1s' is also defined in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4601" level="QA_WARNING" help="doc-en_US/doc/messages/4601.html" severity="2">
   <text>The macro '%1s' is the name of an identifier in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4602" level="QA_WARNING" help="doc-en_US/doc/messages/4602.html" severity="2">
   <text>The identifier '%1s' is declared as a macro in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4603" level="QA_WARNING" help="doc-en_US/doc/messages/4603.html" severity="2">
   <text>The object/function '%1s'is being defined with the same name as an ordinary identifier defined in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4604" level="QA_WARNING" help="doc-en_US/doc/messages/4604.html" severity="2">
   <text>The object/function '%1s' is being declared with the same name as an ordinary identifier defined in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4605" level="QA_WARNING" help="doc-en_US/doc/messages/4605.html" severity="2">
   <text>The typedef '%1s' is also defined in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4606" level="QA_WARNING" help="doc-en_US/doc/messages/4606.html" severity="2">
   <text>The typedef '%1s' has the same name as another ordinary identifier in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4607" level="QA_WARNING" help="doc-en_US/doc/messages/4607.html" severity="2">
   <text>The enum constant '%1s' has the same name as another ordinary identifier in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4608" level="QA_WARNING" help="doc-en_US/doc/messages/4608.html" severity="2">
   <text>The tag '%1s' is also defined in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.1.2.1]"/>
    <reference source="ISO:C99 Language [7.1.3]"/>
    <reference source="Security Problems"/>
   </references>
  </message>
  <message id="4620" level="QA_WARNING" help="doc-en_US/doc/messages/4620.html" severity="2">
   <text>The macro '%1s' may also be defined as a macro in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C99 Language [7.8]"/>
   </references>
  </message>
  <message id="4621" level="QA_WARNING" help="doc-en_US/doc/messages/4621.html" severity="2">
   <text>The macro '%1s' may also be defined as a typedef in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C99 Language [Integer]"/>
   </references>
  </message>
  <message id="4622" level="QA_WARNING" help="doc-en_US/doc/messages/4622.html" severity="2">
   <text>The identifier '%1s' may be defined as a macro in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C99 Language [7.8]"/>
   </references>
  </message>
  <message id="4623" level="QA_WARNING" help="doc-en_US/doc/messages/4623.html" severity="2">
   <text>The typedef '%1s' may also be defined in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C99 Language [Integer]"/>
   </references>
  </message>
  <message id="4624" level="QA_WARNING" help="doc-en_US/doc/messages/4624.html" severity="2">
   <text>The ordinary identifier '%1s' may be defined as a typedef in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C99 Language [Integer]"/>
   </references>
  </message>
  <message id="4640" level="QA_WARNING" help="doc-en_US/doc/messages/4640.html" severity="2">
   <text>The macro '%1s' could conflict in the future with the name of a macro in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.13]"/>
    <reference source="ISO:C99 Language [7.26]"/>
   </references>
  </message>
  <message id="4641" level="QA_WARNING" help="doc-en_US/doc/messages/4641.html" severity="2">
   <text>The identifier '%1s' could conflict in the future with the name of a macro in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.13]"/>
    <reference source="ISO:C99 Language [7.26]"/>
   </references>
  </message>
  <message id="4642" level="QA_WARNING" help="doc-en_US/doc/messages/4642.html" severity="2">
   <text>The macro '%1s' could conflict in the future with the name of a function in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.13]"/>
    <reference source="ISO:C99 Language [7.26]"/>
   </references>
  </message>
  <message id="4643" level="QA_WARNING" help="doc-en_US/doc/messages/4643.html" severity="2">
   <text>The identifier '%1s' could conflict in the future with the name of a function in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.13]"/>
    <reference source="ISO:C99 Language [7.26]"/>
   </references>
  </message>
  <message id="4644" level="QA_WARNING" help="doc-en_US/doc/messages/4644.html" severity="2">
   <text>The macro '%1s' could conflict in the future with the name of a typedef in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.13]"/>
    <reference source="ISO:C99 Language [7.26]"/>
   </references>
  </message>
  <message id="4645" level="QA_WARNING" help="doc-en_US/doc/messages/4645.html" severity="2">
   <text>The identifier '%1s' could conflict in the future with the name of a typedef in '&lt;%2s&gt;'.</text>
   <references>
    <reference source="ISO:C90 Language [7.13]"/>
    <reference source="ISO:C99 Language [7.26]"/>
   </references>
  </message>
  <message id="4700" level="QA_WARNING" help="doc-en_US/doc/messages/4700.html" severity="3">
   <text>Metric value out of threshold range: %s.</text>
   <references>
      </references>
  </message>
  <message id="4810" level="QA_WARNING" help="doc-en_US/doc/messages/4810.html" severity="1">
   <text>Invalid annotation: tag '%1s' is not defined subsequently in this file.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4811" level="QA_WARNING" help="doc-en_US/doc/messages/4811.html" severity="1">
   <text>The start of the range '%1s', starts and ends at the same location.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4812" level="QA_WARNING" help="doc-en_US/doc/messages/4812.html" severity="1">
   <text>'%1s' not allowed here.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4813" level="QA_WARNING" help="doc-en_US/doc/messages/4813.html" severity="1">
   <text>The location annotation is not preceded by a suppression annotation which refers to it.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4814" level="QA_WARNING" help="doc-en_US/doc/messages/4814.html" severity="1">
   <text>A location annotation cannot itself have a location specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4815" level="QA_WARNING" help="doc-en_US/doc/messages/4815.html" severity="1">
   <text>The specified product name is invalid.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4816" level="QA_WARNING" help="doc-en_US/doc/messages/4816.html" severity="1">
   <text>Justification comments are not allowed in location annotations.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4817" level="QA_WARNING" help="doc-en_US/doc/messages/4817.html" severity="1">
   <text>Justification comments are not allowed to be empty.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4818" level="QA_WARNING" help="doc-en_US/doc/messages/4818.html" severity="1">
   <text>This location specifier is not valid with '%1s' annotation.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4819" level="QA_WARNING" help="doc-en_US/doc/messages/4819.html" severity="1">
   <text>Redefinition of annotation for macro '%1s'.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4820" level="QA_WARNING" help="doc-en_US/doc/messages/4820.html" severity="1">
   <text>Annotation kind is expected.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4821" level="QA_WARNING" help="doc-en_US/doc/messages/4821.html" severity="1">
   <text>Colon is expected.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4822" level="QA_WARNING" help="doc-en_US/doc/messages/4822.html" severity="1">
   <text>Tag name is expected.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4823" level="QA_WARNING" help="doc-en_US/doc/messages/4823.html" severity="1">
   <text>Annotation syntax error.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4825" level="QA_WARNING" help="doc-en_US/doc/messages/4825.html" severity="1">
   <text>Unexpected character.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4826" level="QA_WARNING" help="doc-en_US/doc/messages/4826.html" severity="1">
   <text>Message specification is incomplete or missing.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4827" level="QA_WARNING" help="doc-en_US/doc/messages/4827.html" severity="1">
   <text>Tag name is not allowed in the message specification of continuous suppression annotation.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4828" level="QA_WARNING" help="doc-en_US/doc/messages/4828.html" severity="1">
   <text>Invalid usage of predefined location tag.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4829" level="QA_WARNING" help="doc-en_US/doc/messages/4829.html" severity="1">
   <text>Invalid character in message specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4830" level="QA_WARNING" help="doc-en_US/doc/messages/4830.html" severity="1">
   <text>Unexpected left bracket in message specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4831" level="QA_WARNING" help="doc-en_US/doc/messages/4831.html" severity="1">
   <text>Unexpected right bracket in message specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4832" level="QA_WARNING" help="doc-en_US/doc/messages/4832.html" severity="1">
   <text>Unexpected left bracket in tag name.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4833" level="QA_WARNING" help="doc-en_US/doc/messages/4833.html" severity="1">
   <text>Unexpected right bracket in tag name.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4834" level="QA_WARNING" help="doc-en_US/doc/messages/4834.html" severity="1">
   <text>Expected left bracket in product specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
  <message id="4835" level="QA_WARNING" help="doc-en_US/doc/messages/4835.html" severity="1">
   <text>Expected right bracket in product specifier.</text>
   <references>
    <reference source="Critical Problems"/>
   </references>
  </message>
 </messages>
</component>
